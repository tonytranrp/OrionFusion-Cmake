class Block {
  public:
    static const float SIZE_OFFSET;
    static const std::__cxx11::string BLOCK_DESCRIPTION_PREFIX;
    static const int UPDATE_NEIGHBORS;
    static const int UPDATE_CLIENTS;
    static const int UPDATE_INVISIBLE;
    static const int FORCE_BLOCK_EVENT;
    static const int UPDATE_NONE;
    static const int UPDATE_ALL;
    static const int TILE_NUM_SHIFT;
  private:
    static const Block *mBlocks[512];
    const DataID mData;
    gsl::not_null<BlockLegacy*> mLegacyBlock;
    CachedComponentData mCachedComponentData;
    OwnerPtr<EntityId> mEntity;
    std::vector<HashedString, std::allocator<HashedString> > mTags;
    BlockSerializationId mSerializationId;
    HashType64 mSerializationIdHash;
    BlockRuntimeId mRuntimeId;
    int mHasBlockAABBComponentData;
    bool mHasRuntimeId;

  public:
    Brightness getLightEmission(void) const;
    Vec3 getLightColor(void) const;
    float getLightEmissionToIntensityFactor(void) const;
    bool getLightIsLarge(void) const;
    Brightness getEmissiveBrightness(void) const;
    bool hasVariableLighting(void) const;
    float getTranslucency(void) const;
    bool shouldRandomTick(void) const;
    bool shouldRandomTickExtraLayer(void) const;
    bool shouldTickOnSetBlock(void) const;
    bool pushesOutItems(void) const;
    bool isSolid(void) const;
    bool isPreservingMediumWhenPlaced(const Block &) const;
    bool ignoreBlockForInsideCubeRenderer(void) const;
    Brightness getLight(void) const;
    int getFlameOdds(void) const;
    int getBurnOdds(void) const;
    bool isLavaFlammable(void) const;
    bool useNewTessellation(void) const;
    bool needsLegacyTopRotation(void) const;
    const CopperBehavior * tryGetCopperBehavior(void) const;
    bool isClimbable(const IActorMovementProxy &) const;
    void setFlammable(int, int, bool) const;
    bool hasState(const ItemState &) const;
    bool hasState(const std::__cxx11::string &) const;
    const ItemState * getBlockState(const HashedString &) const;
    unsigned int getStateMask(const ItemState &) const;
    bool matchesStates(const BlockLegacy &) const;
    const Block & keepState(const ItemState &) const;
    const Block & copyState(const Block &, const ItemState &) const;
    Block(const DataID, gsl::not_null<BlockLegacy*>);
    Block(const DataID, gsl::not_null<BlockLegacy*>, BlockSerializationId, const BlockRuntimeId &);
    Block(const Block &);
    Block(Block &&);
    virtual ~Block(void);
    Block & operator=(const Block &);
    Block & operator=(Block &&);
    bool operator!=(const Block &) const;
    bool operator!=(const HashType64 &) const;
    bool operator==(const Block &) const;
    bool operator==(const HashType64 &) const;
    const HashType64 getHashedSerializedId(void) const;
    bool isTheSameAs(const Block *) const;
    const Block & getStateFromLegacyData(DataID) const;
    virtual bool hasProperty(BlockProperty) const;
    void cacheComponentData(void);
    std::unordered_map<HashedString, int, std::hash<HashedString>, std::equal_to<HashedString>, std::allocator<std::pair<HashedString const, int> > > duplicateGeometryComponent(HashedString, std::shared_ptr<ClientBlockPipeline::BlockSchematic>);
    void randomTick(BlockSource &, const BlockPos &, Random &) const;
    void queuedTick(BlockSource &, const BlockPos &, Random &) const;
    virtual bool getCollisionShape(AABB &, const IConstBlockSource &, const BlockPos &, optional_ref<GetCollisionShapeInterface const>) const;
    bool isObstructingChests(BlockSource &, const BlockPos &) const;
    Vec3 randomlyModifyPosition(const BlockPos &, int32_t &) const;
    Vec3 randomlyModifyPosition(const BlockPos &) const;
    bool addAABB(const AABB &, const AABB *, std::vector<AABB, std::allocator<AABB> > &) const;
    void addAABBs(const BlockSource &, const BlockPos &, const AABB *, std::vector<AABB, std::allocator<AABB> > &) const;
    virtual const AABB & getAABB(const IConstBlockSource &, const BlockPos &, AABB &, bool) const;
    bool addCollisionShapes(const BlockSource &, const BlockPos &, const AABB *, std::vector<AABB, std::allocator<AABB> > &, optional_ref<GetCollisionShapeInterface const>) const;
    bool updateTallestCollisionShape(const BlockSource &, const BlockPos &, const AABB &, optional_ref<GetCollisionShapeInterface const>, AABB &, const Vec3 &, float &) const;
    const AABB & getOutline(BlockSource &, const BlockPos &, AABB &) const;
    bool getLiquidClipVolume(BlockSource &, const BlockPos &, AABB &) const;
    bool isUnbreakable(void) const;
    bool isHeavy(void) const;
    bool isWaterBlocking(void) const;
    bool isStrippable(const Block &) const;
    bool isFilteredOut(BlockRenderLayer) const;
    const Block & getStrippedBlock(void) const;
    bool canDamperVibrations(void) const;
    bool canOccludeVibrations(void) const;
    bool canBeBrokenFromFalling(void) const;
    bool isPartialBlock(const BlockSource &, const BlockPos &) const;
    bool isTopPartialBlock(const BlockSource &, const BlockPos &) const;
    bool canProvideSupport(FacingID, BlockSupportType) const;
    bool canProvideFullSupport(FacingID) const;
    bool canProvideMultifaceSupport(FacingID) const;
    bool canConnect(const Block &, FacingID, const Block &) const;
    void getConnectedDirections(const BlockPos &, BlockSource &, bool &, bool &, bool &, bool &) const;
    virtual bool isSolidBlockingBlock(void) const;
    bool isMotionBlockingBlock(void) const;
    virtual bool isSolidBlockingBlockAndNotSignalSource(void) const;
    bool isEmpty(void) const;
    bool isCropBlock(void) const;
    bool isStemBlock(void) const;
    bool isContainerBlock(void) const;
    bool isCraftingBlock(void) const;
    bool isInteractiveBlock(void) const;
    bool isHurtableBlock(void) const;
    bool isFenceBlock(void) const;
    bool isFenceGateBlock(void) const;
    bool isThinFenceBlock(void) const;
    bool isWallBlock(void) const;
    bool isStairBlock(void) const;
    bool isDoorBlock(void) const;
    bool isSlabBlock(void) const;
    bool isRailBlock(void) const;
    bool isButtonBlock(void) const;
    bool isLeverBlock(void) const;
    bool isCandleCakeBlock(void) const;
    bool isMultifaceBlock(void) const;
    bool canHurtAndBreakItem(void) const;
    bool isSignalSource(void) const;
    virtual bool isAir(void) const;
    virtual bool canBeOriginalSurface(void) const;
    bool isValidAuxValue(int) const;
    bool canFillAtPos(BlockSource &, const BlockPos &) const;
    const Block & sanitizeFillBlock(BlockSource &, const BlockPos &, const Block &) const;
    void onFillBlock(BlockSource &, const BlockPos &, const Block &) const;
    int getDirectSignal(BlockSource &, const BlockPos &, int) const;
    bool canBeDestroyedByWaterSpread(void) const;
    bool waterSpreadCausesSpawn(void) const;
    bool canContainLiquid(void) const;
    bool liquidCanFlowIntoFromDirection(FacingID, const GetBlockFunction &, const BlockPos &) const;
    bool shouldConnectToRedstone(BlockSource &, const BlockPos &, int) const;
    void handlePrecipitation(BlockSource &, const BlockPos &, float, float) const;
    BlockActorType getBlockEntityType(void) const;
    bool hasBlockEntity(void) const;
    float getThickness(void) const;
    float getFlexibility(BlockSource &, const BlockPos &) const;
    bool checkIsPathable(Actor &, const BlockPos &, const BlockPos &) const;
    bool shouldDispense(BlockSource &, Container &) const;
    bool dispense(BlockSource &, Container &, int, const Vec3 &, FacingID) const;
    void onPlace(BlockSource &, const BlockPos &, const Block &) const;
    void onPlayerPlacing(BlockSource &, const BlockPos &, Actor &, FacingID) const;
    void onRemove(BlockSource &, const BlockPos &) const;
    void onExploded(BlockSource &, const BlockPos &, Actor *) const;
    void onStandOn(EntityContext &, const BlockPos &) const;
    void onStepOn(Actor &, const BlockPos &) const;
    void onStepOff(Actor &, const BlockPos &) const;
    void onFallOn(BlockSource &, const BlockPos &, Actor &, float) const;
    void onProjectileHit(BlockSource &, const BlockPos &, const Actor &) const;
    void onLightningHit(BlockSource &, const BlockPos &) const;
    void transformOnFall(BlockSource &, const BlockPos &, Actor *, float) const;
    void onRedstoneUpdate(BlockSource &, const BlockPos &, int, bool) const;
    void onMove(BlockSource &, const BlockPos &, const BlockPos &) const;
    bool detachesOnPistonMove(BlockSource &, const BlockPos &) const;
    void movedByPiston(BlockSource &, const BlockPos &) const;
    void onStructureBlockPlace(BlockSource &, const BlockPos &) const;
    void onStructureNeighborBlockPlace(BlockSource &, const BlockPos &) const;
    void setupRedstoneComponent(BlockSource &, const BlockPos &) const;
    BlockProperty getRedstoneProperty(BlockSource &, const BlockPos &) const;
    void updateEntityAfterFallOn(const BlockPos &, UpdateEntityAfterFallOnInterface &) const;
    bool isBounceBlock(void) const;
    bool ignoreEntitiesOnPistonMove(void) const;
    bool onFertilized(BlockSource &, const BlockPos &, Actor *, FertilizerType) const;
    bool mayConsumeFertilizer(BlockSource &) const;
    bool canBeFertilized(BlockSource &, const BlockPos &, const Block &) const;
    bool mayPick(void) const;
    bool mayPick(const BlockSource &, bool) const;
    bool mayPlace(BlockSource &, const BlockPos &, FacingID) const;
    bool mayPlace(BlockSource &, const BlockPos &) const;
    bool mayPlaceOn(BlockSource &, const BlockPos &) const;
    bool tryToPlace(BlockSource &, const BlockPos &, const ActorBlockSyncMessage *) const;
    bool tryToTill(BlockSource &, const BlockPos &, Actor &, ItemStack &) const;
    bool breaksFallingBlocks(const BaseGameVersion) const;
    void destroy(BlockSource &, const BlockPos &, Actor *) const;
    bool playerWillDestroy(Player &, const BlockPos &) const;
    bool getIgnoresDestroyPermissions(Actor &, const BlockPos &) const;
    void neighborChanged(BlockSource &, const BlockPos &, const BlockPos &) const;
    bool getSecondPart(const BlockSource &, const BlockPos &, BlockPos &) const;
    int getResourceCount(Randomize &, int) const;
    ItemInstance asItemInstance(BlockSource &, const BlockPos &) const;
    void spawnResources(BlockSource &, const BlockPos &, Randomize &, std::vector<Item const*, std::allocator<Item const*> > *, float, const ItemStack &) const;
    void trySpawnResourcesOnExplosion(BlockSource &, const BlockPos &, const Block &, std::vector<Item const*, std::allocator<Item const*> > *, float) const;
    ItemActor * popResource(BlockSource &, const BlockPos &, const ItemInstance &) const;
    bool spawnBurnResources(BlockSource &, float, float, float) const;
    float getExplosionResistance(Actor *) const;
    HitResult clip(const BlockSource &, const BlockPos &, const Vec3 &, const Vec3 &, bool) const;
    HitResult clip(const BlockSource &, const BlockPos &, const Vec3 &, const Vec3 &, bool, const AABB &) const;
    bool isInteraction(void) const;
    bool use(Player &, const BlockPos &, FacingID) const;
    std::__cxx11::string getCraftingLabelText(void) const;
    const Block & getPlacementBlock(Actor &, const BlockPos &, FacingID, const Vec3 &, int) const;
    int calcVariant(BlockSource &, const BlockPos &, const Color &) const;
    bool isAttachedTo(BlockSource &, const BlockPos &, BlockPos &) const;
    bool attack(Player *, const BlockPos &) const;
    void handleEntityInside(BlockSource &, const BlockPos &, Actor *, Vec3 &) const;
    void entityInside(BlockSource &, const BlockPos &, Actor &) const;
    void playerDestroy(Player &, const BlockPos &) const;
    bool canSurvive(BlockSource &, const BlockPos &) const;
    int getExperienceDrop(Random &) const;
    bool canBeBuiltOver(BlockSource &, const BlockPos &, const BlockItem &) const;
    bool canBeBuiltOver(BlockSource &, const BlockPos &) const;
    void triggerEvent(BlockSource &, const BlockPos &, int, int) const;
    void executeEvent(const DefinitionTrigger &, RenderParams &) const;
    void executeEvent(BlockSource &, const BlockPos &, const Block &, const std::__cxx11::string &, Actor &) const;
    void executeEvent(const std::__cxx11::string &, RenderParams &) const;
    bool executeTrigger(const DefinitionTrigger &, RenderParams &) const;
    void forceExecuteTrigger(const DefinitionTrigger &, RenderParams &) const;
    void executeItemEvent(ItemStackBase &, const std::__cxx11::string &, BlockSource &, const BlockPos &, Actor *) const;
    const MobSpawnerData * getMobToSpawn(const SpawnConditions &, BlockSource &) const;
    ItemInstance getSilkTouchItemInstance(void) const;
    virtual const Material & getMaterial(void) const;
    Color getMapColor(BlockSource &, const BlockPos &) const;
    bool shouldStopFalling(Actor &) const;
    bool pushesUpFallingBlocks(void) const;
    float calcGroundFriction(const IMobMovementProxy &, const BlockPos &) const;
    bool canHaveExtraData(void) const;
    bool hasComparatorSignal(void) const;
    int getComparatorSignal(BlockSource &, const BlockPos &, FacingID) const;
    bool canSlide(BlockSource &, const BlockPos &) const;
    bool canInstatick(void) const;
    float getGravity(void) const;
    float getFriction(void) const;
    CreativeItemCategory getCreativeCategory(void) const;
    void setCreativeCategory(const CreativeItemCategory);
    string_span getCreativeGroup(void) const;
    void setCreativeGroup(const string_span);
    float getDestroySpeed(void) const;
    int getIconYOffset(void) const;
    bool getBlendedCanRenderAsOpaque(void) const;
    std::__cxx11::string getDescriptionId(void) const;
    const std::__cxx11::string & getRawNameId(void) const;
    const HashedString & getName(void) const;
    std::__cxx11::string buildDescriptionName(void) const;
    std::__cxx11::string buildDescriptionId(void) const;
    bool isAuxValueRelevantForPicking(void) const;
    const BlockSerializationId & getSerializationId(void) const;
    const BlockRuntimeId & getRuntimeId(void) const;
    const bool hasRuntimeId(void) const;
    std::__cxx11::string toDebugString(void) const;
    int getColor(void) const;
    int getColor(BlockSource &, const BlockPos &) const;
    int getColorAtPos(BlockSource &, const BlockPos &) const;
    int getColorForParticle(BlockSource &, const BlockPos &, const Block &) const;
    BlockTintType getBlockTintType(void) const;
    bool isSeasonTinted(BlockSource &, const BlockPos &) const;
    static void DEPRECATEDcallOnGraphicsModeChanged(const BlockGraphicsModeChangeContext &);
    virtual BlockRenderLayer getRenderLayer(void) const;
    BlockRenderLayer getRenderLayer(BlockSource &, const BlockPos &) const;
    int getExtraRenderLayers(void) const;
    bool isAlphaTested(void) const;
    float getBrightnessGamma(void) const;
    float getShadeBrightness(void) const;
    const AABB & getVisualShapeInWorld(BlockSource &, const BlockPos &, AABB &, bool) const;
    const AABB & getVisualShape(AABB &, bool) const;
    const AABB & getUIShape(AABB &) const;
    bool isTextureAnimated(void) const;
    int telemetryVariant(BlockSource &, const BlockPos &) const;
    int getVariant(void) const;
    FacingID getMappedFace(FacingID) const;
    void animateTick(BlockSource &, const BlockPos &, Random &) const;
    void getDebugText(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, const BlockPos &) const;
    bool getAllowsRunes(void) const;
    float getParticleQuantityScalar(void) const;
    const BlockLegacy & getLegacyBlock(void) const;
    const BlockLegacy * getLegacyBlockPtr(void) const;
    const Block & getDefaultState(void) const;
    bool isTrapdoor(void) const;
    bool isDoor(void) const;
    bool dealsContactDamage(const Actor &, bool) const;
    bool causesFreezeEffect(void) const;
    Block & addTag(const HashedString &);
    bool hasTag(const HashedString &) const;
    bool hasTag(const HashType64 &) const;
    const std::vector<HashedString, std::allocator<HashedString> > & getTags(void) const;
    const Block * tryGetInfested(void) const;
    const Block * tryGetUninfested(void) const;
    BlockOcclusionType getOcclusionType(void) const;
    void initFromDefinition(const BlockComponentGroupDescription &);
    bool hasEntity(void) const;
    EntityContext & getEntityForModification(void) const;
    const EntityContext & getEntityForTest(void) const;
  private:
    const EntityContext & getEntity(void) const;
    const EntityContext & getEntityNoCheck(void) const;
    void _tryInitEntityIfNotInitialized(void);
  public:
    void initParams(RenderParams &, BlockSource &, const BlockPos &, Actor *) const;
    void initEntity(EntityRegistry &);
    const BlockStateGroup * getBlockStateGroup(void) const;
    bool isUnitCube(void) const;
  protected:
    void buildSerializationId(uint32_t);
    void setRuntimeId(const BlockRuntimeId &) const;
    bool canBeSilkTouched(void) const;
    static FacingID getPlacementFacingAll(Actor &, const BlockPos &, float);
    static FacingID getPlacementFacingAllExceptAxisY(Actor &, const BlockPos &, float);
  private:
    const DataID & getDataDEPRECATED(void) const;
    Brightness _getLight(void) const;
    Brightness _getLightEmission(void) const;
    Vec3 _getLightColor(void) const;
    float _getLightEmissionToIntensityFactor(void) const;
    bool _getLightIsLarge(void) const;
    Brightness _getEmissiveBrightness(void) const;
    int _getBurnOdds(void) const;
    int _getFlameOdds(void) const;
    bool _isSolid(void) const;
    float _getFriction(void) const;
    float _getDestroySpeed(void) const;
    bool _isUnitCube(void) const;
    BlockOcclusionType _getBlockOcclusionType(void) const;
    bool _useNewTessellation(void) const;
    bool _needsLegacyTopRotation(void) const;
    BlockTypeRegistryReadLock _lockRegistryForRead(void) const;
  public:
    gsl::not_null<Block const*> setState<Facing::Name>(const ItemState &, Facing::Name) const;
    gsl::not_null<Block const*> setState<unsigned char>(const ItemState &, unsigned char) const;
    int getState<int>(const ItemState &) const;
    int getState<int>(const size_t &) const;
    unsigned char getState<unsigned char>(const ItemState &) const;
    unsigned char getState<unsigned char>(const size_t &) const;
    AnvilDamage getState<AnvilDamage>(const ItemState &) const;
    AnvilDamage getState<AnvilDamage>(const size_t &) const;
    gsl::not_null<Block const*> setState<Direction::Type>(const ItemState &, Direction::Type) const;
    gsl::not_null<Block const*> setState<int>(const ItemState &, int) const;
    bool getState<bool>(const ItemState &) const;
    bool getState<bool>(const size_t &) const;
    gsl::not_null<Block const*> setState<bool>(const ItemState &, bool) const;
    StalkThickness getState<StalkThickness>(const ItemState &) const;
    StalkThickness getState<StalkThickness>(const size_t &) const;
    LeafSize getState<LeafSize>(const ItemState &) const;
    LeafSize getState<LeafSize>(const size_t &) const;
    gsl::not_null<Block const*> setState<StalkThickness>(const ItemState &, StalkThickness) const;
    gsl::not_null<Block const*> setState<LeafSize>(const ItemState &, LeafSize) const;
    gsl::not_null<Block const*> setState<unsigned short>(const ItemState &, unsigned short) const;
    unsigned short getState<unsigned short>(const ItemState &) const;
    unsigned short getState<unsigned short>(const size_t &) const;
    Direction::Type getState<Direction::Type>(const ItemState &) const;
    Direction::Type getState<Direction::Type>(const size_t &) const;
    AttachmentType getState<AttachmentType>(const ItemState &) const;
    AttachmentType getState<AttachmentType>(const size_t &) const;
    gsl::not_null<Block const*> setState<AttachmentType>(const ItemState &, AttachmentType) const;
    BigDripleafTilt getState<BigDripleafTilt>(const ItemState &) const;
    BigDripleafTilt getState<BigDripleafTilt>(const size_t &) const;
    gsl::not_null<Block const*> setState<BigDripleafTilt>(const ItemState &, BigDripleafTilt) const;
    const BlockFlammableComponent * tryGetComponent<BlockFlammableComponent>(void) const;
    const BlockGeometryComponent * tryGetComponent<BlockGeometryComponent>(void) const;
    const BlockLightDampeningComponent * tryGetComponent<BlockLightDampeningComponent>(void) const;
    const BlockBakedMaterialDataComponent * tryGetComponent<BlockBakedMaterialDataComponent>(void) const;
    const BlockRandomTickingComponent * tryGetComponent<BlockRandomTickingComponent>(void) const;
    const BlockLightEmissionComponent * tryGetComponent<BlockLightEmissionComponent>(void) const;
    const BlockMapColorComponent * tryGetComponent<BlockMapColorComponent>(void) const;
    const BlockFrictionComponent * tryGetComponent<BlockFrictionComponent>(void) const;
    const BlockDestructibleByMiningComponent * tryGetComponent<BlockDestructibleByMiningComponent>(void) const;
    const BlockPlacementFilterComponent * tryGetComponent<BlockPlacementFilterComponent>(void) const;
    const BlockQueuedTickingComponent * tryGetComponent<BlockQueuedTickingComponent>(void) const;
    const BlockSelectionBoxComponent * tryGetComponent<BlockSelectionBoxComponent>(void) const;
    const BlockCollisionBoxComponent * tryGetComponent<BlockCollisionBoxComponent>(void) const;
    const BlockDestructibleByExplosionComponent * tryGetComponent<BlockDestructibleByExplosionComponent>(void) const;
    const BlockCraftingTableComponent * tryGetComponent<BlockCraftingTableComponent>(void) const;
    const OnInteractTrigger * tryGetComponent<OnInteractTrigger>(void) const;
    const OnPlayerDestroyedTrigger * tryGetComponent<OnPlayerDestroyedTrigger>(void) const;
    const BlockDisplayNameComponent * tryGetComponent<BlockDisplayNameComponent>(void) const;
    const OnPlacedTrigger * tryGetComponent<OnPlacedTrigger>(void) const;
    const OnPlayerPlacingTrigger * tryGetComponent<OnPlayerPlacingTrigger>(void) const;
    const OnStepOnTrigger * tryGetComponent<OnStepOnTrigger>(void) const;
    const OnStepOffTrigger * tryGetComponent<OnStepOffTrigger>(void) const;
    const OnFallOnTrigger * tryGetComponent<OnFallOnTrigger>(void) const;
    const BlockMaterialInstancesComponent * tryGetComponentNoLock<BlockMaterialInstancesComponent>(void) const;
    const BlockPartVisibilityComponent * tryGetComponent<BlockPartVisibilityComponent>(void) const;
    const BlockPropertyComponent * tryGetComponent<BlockPropertyComponent>(void) const;
    const BlockUnitCubeComponent * tryGetComponent<BlockUnitCubeComponent>(void) const;
    const BlockMaterialInstancesComponent * tryGetComponent<BlockMaterialInstancesComponent>(void) const;
}

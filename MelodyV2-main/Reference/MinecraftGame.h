
class MinecraftGame : public Bedrock::AppIsland, public App, public IMinecraftGame, public LevelListener, public ResourcePackListener, public OptionsObserver, public ActiveDirectoryIdentityObserver, public IDynamicPackageConsumer, public I18nObserver { /* Size=0xe08 */
  /* 0x0000: fields for Bedrock::AppIsland */
  /* 0x0010: fields for App */
  /* 0x0040: fields for IMinecraftGame */
  /* 0x0048: fields for LevelListener */
  /* 0x0050: fields for ResourcePackListener */
  /* 0x0058: fields for OptionsObserver */
  /* 0x0068: fields for ActiveDirectoryIdentityObserver */
  /* 0x0078: fields for IDynamicPackageConsumer */
  /* 0x0080: fields for I18nObserver */
  /* 0x0090 */ bool focusForbidden;
  /* 0x0098 */ std::unique_ptr<MinecraftGraphics,std::default_delete<MinecraftGraphics> > mMinecraftGraphics;
  /* 0x00a0 */ std::unique_ptr<mce::framebuilder::FrameBuilder,std::default_delete<mce::framebuilder::FrameBuilder> > mFrameBuilder;
  /* 0x00a8 */ ServiceRegistrationToken<mce::framebuilder::FrameBuilder> mFrameBuilderServiceRegistrationToken;
  /* 0x00b0 */ std::unique_ptr<mce::FileWatcherNull,std::default_delete<mce::FileWatcherNull> > mFileWatcher;
  /* 0x00b8 */ ServiceRegistrationToken<mce::FileWatcherNull> mFileWatcherServiceRegistrationToken;
  /* 0x00c0 */ std::unique_ptr<UriListener,std::default_delete<UriListener> > mArguments;
  /* 0x00c8 */ std::unique_ptr<UriListener,std::default_delete<UriListener> > mDeeplinkListener;
  /* 0x00d0 */ std::unique_ptr<GameRenderer,std::default_delete<GameRenderer> > mGameRenderer;
  /* 0x00d8 */ std::unique_ptr<CommandListQueue,std::default_delete<CommandListQueue> > mCommandListQueue;
  /* 0x00e0 */ std::unique_ptr<HolosceneRenderer,std::default_delete<HolosceneRenderer> > mHolosceneRenderer;
  /* 0x00e8 */ std::unique_ptr<ExternalServerFile,std::default_delete<ExternalServerFile> > mExternalServer;
  /* 0x00f0 */ std::unique_ptr<mce::TextureGroup,std::default_delete<mce::TextureGroup> > mTextures;
  /* 0x00f8 */ std::unique_ptr<TextureHotReloader,std::default_delete<TextureHotReloader> > mTextureHotReloader;
  /* 0x0100 */ std::unique_ptr<mce::TextureGroup,std::default_delete<mce::TextureGroup> > mStoreCacheTextures;
  /* 0x0108 */ std::unique_ptr<UIRepository,std::default_delete<UIRepository> > mUIRepository;
  /* 0x0110 */ FontHandle mFontHandle;
  /* 0x0140 */ FontHandle mRuneFontHandle;
  /* 0x0170 */ FontHandle mUnicodeFontHandle;
  /* 0x01a0 */ FontHandle mSmoothFontLatinHandle;
  /* 0x01d0 */ FontHandle mUIFontHandle;
  /* 0x0200 */ std::shared_ptr<FontRepository> mFontRepository;
  /* 0x0210 */ std::unique_ptr<EmoticonManager,std::default_delete<EmoticonManager> > mEmoticonManager;
  /* 0x0218 */ std::unique_ptr<TextToIconMapper,std::default_delete<TextToIconMapper> > mTextToIconMapper;
  /* 0x0220 */ std::unique_ptr<MinecraftUIMeasureStrategy,std::default_delete<MinecraftUIMeasureStrategy> > mMeasureStrategy;
  /* 0x0228 */ std::unique_ptr<SeasonsRenderer,std::default_delete<SeasonsRenderer> > mSeasonsRenderer;
  /* 0x0230 */ std::shared_ptr<PersonaRepository> mPersonaRepository;
  /* 0x0240 */ std::shared_ptr<SkinRepository> mSkinRepository;
  /* 0x0250 */ std::unique_ptr<HummingbirdUI,std::default_delete<HummingbirdUI> > mHummingbirdUI;
  /* 0x0258 */ std::unique_ptr<ContentLog,std::default_delete<ContentLog> > mContentLog;
  /* 0x0260 */ ServiceRegistrationToken<ContentLog> mContentLogServiceRegistrationToken;
  /* 0x0268 */ std::unique_ptr<ContentLogFileEndPoint,std::default_delete<ContentLogFileEndPoint> > mContentLogFileEndPoint;
  /* 0x0270 */ std::unique_ptr<GuiContentLogEndPoint,std::default_delete<GuiContentLogEndPoint> > mContentLogGuiEndPoint;
  /* 0x0278 */ std::unique_ptr<DebugEndPoint,std::default_delete<DebugEndPoint> > mDebugEndPoint;
  /* 0x0280 */ std::unique_ptr<AppConfigs,std::default_delete<AppConfigs> > mAppConfig;
  /* 0x0288 */ ServiceRegistrationToken<AppConfigs> mAppConfigServiceRegistrationToken;
  /* 0x0290 */ std::unique_ptr<SceneStack,std::default_delete<SceneStack> > mSceneStack;
  /* 0x0298 */ std::unique_ptr<CachedScenes,std::default_delete<CachedScenes> > mCachedScenes;
  /* 0x02a0 */ std::unique_ptr<hbui::Router,std::default_delete<hbui::Router> > mUIRouter;
  /* 0x02a8 */ bool mMouseGrabbed;
  /* 0x02b0 */ std::unordered_map<unsigned int,std::function<void __cdecl(void)>,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::function<void __cdecl(void)> > > > mButtonDownHandlerMap;
  /* 0x02f0 */ std::unordered_map<unsigned int,std::function<void __cdecl(void)>,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::function<void __cdecl(void)> > > > mButtonUpHandlerMap;
  /* 0x0330 */ std::set<unsigned char,std::less<unsigned char>,std::allocator<unsigned char> > mAvailableClientSubIds;
  /* 0x0340 */ std::unique_ptr<ServerInstance,std::default_delete<ServerInstance> > mServerInstance;
  /* 0x0348 */ std::map<unsigned char,std::shared_ptr<IClientInstance>,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::shared_ptr<IClientInstance> > > > mClientInstances;
  /* 0x0358 */ std::unique_ptr<HolographicPlatform,std::default_delete<HolographicPlatform> > mPrimaryClientHoloInput;
  /* 0x0360 */ std::function<void __cdecl(enum TestCommandType,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,int)> mTestExecuteCommandCallback;
  /* 0x03a0 */ std::function<void __cdecl(enum TestAssetCommandType,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &)> mTestAssetCommandCallback;
  /* 0x03e0 */ std::unique_ptr<Timer,std::default_delete<Timer> > mSimTimer;
  /* 0x03e8 */ std::unique_ptr<Timer,std::default_delete<Timer> > mRealTimer;
  /* 0x03f0 */ std::unique_ptr<DebugUdpProxyConsumer,std::default_delete<DebugUdpProxyConsumer> > mDebugUdpProxy;
  /* 0x03f8 */ std::unique_ptr<MinecraftInputHandler,std::default_delete<MinecraftInputHandler> > mInput;
  /* 0x0400 */ std::unique_ptr<UIDefRepository,std::default_delete<UIDefRepository> > mUIDefRepo;
  /* 0x0408 */ std::unique_ptr<Core::IFileSystem,std::default_delete<Core::IFileSystem> > mFileSystem;
  /* 0x0410 */ std::unique_ptr<SoundEngine,std::default_delete<SoundEngine> > mTempSoundEngine;
  /* 0x0418 */ std::unique_ptr<SoundEngine,std::default_delete<SoundEngine> > mSoundEngine;
  /* 0x0420 */ std::unique_ptr<MusicManager,std::default_delete<MusicManager> > mMusicManager;
  /* 0x0428 */ std::unique_ptr<ProfilingManager,std::default_delete<ProfilingManager> > mProfilingManager;
  /* 0x0430 */ ServiceRegistrationToken<ProfilingManager> mProfilingManagerServiceRegistrationToken;
  /* 0x0438 */ std::unique_ptr<Bedrock::Threading::PendingConditionals,std::default_delete<Bedrock::Threading::PendingConditionals> > mPendingConditionals;
  /* 0x0440 */ ServiceRegistrationToken<Bedrock::Threading::PendingConditionals> mPendingConditionalsServiceRegistrationToken;
  /* 0x0448 */ std::unique_ptr<TextToSpeechSystem,std::default_delete<TextToSpeechSystem> > mTTSSystem;
  /* 0x0450 */ std::unique_ptr<OculusPlatformMessagePump,std::default_delete<OculusPlatformMessagePump> > mOculusPlatformMessagePump;
  /* 0x0458 */ std::unique_ptr<ContentAcquisition,std::default_delete<ContentAcquisition> > mContentAcquisition;
  /* 0x0460 */ std::shared_ptr<OfferRepository> mOfferRepository;
  /* 0x0470 */ std::unique_ptr<PersonaService,std::default_delete<PersonaService> > mPersonaService;
  /* 0x0478 */ std::unique_ptr<ContentCatalogService,std::default_delete<ContentCatalogService> > mContentCatalogService;
  /* 0x0480 */ std::unique_ptr<LibraryService,std::default_delete<LibraryService> > mLibraryService;
  /* 0x0488 */ std::unique_ptr<ChannelService,std::default_delete<ChannelService> > mChannelService;
  /* 0x0490 */ std::shared_ptr<LessonProgressionService> mLessonProgressionService;
  /* 0x04a0 */ std::shared_ptr<StoreCatalogConfig> mStoreCatalogConfig;
  /* 0x04b0 */ std::unique_ptr<StoreCatalogRepository,std::default_delete<StoreCatalogRepository> > mStoreCatalogRepository;
  /* 0x04b8 */ std::unique_ptr<ServiceDrivenImageRepository,std::default_delete<ServiceDrivenImageRepository> > mServiceDrivenImageRepository;
  /* 0x04c0 */ std::unique_ptr<LibraryRepository,std::default_delete<LibraryRepository> > mLibraryRepository;
  /* 0x04c8 */ std::unique_ptr<ThirdPartyServerRepository,std::default_delete<ThirdPartyServerRepository> > mThirdPartyServerRepository;
  /* 0x04d0 */ std::unique_ptr<ResourcePackRepository,std::default_delete<ResourcePackRepository> > mResourcePackRepository;
  /* 0x04d8 */ std::unique_ptr<WorldTemplateManager,std::default_delete<WorldTemplateManager> > mWorldTemplateManager;
  /* 0x04e0 */ ResourcePackManager* mResourcePackManager;
  /* 0x04e8 */ std::unique_ptr<ClientAssetCacheController,std::default_delete<ClientAssetCacheController> > mClientAssetCacheController;
  /* 0x04f0 */ std::unique_ptr<DevConsoleLogger,std::default_delete<DevConsoleLogger> > mDevConsoleLogger;
  /* 0x04f8 */ std::shared_ptr<GeometryGroup> mGeometryGroup;
  /* 0x0508 */ std::shared_ptr<ClientBlockPipeline::SchematicsRepository> mSchematicRepository;
  /* 0x0518 */ std::unique_ptr<ParticleEffectGroup,std::default_delete<ParticleEffectGroup> > mParticleEffectGroup;
  /* 0x0520 */ std::unique_ptr<ParticleSystem::ParticleEffectComponentRegistry,std::default_delete<ParticleSystem::ParticleEffectComponentRegistry> > mParticleComponentRegistry;
  /* 0x0528 */ std::unique_ptr<ActorAnimationGroup,std::default_delete<ActorAnimationGroup> > mActorAnimationGroup;
  /* 0x0530 */ std::unique_ptr<ActorAnimationControllerGroup,std::default_delete<ActorAnimationControllerGroup> > mActorAnimationControllerGroup;
  /* 0x0538 */ std::unique_ptr<RenderControllerGroup,std::default_delete<RenderControllerGroup> > mRenderControllerGroup;
  /* 0x0540 */ std::unique_ptr<NetworkHandler,std::default_delete<NetworkHandler> > mClientNetworkSystem;
  /* 0x0548 */ ServiceReference<Social::UserManager> mUserManager;
  /* 0x0568 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mCurrentSignInXUID;
  /* 0x0588 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mCurrentEntitlementsXUID;
  /* 0x05a8 */ std::unique_ptr<Social::MultiplayerServiceManager,std::default_delete<Social::MultiplayerServiceManager> > mMultiplayerServiceManager;
  /* 0x05b0 */ std::unique_ptr<Social::InteractivityManager,std::default_delete<Social::InteractivityManager> > mInteractivityManager;
  /* 0x05b8 */ std::unique_ptr<Social::InviteUriListener,std::default_delete<Social::InviteUriListener> > mInviteListener;
  /* 0x05c0 */ std::unique_ptr<Social::RealmsUriListener,std::default_delete<Social::RealmsUriListener> > mRealmsListener;
  /* 0x05c8 */ std::shared_ptr<FlightingService> mFlightingService;
  /* 0x05d8 */ std::unique_ptr<TreatmentPackDownloadMonitor,std::default_delete<TreatmentPackDownloadMonitor> > mTreatmentPackMonitor;
  /* 0x05e0 */ std::shared_ptr<GenericEntitlementChangeListener> mEntitlementChangeListener;
  /* 0x05f0 */ bool mHasNewPrimaryUserForEntitlements;
  /* 0x05f1 */ bool mHasUnhandledEntitlementsChangeEvent;
  /* 0x05f8 */ std::unique_ptr<DateManager,std::default_delete<DateManager> > mDateManager;
  /* 0x0600 */ ServiceRegistrationToken<DateManager> mDateManagerServiceRegistrationToken;
  /* 0x0608 */ std::unique_ptr<PatchNotesManager,std::default_delete<PatchNotesManager> > mPatchNotesManager;
  /* 0x0610 */ std::shared_ptr<FileArchiver> mFileArchiver;
  /* 0x0620 */ std::unique_ptr<TextureAtlas,std::default_delete<TextureAtlas> > mTextureAtlas;
  /* 0x0628 */ std::unique_ptr<TextureAtlas,std::default_delete<TextureAtlas> > mItemTextureAtlas;
  /* 0x0630 */ std::shared_ptr<RealmsAPI> mRealms;
  /* 0x0640 */ std::unique_ptr<Realms::RealmsServices,std::default_delete<Realms::RealmsServices> > mRealmsServices;
  /* 0x0648 */ std::unique_ptr<ActiveDirectoryIdentity,std::default_delete<ActiveDirectoryIdentity> > mActiveDirectoryIdentity;
  /* 0x0650 */ std::unique_ptr<Social::PresenceManager,std::default_delete<Social::PresenceManager> > mPresenceManager;
  /* 0x0658 */ std::unique_ptr<Automation::AutomationClient,std::default_delete<Automation::AutomationClient> > mAutomationClient;
  /* 0x0660 */ std::unique_ptr<WebSocketCommManager,std::default_delete<WebSocketCommManager> > mWebSocketCommunicatorManager;
  /* 0x0668 */ std::unique_ptr<ServiceClientScheduler,std::default_delete<ServiceClientScheduler> > mServiceClientScheduler;
  /* 0x0670 */ std::set<unsigned char,std::less<unsigned char>,std::allocator<unsigned char> > mSubclientRemovalSet;
  /* 0x0680 */ std::vector<std::pair<void *,std::function<void __cdecl(void)> >,std::allocator<std::pair<void *,std::function<void __cdecl(void)> > > > mSplitScreenChangedCallbacks;
  /* 0x0698 */ std::atomic<enum MinecraftGame::SuspendState> mSuspended;
  /* 0x069c */ bool mRunServerWhileSuspended;
  /* 0x069d */ bool mConnectedToRemoteServer;
  /* 0x06a0 */ ResetCallbackObject* mResetCallbackObj;
  /* 0x06a8 */ std::unique_ptr<PixelCalc,std::default_delete<PixelCalc> > mDpadScale;
  /* 0x06b0 */ mce::UUID mUUID;
  /* 0x06c0 */ MinecraftGame::SkinLoadStatus mCustomSkinShouldBeLoadedNow;
  /* 0x06c8 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mProcessRegistrationKey;
  /* 0x06e8 */ std::shared_ptr<Bedrock::Threading::IAsyncResult<void> > mCheckLoadRendererAssetsCompleteHandle;
  /* 0x06f8 */ std::atomic<bool> mIsFileSystemSpaceTrackingComplete;
  /* 0x06f9 */ std::atomic<bool> mIsLevelInfoRepopulationComplete;
  /* 0x0700 */ const uint64_t MAX_LOCAL_CLIENTS;
  /* 0x0708 */ ServiceReference<IMinecraftEventing> mEventing;
  /* 0x0728 */ bool mNewLevel;
  /* 0x0730 */ std::unique_ptr<LevelLoader,std::default_delete<LevelLoader> > mLevelLoader;
  /* 0x0738 */ std::unique_ptr<ExternalContentManager,std::default_delete<ExternalContentManager> > mContentManager;
  /* 0x0740 */ std::unique_ptr<PackManifestFactory,std::default_delete<PackManifestFactory> > mManifestFactory;
  /* 0x0748 */ std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > > mEndOfLastFrame;
  /* 0x0750 */ unsigned char mUIRenderIterId;
  /* 0x0754 */ uint32_t mUIRenderClientMask;
  /* 0x0758 */ uint32_t mUIRenderIssuedMask;
  /* 0x075c */ bool mTickedLastFrame;
  /* 0x075d */ bool mInitialResourcesLoaded;
  /* 0x075e */ bool mReadyToRender;
  /* 0x075f */ bool mGenerateDocs;
  /* 0x0760 */ bool mLaunchedFromLegacyVersion;
  /* 0x0764 */ uint32_t mLeaveGameProgress;
  /* 0x0768 */ ResourcePacksInfoData mResourcePacksInfoData;
  /* 0x07a0 */ uint64_t mResourcePackTotalDownloadingSize;
  /* 0x07a8 */ std::unordered_set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > mResourcePackDownloadingQueue;
  /* 0x07e8 */ std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned __int64,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned __int64> > > mResourcePackDownloadedData;
  /* 0x0828 */ std::unique_ptr<TrialManager,std::default_delete<TrialManager> > mTrialManager;
  /* 0x0830 */ std::atomic<bool> mIsInGame;
  /* 0x0834 */ std::atomic<enum LocalServerStartupState> mLocalServerStartupState;
  /* 0x0838 */ std::unique_ptr<ResourceLoadManager,std::default_delete<ResourceLoadManager> > mResourceLoadManager;
  /* 0x0840 */ ServiceRegistrationToken<ResourceLoadManager> mResourceLoadManagerServiceRegistrationToken;
  /* 0x0848 */ std::unique_ptr<ActorResourceDefinitionGroup,std::default_delete<ActorResourceDefinitionGroup> > mActorResourceDefinitionGroup;
  /* 0x0850 */ std::shared_ptr<bool> mDeferHandleInvite;
  /* 0x0860 */ bool mInitFinished;
  /* 0x0861 */ bool mHasDestroyedGame;
  /* 0x0862 */ bool mAppWillTerminate;
  /* 0x0863 */ bool mFiredInitialEvents;
  /* 0x0864 */ bool mForceReloadResources;
  /* 0x0868 */ std::unique_ptr<ContentTierManager,std::default_delete<ContentTierManager> > mContentTierManager;
  /* 0x0870 */ std::unique_ptr<PackSourceFactory,std::default_delete<PackSourceFactory> > mPackSourceFactory;
  /* 0x0878 */ std::function<void __cdecl(IClientInstance &)> mLeaveCompleteCallback;
  /* 0x08b8 */ std::function<void __cdecl(std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &)> mTestAutomationCallback;
  /* 0x08f8 */ bool mOptionsSetForAutomation;
  /* 0x08f9 */ bool mRunningInTestCloud;
  /* 0x08fa */ bool mProfilerIsOn;
  /* 0x08fc */ int32_t mScreenShotCount;
  /* 0x0900 */ std::mutex mTextMutex;
  /* 0x0950 */ std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> > > mInputMessages;
  /* 0x0968 */ bool mRealSuspended;
  /* 0x0969 */ bool mIsInTransfer;
  /* 0x096a */ bool mKeepResourceWhenTransfer;
  /* 0x096b */ bool mIsInForceReload;
  /* 0x0970 */ std::unique_ptr<CubemapBackgroundResources,std::default_delete<CubemapBackgroundResources> > mCubemapBackgroundResources;
  /* 0x0978 */ std::unique_ptr<LevelListCache,std::default_delete<LevelListCache> > mLevelListCache;
  /* 0x0980 */ std::unique_ptr<LevelStorageSource,std::default_delete<LevelStorageSource> > mLevelStorageSource;
  /* 0x0988 */ std::shared_ptr<bool> mExistenceTracker;
  /* 0x0998 */ std::unique_ptr<DeferredTasksManager<enum MinecraftGame::DeferredTaskCategory>,std::default_delete<DeferredTasksManager<enum MinecraftGame::DeferredTaskCategory> > > mDeferredTasks;
  /* 0x09a0 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mStorageAreaTaskGroup;
  /* 0x09a8 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mInitializationTaskGroup;
  /* 0x09b0 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mServerInitTaskGroup;
  /* 0x09b8 */ std::shared_ptr<ContentManager> mResourceContentManager;
  /* 0x09c8 */ int32_t mDeferedMaterialReloadRefCnt;
  /* 0x09cc */ bool mPrimaryRenderOptionsChanged;
  /* 0x09cd */ bool mNeedsBadGlobalPacksToast;
  /* 0x09ce */ bool mHasLicence;
  /* 0x09cf */ bool mNewID;
  /* 0x09d0 */ std::unique_ptr<UIEventCoordinator,std::default_delete<UIEventCoordinator> > mUIEventCoordinator;
  /* 0x09d8 */ std::unique_ptr<ClientInstanceEventCoordinator,std::default_delete<ClientInstanceEventCoordinator> > mClientInstanceEventCoordinator;
  /* 0x09e0 */ std::unique_ptr<ServerInstanceEventCoordinator,std::default_delete<ServerInstanceEventCoordinator> > mServerInstanceEventCoordinator;
  /* 0x09e8 */ LoadingScreen mLoadingScreen;
  /* 0x0a38 */ std::array<SerialWorkList,3> mSerialWorkList;
  /* 0x0bb8 */ std::chrono::duration<__int64,std::ratio<1,1000000000> > mLastClientUpdateDuration;
  /* 0x0bc0 */ ScreenshotRecorder mScreenshotRecorder;
  /* 0x0c20 */ std::weak_ptr<ClientBlobCache::Cache> mClientBlobCache;
  /* 0x0c30 */ bool mDisablePauseMenuOnFocusLost;
  /* 0x0c38 */ std::unique_ptr<EDUSystems,std::default_delete<EDUSystems> > mEDUSystems;
  /* 0x0c40 */ std::unique_ptr<RayTracingOptions,std::default_delete<RayTracingOptions> > mRayTracingOptions;
  /* 0x0c48 */ std::unique_ptr<IGameModuleApp,std::default_delete<IGameModuleApp> > mGameModule;
  /* 0x0c50 */ std::unique_ptr<ServerInitData,std::default_delete<ServerInitData> > mServerInitData;
  /* 0x0c58 */ std::shared_ptr<Bedrock::Threading::IAsyncResult<void> > mServerStartHandle;
  /* 0x0c68 */ std::unique_ptr<SerialWorkList,std::default_delete<SerialWorkList> > mSuspendWorkList;
  /* 0x0c70 */ std::unique_ptr<ChunkPerformanceData,std::default_delete<ChunkPerformanceData> > mChunkPerformanceData;
  /* 0x0c78 */ ServiceRegistrationToken<ChunkPerformanceData> mChunkPerformanceDataRegistrationToken;
  /* 0x0c80 */ std::optional<PendingScreenshotRequest> mPendingScreenshotRequest;
  /* 0x0da8 */ bool mAddingUserInProgress;
  /* 0x0da9 */ bool mSplashScreenHidden;
  /* 0x0daa */ bool mInitPrimaryUserComplete;
  /* 0x0db0 */ std::unique_ptr<DynamicPackageControl,std::default_delete<DynamicPackageControl> > mDynamicPackage;
  /* 0x0db8 */ std::vector<Bedrock::PubSub::ScopedSubscription,std::allocator<Bedrock::PubSub::ScopedSubscription> > mPrimaryUserOptionLockSubscriptions;
  /* 0x0dd0 */ std::vector<Bedrock::PubSub::ScopedSubscription,std::allocator<Bedrock::PubSub::ScopedSubscription> > mPrimaryUserOptionObserverSubscriptions;
  /* 0x0de8 */ std::multimap<unsigned char,Bedrock::PubSub::ScopedSubscription,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Bedrock::PubSub::ScopedSubscription> > > mClientOptionLockSubscriptions;
  /* 0x0df8 */ std::multimap<unsigned char,Bedrock::PubSub::ScopedSubscription,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,Bedrock::PubSub::ScopedSubscription> > > mClientOptionObserverSubscriptions;
  static const int32_t PLAY_COUNT_BEFORE_RATINGS_PROMPT;
  static const std::basic_string<char,std::char_traits<char>,std::allocator<char> > WORLD_PATH;
  static const std::basic_string<char,std::char_traits<char>,std::allocator<char> > RESOURCE_PACKS_SAVE_FILENAME;
  static bool _hasInitedStatics;
  
  MinecraftGame(int32_t, char**);
  virtual ~MinecraftGame();
  void stopResourceLoad();
  MusicManager* getMusicManager();
  virtual void audioEngineOn();
  virtual void audioEngineOff();
  bool isWaitingForPresent() const;
  bool isVRMode() const;
  bool isHoloPlatformSessionVisible() const;
  virtual void update();
  void startFrame();
  void updateGraphics(IClientInstance&, const Timer&);
  void updateAudio(IClientInstance&, const Timer&);
  void endFrame();
  void onFrameRendered();
  virtual bool handleBack(bool);
  virtual void play(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Vec3&, float, float);
  virtual void playUI(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float);
  virtual void stopSound(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void stopSounds();
  virtual bool useTouchscreen();
  virtual void setUISizeAndScale(int32_t, int32_t, float);
  virtual void setRenderingSize(int32_t, int32_t);
  virtual void setPlayerName(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getPlayerName();
  virtual bool takeScreenshot(cg::ImageBuffer&);
  virtual void takeScreenshotCallback(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  virtual void shareScreenshot(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  virtual void reportCheat(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  virtual void setIsInTransfer(bool);
  virtual bool getIsInTransfer();
  virtual void setKeepResourceWhenTransfer(bool);
  virtual bool getKeepResourceWhenTransfer();
  virtual void forceReloadResourcePack();
  virtual void setIsInForceReload(bool);
  virtual bool getIsInForceReload();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getLevelStoragePath(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  void resetInputState();
  virtual bool doExtraChecking() const;
  void setSuspendedState(MinecraftGame::SuspendState);
  void cleanReloadMaterials();
  void reloadMaterials();
  bool reloadMaterialsSafely();
  bool reloadAllShaders(bool);
  bool reloadOneShader(std::basic_string<char,std::char_traits<char>,std::allocator<char> >, bool);
  bool hasDestroyedGame() const;
  virtual void setSmoothFontStyle();
  virtual void setUIFontStyle();
  virtual std::shared_ptr<Bedrock::Threading::IAsyncResult<void> > startLocalServerAsync(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const ContentIdentity&, const LevelSettings&, StartIntent, uint16_t, uint16_t);
  virtual bool startLocalServerBlocking(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const ContentIdentity&, const LevelSettings&, StartIntent, uint16_t, uint16_t);
  virtual void createAndUploadWorldToRealm(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const ContentIdentity&, const LevelSettings&, Realms::World, std::function<void __cdecl(void)>);
  bool addPackToSource(PackType, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void reloadAddons(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  void setFocusForbid(bool);
  ScreenController* getControllerByName(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual bool canStartLocalServer() const;
  virtual bool isAudioInitialized() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<SoundEngine> > getSoundEngine() const;
  virtual const TextToSpeechSystem* getTextToSpeechSystem() const;
  virtual TextToSpeechSystem* getTextToSpeechSystem();
  void setTextboxText(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const int32_t);
  void onKeyboardDismissed(const int32_t);
  virtual void onLowMemory();
  virtual void onAppFocusLost();
  virtual void onAppFocusGained();
  virtual void onAppPaused();
  virtual void onAppUnpaused();
  virtual void onAppPreSuspended();
  virtual void onAppSuspended();
  virtual void onAppResumed();
  void waitAsyncSuspendWork();
  void openPauseMenu();
  virtual bool hasNetworkPrivileges(bool);
  virtual void onPlayerLoaded(IClientInstance&, Player&);
  virtual void onDimensionChanged();
  virtual void setDisableInputForAllOtherClients(int32_t, bool);
  virtual void onGameEventNotification(ui::GameEventNotification);
  virtual void playerListChanged();
  virtual void onLevelDestruction(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void setTransferCallback(const std::function<void __cdecl(IClientInstance &)>);
  void setResetCallbackObject(ResetCallbackObject*);
  virtual void requestLeaveGame(bool, bool);
  void preShutDown();
  virtual void startLeaveGame();
  uint32_t continueLeaveGame();
  virtual bool isLeaveGameDone() const;
  virtual void destroyGame();
  virtual void setupCommandParser(IClientInstance&);
  virtual void onClientCreatedLevel(IClientInstance&);
  virtual GameRenderer& getGameRenderer() const;
  virtual PatchNotesManager& getPatchNotesManager() const;
  virtual UIDefRepository& getUIDefRepo() const;
  virtual void joinRealmsGame(const Realms::World&, const Social::GameConnectionInfo&);
  virtual void joinRealmFromInvite(const Social::MultiplayerGameInfo&);
  virtual void joinRealmFromInvite(const Realms::World&);
  virtual void setRealmsLoadingLink(bool);
  void joinRealm(const Realms::World&);
  virtual void joinMultiplayerGame(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Social::MultiplayerServiceIdentifier);
  void returnJoinLobbyResultBasedOnPendingRealmsInvites();
  virtual void joinMultiplayer(Social::GameConnectionInfo, bool, bool);
  virtual bool isLocalPlayer(const ActorUniqueID&) const;
  bool isServerVisible();
  virtual bool hasConnectionToRemoteServer() const;
  virtual void setHasConnectionToRemoteServer(bool);
  virtual void setLeaveGameInProgressAsReadyToContinue();
  bool isPrimaryClientInstanceReady() const;
  virtual const IClientInstance& getPrimaryClientInstance() const;
  virtual IClientInstance& getPrimaryClientInstance();
  const IClientInstance& getClientInstance(unsigned char) const;
  IClientInstance& getClientInstance(unsigned char);
  virtual const std::map<unsigned char,std::shared_ptr<IClientInstance>,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::shared_ptr<IClientInstance> > > >& getClientInstanceMap() const;
  virtual std::shared_ptr<IClientInstance> tryGetClientInstanceFromPlayerUUID(const mce::UUID&) const;
  virtual uint32_t getUIRenderClientMask() const;
  virtual uint64_t getClientInstanceCount() const;
  virtual void forEachClientInstance(std::function<void __cdecl(IClientInstance &)>);
  virtual const LocalPlayer* getPrimaryLocalPlayer() const;
  virtual LocalPlayer* getPrimaryLocalPlayer();
  bool primaryLevelExists() const;
  virtual bool isPrimaryLevelCrossPlatformMultiplayer() const;
  virtual bool isPrimaryLevelMultiplayer() const;
  virtual GuiData& getPrimaryGuiData();
  virtual std::shared_ptr<Options const > getPrimaryUserOptions() const;
  virtual std::shared_ptr<Options> getPrimaryUserOptions();
  virtual bool isPrimaryUserSigninInProgress() const;
  virtual void resetInput();
  bool useController() const;
  virtual const PixelCalc& getDpadScale() const;
  void setKeyboardForcedHeight(float, bool);
  virtual bool canActivateKeyboard();
  virtual void reloadAnimationAndGeometryData(bool);
  virtual GeometryGroup& getGeometryGroup() const;
  virtual std::shared_ptr<ClientBlockPipeline::SchematicsRepository> getSchematicsRepository() const;
  virtual ParticleEffectGroup& getParticleEffectGroup() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<ContentAcquisition> > getContentAcquisition() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<OfferRepository> > getOfferRepository() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<TrialManager> > getTrialManager() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<PersonaService> > getPersonaService() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<ContentCatalogService> > getContentCatalogService() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<StoreCatalogConfig> > getStoreCatalogConfig() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<StoreCatalogRepository> > getStoreCatalog() const;
  virtual ServiceDrivenImageRepository& getServiceImageRepository() const;
  virtual std::shared_ptr<LessonProgressionService> getLessonProgressionService();
  virtual LibraryService& getLibraryService() const;
  virtual LibraryRepository& getLibraryRepository() const;
  virtual ChannelService& getChannelService() const;
  DlcPerformanceTier getDevicePerfTier() const;
  virtual ActorAnimationGroup& getActorAnimationGroup() const;
  virtual ActorAnimationControllerGroup& getActorAnimationControllerGroup() const;
  virtual ThirdPartyServerRepository& getThirdPartyServerRepository() const;
  virtual std::shared_ptr<SkinRepository> getSkinRepository() const;
  virtual PersonaRepository& getPersonaRepository() const;
  virtual WorldTemplateManager& getWorldTemplateManager() const;
  virtual ResourcePackRepository& getResourcePackRepository() const;
  virtual ResourcePackManager& getResourcePackManager() const;
  virtual ResourcePackManager& getServerResourcePackManager();
  virtual PackManifestFactory& getPackManifestFactory();
  virtual const IContentKeyProvider& getKeyProvider() const;
  virtual const IContentAccessibilityProvider& getAccessibilityProvider() const;
  virtual const ContentTierManager& getContentTierManager() const;
  virtual PackSourceFactory& getPackSourceFactory() const;
  virtual std::weak_ptr<ResourcePackFileDownloaderManager> getResourcePackDownloadManager(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  virtual ResourceLoadManager& getResourceLoadManager();
  virtual LevelListCache& getLevelListCache();
  virtual bool hasAllValidCrossPlatformSkin() const;
  virtual bool isMultiplayerServiceManagerReady() const;
  virtual Social::MultiplayerServiceManager& getMultiplayerServiceManager() const;
  virtual Social::InteractivityManager& getInteractivityManager() const;
  virtual bool isMixerInteractiveEnabled();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<Social::IUserManager> > getUserManager() const;
  virtual IMinecraftEventing& getEventing() const;
  ServerNetworkHandler* getServerNetworkHandler();
  virtual ServerInstance* getServerInstance();
  virtual const NetworkHandler& getClientNetworkSystem() const;
  virtual NetworkHandler& getClientNetworkSystem();
  virtual ActiveDirectoryIdentity& getActiveDirectoryIdentity();
  virtual void clearCache();
  virtual void releaseClientSubId(unsigned char);
  void adjustClientsUISizeAndScale(int32_t, int32_t, float);
  void adjustClientsUISizeAndScale();
  void onClientUISizeAndScaleChanged();
  virtual bool isStartingGame() const;
  bool isSplitscreenJoinEnabled() const;
  bool tryGetIdForNewSubClient(int32_t, unsigned char&, const bool) const;
  bool canAddSplitscreenSubClient(int32_t) const;
  virtual void addSubClientInstanceAndAssociateToUser(int32_t);
  virtual ControllerIDtoClientMap& retrieveCIDToClientMap();
  virtual void registerSplitScreenChangedCallback(void*, std::function<void __cdecl(void)>);
  virtual void unregisterSplitScreenChangedCallback(void*);
  virtual float calculateScreenSizeToResolutionScalar() const;
  virtual void setHoloscreenHalfWidth(float);
  virtual float getHoloscreenHalfWidth();
  virtual bool getForceMonoscopic() const;
  virtual bool isReadyToRender() const;
  virtual bool isShowingLoadingScreen() const;
  void handleShowUpsellScreen(bool);
  virtual void registerUpsellScreen();
  virtual SceneFactory& getPrimarySceneFactory() const;
  virtual SceneStack& getMainSceneStack() const;
  virtual hbui::Router& getUIRouter();
  virtual std::weak_ptr<RealmsAPI> getRealms();
  virtual Realms::ContentService& getRealmsContentService();
  virtual ClubsService& getClubsService();
  virtual std::shared_ptr<Realms::GenericRequestServiceHandler> getGenericRealmsService();
  virtual Realms::SubscriptionService& getRealmsSubscriptionService();
  virtual Social::PresenceManager& getPresenceManager();
  virtual Minecraft& getPrimaryMinecraft();
  virtual Automation::AutomationClient& getAutomationClient() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<WebSocketCommManager> > getWebSocketCommManager();
  virtual bool isDedicatedServer() const;
  virtual bool isEduMode() const;
  virtual void onNetworkMaxPlayersChanged(uint32_t);
  virtual IGameModuleApp& getGameModule();
  virtual void setTestExecuteCommandCallback(const std::function<void __cdecl(enum TestCommandType,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &,int)>&);
  virtual void setTestAssetCommandCallback(const std::function<void __cdecl(enum TestAssetCommandType,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &)>&);
  virtual void runTestExecuteCommandCallback(TestCommandType, const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&, int32_t) const;
  virtual void runTestAssetCommandCallback(TestAssetCommandType, const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&) const;
  bool isIPv4Supported() const;
  bool isIPv6Supported() const;
  virtual void processActivationArguments(const Bedrock::ActivationArguments&);
  void setLaunchedForHMD(ARVRPlatform);
  virtual ARVRPlatform getLaunchedForHMDPlatform() const;
  void setLaunchedFromLegacyVersion(bool);
  virtual gsl::not_null<Bedrock::NonOwnerPointer<FileArchiver> > getFileArchiver();
  virtual std::weak_ptr<FileArchiver> getWeakFileArchiver();
  virtual InputMode getCurrentInputMode() const;
  void handleInputPaneHidden();
  gsl::not_null<Bedrock::NonOwnerPointer<LevelLoader> > getLevelLoader();
  virtual ExternalContentManager& getContentManager();
  virtual ContentManager& getResourceContentManager();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getMultiplayerDisabledTextTitle(MultiplayerLockedContext) const;
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getMultiplayerDisabledTextBody(MultiplayerLockedContext) const;
  virtual Level* getLocalServerLevel() const;
  virtual HolosceneRenderer* getHolosceneRenderer() const;
  OculusPlatformMessagePump* getOculusPlatformMessagePump() const;
  virtual ExternalServerFile* getExternalServer() const;
  virtual mce::TextureGroup* getTextures() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas> > getItemTextureAtlas();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas const > > getItemTextureAtlas() const;
  virtual mce::TextureGroup* getStoreCacheTextures() const;
  virtual MinecraftGraphics& getMinecraftGraphics();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas> > getTextureAtlas();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas const > > getTextureAtlas() const;
  virtual UIRepository* getUIRepository() const;
  virtual SeasonsRenderer& getSeasonsRenderer();
  virtual bool isSeasonRendererValid() const;
  bool isRunning() const;
  virtual Core::FilePathManager* getFilePathManager();
  virtual void setUseFontOverrides(bool);
  virtual const FontHandle& getFontHandle() const;
  virtual const FontHandle& getRuneFontHandle() const;
  virtual const FontHandle& getUnicodeFontHandle() const;
  virtual const FontHandle& getSmoothFontHandle() const;
  virtual const FontHandle& getUIFontHandle() const;
  virtual EmoticonManager* getEmoticonManager() const;
  virtual TextToIconMapper* getTextToIconMapper() const;
  virtual bool getMouseGrabbed() const;
  void navigateToPlayScreenFriendsTab();
  virtual bool hasActorResourceDefinitionGroup() const;
  virtual const ActorResourceDefinitionGroup& getActorResourceDefinitionGroup() const;
  virtual ActorResourceDefinitionGroup& getActorResourceDefinitionGroupMutable();
  virtual RenderControllerGroup& getRenderControllerGroup();
  virtual const RenderControllerGroup& getRenderControllerGroup() const;
  virtual const IHummingbirdUI& getHummingbirdUI() const;
  virtual hbui::ResourceRegistry& getHummingbirdResourceRegistry();
  virtual const hbui::DebugData& getHummingbirdDebugData() const;
  virtual void queueScreenshotRequest(ScreenshotOptions&, std::function<void __cdecl(Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &)>);
  virtual Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > requestScreenshot(ScreenshotOptions&);
  virtual void onActiveResourcePacksChanged(ResourcePackManager&);
  virtual void onFullPackStackInvalid();
  virtual void onLanguageSubpacksChanged();
  virtual void onBaseGamePackDownloadComplete();
  void updateFoliageColors();
  virtual void displayActiveDirectoryLoginDialog();
  virtual void handleReloadUIDefinitions();
  virtual void onPushNotificationReceived(const PushNotificationMessage&);
  virtual FlightingService& getFlightingService() const;
  virtual TreatmentPackDownloadMonitor& getTreatmentPackDownloadMonitor() const;
  virtual IEntitlementManager& getEntitlementManager();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<DateManager> > getDateManager() const;
  virtual void grabMouse();
  virtual void releaseMouse();
  virtual void muteAudio();
  virtual void unMuteAudio();
  virtual uint64_t generateClientId(bool, bool&, uint64_t, std::shared_ptr<Social::User>);
  virtual void setResourcePacksInfoData(const ResourcePacksInfoData&);
  virtual ResourcePacksInfoData& getResourcePacksInfoData();
  virtual void handleResourcePackConfirmation(ResourcePackResponse, bool);
  virtual void addDownloadingCachedPack(std::basic_string<char,std::char_traits<char>,std::allocator<char> >, uint64_t);
  virtual void updateDownloadingCachedPack(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint64_t);
  virtual void finishDownloadingCachedPack(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, PackType, const Core::Path&);
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getResourcePackProgress();
  virtual float getResourcePackDownloadingProgress(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual bool isHostingLocalDedicatedServer() const;
  void shutdownServer();
  virtual void pauseContentDownloads();
  virtual void resumeContentDownloads();
  virtual UIMeasureStrategy& getUIMeasureStrategy();
  virtual void copyInternalSettingsFolderToExternalLocation() const;
  virtual void onClientLevelExit(IClientInstance&, uint32_t);
  RakNet::RakNetGUID getServerGUID();
  void setupDocumentation();
  void generateDocumentation();
  virtual bool AllowedToProcedePastStartMenu();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getSunsettingText(bool);
  virtual bool isDeviceSunset();
  virtual bool isDeviceBeingSunset();
  void resetThreadCallbacks();
  virtual bool isInGame() const;
  virtual bool isInRealm() const;
  virtual void fadeOutMusic();
  virtual bool isInitialized() const;
  virtual bool useMinecraftVersionOfXBLUI() const;
  virtual bool isWin10MobileDevice() const;
  virtual void setProfilerIsOn(bool);
  std::function<void __cdecl(std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &)> getFunctionalTestAutomationCallback();
  virtual void setTestAutomationCallback(std::function<void __cdecl(std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const &)>);
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > getDevConsoleLogFileName() const;
  virtual bool getOptionsSetforAutomation() const;
  void setOptionsSetForAutomation(bool);
  bool IsRunningOnTestCloud() const;
  void SetRunningOnTestCloud(bool);
  virtual void onPrimaryUserReconnect(Social::UserPlatformConnectionResult, bool);
  virtual CubemapBackgroundResources& getCubemapBackgroundResources();
  void setAppWillTerminate(bool);
  DeferredTasksManager<enum MinecraftGame::DeferredTaskCategory>& getDeferredTasks();
  virtual void onForceCloudSave();
  virtual void onOptionsLoadBegin();
  virtual void onOptionsLoadComplete();
  virtual bool shouldShowRatingsPrompt() const;
  void setUIEventCoordinator(std::unique_ptr<UIEventCoordinator,std::default_delete<UIEventCoordinator> >&);
  gsl::not_null<Bedrock::NonOwnerPointer<UIEventCoordinator> > getUIEventCoordinator();
  gsl::not_null<Bedrock::NonOwnerPointer<ClientInstanceEventCoordinator> > getClientInstanceEventCoordinator();
  gsl::not_null<Bedrock::NonOwnerPointer<ServerInstanceEventCoordinator> > getServerInstanceEventCoordinator();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<IApp> > getApp();
  virtual bool getSuspended() const;
  virtual bool isSuspending() const;
  bool isModalWorkPending() const;
  uint64_t getModalWorkItemsPending() const;
  uint64_t getModalWorkItemsComplete() const;
  void doPrimaryClientReadyWork(std::function<void __cdecl(void)>);
  void doUserManagerReadyWork(std::function<void __cdecl(void)>);
  virtual ScreenshotRecorder& getScreenshotRecorder();
  virtual std::shared_ptr<ClientBlobCache::Cache> getClientBlobCache();
  virtual const Bedrock::NonOwnerPointer<ContentLogFileEndPoint> getContentFileLogEndPoint() const;
  virtual EDUSystems* getEDUSystems();
  virtual void tryShowXblFirstLaunchScreen(bool);
  virtual void setMusicEnabled(bool);
  virtual bool isMusicEnabled() const;
  virtual void queueCustomMusic(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, MusicRepeatMode);
  virtual void playCustomMusic(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, MusicRepeatMode);
  virtual void setMusicVolumeMultiplier(float);
  virtual void stopCustomMusic(float);
  virtual void setDynamicPackagePath(Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >);
  virtual std::shared_ptr<PerfMetrics::Purtle> getPurtle();
  virtual void onLanguageChanged(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  virtual void onLanguageKeywordsLoadedFromPack(const PackManifest&);
  virtual void onLanguagesLoaded();
  virtual void queueSubclientRemoval(unsigned char);
  virtual void logoffAllSubclients();
  virtual void setIsInGame(bool);
  virtual MinecraftInputHandler* getInput() const;
  void changeAllTextures(ResourcePackManager&);
  virtual void initImpl();
  void _LoadRendererAssets();
  SerialWorkList::WorkResult _initStep1();
  SerialWorkList::WorkResult _initializeFrameBuilder();
  SerialWorkList::WorkResult _initLoadRendererAssets();
  SerialWorkList::WorkResult _waitForLoadRendererAssets();
  SerialWorkList::WorkResult _initUser();
  SerialWorkList::WorkResult _initWaitForPrimaryUser();
  SerialWorkList::WorkResult _initUserComplete();
  SerialWorkList::WorkResult _initLogging();
  SerialWorkList::WorkResult _initDatabase();
  SerialWorkList::WorkResult _initHummingbirdUI(std::shared_ptr<MinecraftGame::InitContext>);
  SerialWorkList::WorkResult _initHummingbirdRendering();
  SerialWorkList::WorkResult _initHummingbirdFonts();
  SerialWorkList::WorkResult _initPacks();
  SerialWorkList::WorkResult _initWaitForSkinRepo();
  SerialWorkList::WorkResult _initNetworkHandler();
  SerialWorkList::WorkResult _initCreatePrimaryClient(std::shared_ptr<MinecraftGame::InitContext>);
  SerialWorkList::WorkResult _initPrimaryClientComplete(std::shared_ptr<MinecraftGame::InitContext>);
  SerialWorkList::WorkResult _initAudio();
  SerialWorkList::WorkResult _waitForAudio();
  SerialWorkList::WorkResult _initTTS();
  SerialWorkList::WorkResult _initWaitForFrameBuilder();
  SerialWorkList::WorkResult _initResourceLoader();
  SerialWorkList::WorkResult _initWaitForResourceRepository();
  SerialWorkList::WorkResult _initStep2();
  SerialWorkList::WorkResult _initRepopulateLevelInfoCacheSync();
  SerialWorkList::WorkResult _initRepopulateLevelInfoCache();
  SerialWorkList::WorkResult _initWaitForPersonaRepo();
  SerialWorkList::WorkResult _initWaitForOfferRepo();
  SerialWorkList::WorkResult _initStep2A();
  SerialWorkList::WorkResult _initMultiplayerMgr();
  SerialWorkList::WorkResult _initEventing();
  SerialWorkList::WorkResult _initStep2B();
  SerialWorkList::WorkResult _initWaitForWorldTemplateManager();
  SerialWorkList::WorkResult _initStep3();
  SerialWorkList::WorkResult _initWaitForContentManager();
  SerialWorkList::WorkResult _initWaitForLocalization();
  SerialWorkList::WorkResult _initWaitForRepopulateLevelInfoCache();
  SerialWorkList::WorkResult _initNotifyOnActiveResourcePacksChanged();
  SerialWorkList::WorkResult _initStep5();
  SerialWorkList::WorkResult _initWaitForPatchNotes();
  SerialWorkList::WorkResult _initWaitForOfferLicense();
  SerialWorkList::WorkResult _initPostA();
  SerialWorkList::WorkResult _loadGlobalResourcePacks();
  SerialWorkList::WorkResult _waitForActorResourceDefinitions();
  SerialWorkList::WorkResult _notifyOnFullVanillaPackOnStack();
  SerialWorkList::WorkResult _initPostB();
  SerialWorkList::WorkResult _initPostFontAsync();
  SerialWorkList::WorkResult _initPostFontBlocking();
  SerialWorkList::WorkResult _initPostC();
  SerialWorkList::WorkResult _initWaitForMainMenuResources();
  SerialWorkList::WorkResult _initIssueHardwareCursorLoad();
  SerialWorkList::WorkResult _initHideSplashScreen();
  SerialWorkList::WorkResult _initUILoadAsyncWait();
  SerialWorkList::WorkResult _initPushAlwaysActiveScreen();
  SerialWorkList::WorkResult _initPostE();
  SerialWorkList::WorkResult _initTestClientInterface();
  SerialWorkList::WorkResult _initFileSystemSpaceTrackingSync();
  SerialWorkList::WorkResult _initFileSystemSpaceTracking();
  SerialWorkList::WorkResult _waitForFileSystemSpaceTracking();
  SerialWorkList::WorkResult _initFinish(std::shared_ptr<MinecraftGame::InitContext>&);
  void _startLocalServer(std::unique_ptr<ServerInitData,std::default_delete<ServerInitData> >, bool, uint16_t, uint16_t);
  void _onInitRemoteSystem(std::function<void __cdecl(void)>);
  void _onStorageDirectoryChanged(const Core::Path&);
  void _beginReloadingResources();
  void _loadLanguageData();
  void _loadInitialPackResources(ResourcePackManager&, bool);
  void _loadAdditionalPackResources(bool);
  void _loadSoundAndMusic();
  void _finishReloadingResources(ResourcePackManager&, bool);
  void _onActiveResourcePacksChanged(ResourcePackManager&, bool);
  void _onTextureAtlasStatus(const TextureAtlasStatus&);
  void _populateParticleComponentRegistry();
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getIpAddressForTelemetry();
  void updateStats();
  bool _shouldInGameLoadResources() const;
  void setupRenderer(HolographicPlatform&);
  void teardownRenderer(bool);
  void _cycleRoundRobinClientSubId();
  void _resetRoundRobinCycle();
  SerialWorkList::WorkResult _initDefaultFonts();
  SerialWorkList::WorkResult _initWaitForDefaultFontsToLoad();
  SerialWorkList::WorkResult _initFontHandles();
  SerialWorkList::WorkResult _initFontMetadata();
  SerialWorkList::WorkResult _initWaitForFontMetadataToLoad();
  SerialWorkList::WorkResult _initUpdateFontsBasedOffOfOverrideEnable();
  void _onPrimaryUserConnectComplete(Social::UserPlatformConnectionResult, bool, bool);
  void _performNetworkReadyActions();
  void _addSubClientInstanceAndAssociateToUserInternal(int32_t, bool);
  void onTick();
  void tickInput();
  virtual void refocusMouse(bool);
  bool currentScreenShouldStealMouse();
  void clearCPUImageCache();
  void _loadLastGlobalResourcePacksFromFile(bool, bool);
  std::unique_ptr<ResourcePackStack,std::default_delete<ResourcePackStack> > _deserializeGlobalResourcePacks();
  void initEventing();
  void setDpadScale(float);
  void handleLicenseChanged();
  virtual void onIdentityGained(const ActiveDirectoryIdentity&);
  virtual void onIdentityLost(const ActiveDirectoryIdentity&);
  void handleInvite(const Social::MultiplayerServiceIdentifier);
  void _registerOnInitUriListeners();
  void _unregisterOnInitUriListeners();
  void initOptionObservers(IClientInstance&);
  void _initPerMachineOptionObservers();
  void _initPerUserOptionObservers(IClientInstance&);
  void _deinitOptionObservers(IClientInstance&);
  void _onTTSOptionChanged();
  void _onSplitScreenChanged();
  void onUserSignin(uint32_t, Social::IdentityType);
  void onUserSignout();
  virtual void trySyncLegacyOffers();
  virtual bool checkForPiracy();
  void _initMinecraftGame();
  void _setDefaultHoloPosition();
  void _buildTreatmentPackStack(bool) const;
  void _addVanillaNeteasePack(ResourcePackStack*) const;
  void _buildClientStartupStack();
  void _buildClientStack(bool);
  void _initPatchNotesManager();
  void _initAppConfigs();
  void _onEntitlementsChanged();
  virtual DevConsoleLogger& getDevConsoleLogger() const;
  void _pushAlwaysActiveScreens();
  Bedrock::NonOwnerPointer<mce::ShaderGroup> _getShaderGroup();
  void _updateProfiler();
  void _removePendingSubclients();
  bool _platformShowsHdrCalibrationScreen();
  gsl::not_null<Bedrock::NonOwnerPointer<LevelStorageSource> > _getLevelStorageSource();
  bool _serverIsActive() const;
  bool _runningServerWhileSuspended() const;
  bool _isSuspended() const;
  void _setSuspendedState(MinecraftGame::SuspendState);
  MinecraftGame::SuspendState _getSuspendState() const;
  bool _topSceneIsLoading();
  void _InitStarted();
  void _InitComplete();
  bool _isWaitingOnADAuthentication() const;
  Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _getSwitchableMaterialList() const;
  void _updatePerformanceTrackers();
  void _fireEventStartClient(uint32_t, IMinecraftEventing&);
  void _onDeviceLostRecovery();
  bool isDeviceLostRenderAssetsNotAvailable();
  void _registerPrimaryUserOptionLock(Option*, std::function<void __cdecl(bool &)>);
  void _registerPrimaryUserOptionObserver(Option*, std::function<void __cdecl(Option const &)>);
  void _registerClientOptionLock(const unsigned char, Option*, std::function<void __cdecl(bool &)>);
  void _registerClientOptionObserver(const unsigned char, Option*, std::function<void __cdecl(Option const &)>);
  void _recomputeResolution();
  void _updateTextureAtlasPBRData(const TextureAtlas&);
  void __PopInputMessage();
  SerialWorkList::WorkResult _onResumeBegin();
  SerialWorkList::WorkResult _onResumeWaitPreviousResourceLoads();
  SerialWorkList::WorkResult _onResumeQueueReloadTextures();
  SerialWorkList::WorkResult _onResumeReloadTextures();
  SerialWorkList::WorkResult _onResumeQueueFontReloadTextures();
  SerialWorkList::WorkResult _onResumeFontReloadTextures();
  SerialWorkList::WorkResult _onResumeRestartServices();
  SerialWorkList::WorkResult _onResumeQueueReloadAnimation();
  SerialWorkList::WorkResult _onResumeWaitReloadAnimation();
  SerialWorkList::WorkResult _onResumeQueueReloadActors();
  SerialWorkList::WorkResult _onResumeWaitReloadActors();
  SerialWorkList::WorkResult _onResumeRNGL();
  SerialWorkList::WorkResult _onResumeFinish();
  SerialWorkList::WorkResult _onDeviceRestoreFinish();
  void _completeServerStartup(std::shared_ptr<MinecraftGame::ServerInitCompleted>);
  void _resetServerPointer();
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};

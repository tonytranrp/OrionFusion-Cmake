
class Minecraft : public IEntityRegistryOwner { /* Size=0xf0 */
  /* 0x0000: fields for IEntityRegistryOwner */
  GameCallbacks &mGameCallbacks;
  IMinecraftEventing &mEventing;
  std::unique_ptr<ResourcePackManager, std::default_delete<ResourcePackManager> > mResourceLoader;
  std::unique_ptr<StructureManager, std::default_delete<StructureManager> > mStructureManager;
  std::shared_ptr<GameModuleServer> mGameModuleServer;
  AllowList &mAllowList;
  PermissionsFile *mPermissionsFile;
  std::unique_ptr<PrivateKeyManager, std::default_delete<PrivateKeyManager> > mServerKeys;
  const std::__cxx11::string mSaveGamePath;
  Bedrock::NotNullNonOwnerPtr<Core::FilePathManager> mFilePathManager;
  ServerMetrics *mServerMetrics;
  bool mCorruptionDetected;
  bool mFireOnLevelCorrupt;
  double mFrameDuration;
  double mLastFrameStart;
  std::chrono::seconds mMaxPlayerIdleTime;
  std::unique_ptr<MinecraftCommands, std::default_delete<MinecraftCommands> > mCommands;
  std::unique_ptr<GameSession, std::default_delete<GameSession> > mGameSession;
  std::unique_ptr<GameTestLevelListener, std::default_delete<GameTestLevelListener> > mGameTestLevelListener;
  std::unique_ptr<MinecraftGameTest, std::default_delete<MinecraftGameTest> > mGameTest;
  Timer &mSimTimer;
  Timer &mRealTimer;
  NetworkHandler &mNetworkHandler;
  PacketSender &mPacketSender;
  IMinecraftApp &mApp;
  SubClientId mClientSubId;
  OwnerPtr<EntityRegistry> mEntityRegistry;
  
  Minecraft(IMinecraftApp&, GameCallbacks&, AllowList&, PermissionsFile*, Core::FilePathManager*, std::chrono::duration<__int64,std::ratio<1,1> >, IMinecraftEventing&, NetworkHandler&, PacketSender&, unsigned char, Timer&, Timer&, const ContentTierManager&, ServerMetrics*, std::unique_ptr<IPackStackStorage,std::default_delete<IPackStackStorage> >);
  virtual ~Minecraft();
  void initAsDedicatedServer();
  void init();
  void initCommands();
  void startLeaveGame(bool);
  bool isLeaveGameDone() const;
  void resetGameSession();
  void clientReset();
  void setGameModeReal(GameType);
  bool update();
  void setSimTimePause(bool);
  void setSimTimeScale(float);
  bool getSimPaused() const;
  Timer& getSimTimer() const;
  double getLastTimestep();
  bool isModded();
  bool isOnlineClient();
  const NetworkStatistics* getNetworkStatistics() const;
  bool hostMultiplayer(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::unique_ptr<Level,std::default_delete<Level> >, Player*, const mce::UUID&, std::unique_ptr<NetEventCallback,std::default_delete<NetEventCallback> >, int32_t, bool, bool, const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&, std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const ConnectionDefinition&, const std::unordered_map<PackIdVersion,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<PackIdVersion>,std::equal_to<PackIdVersion>,std::allocator<std::pair<PackIdVersion const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&, Scheduler&, TextFilteringProcessor*);
  void startClientGame(std::unique_ptr<NetEventCallback,std::default_delete<NetEventCallback> >, bool);
  void joinWorldInProgress(std::unique_ptr<NetEventCallback,std::default_delete<NetEventCallback> >, bool);
  void activateAllowList();
  MinecraftCommands& getCommands();
  bool hasCommands();
  NetEventCallback* getNetEventCallback();
  const ServerLocator& getServerLocator() const;
  ServerLocator& getServerLocator();
  ServerNetworkHandler* getServerNetworkHandler();
  const NetworkHandler& getNetworkHandler() const;
  NetworkHandler& getNetworkHandler();
  ResourcePackManager& getResourceLoader();
  StructureManager& getStructureManager();
  bool usesNonLocalConnection(const NetworkIdentifier&);
  void disconnectClient(const NetworkIdentifier&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  Level* getLevel() const;
  unsigned char getClientSubId() const;
  PermissionsFile* getPermissions() const;
  IMinecraftEventing& getEventing() const;
  void onClientCreatedLevel(std::unique_ptr<Level,std::default_delete<Level> >);
  void setupServerCommands(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  const Timer& getTimer();
  bool isInitialized() const;
  void clearThreadCallbacks();
  void updateScreens();
  virtual OwnerPtrT<EntityRegistryRefTraits>& getEntityRegistry();
  GameModuleServer& getGameModuleServer();
  void tickRealtime(int32_t, int32_t);
  void tickSimtime(int32_t, int32_t);
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};

class Actor : public ActorStatusProvider {
  private:
    EntityContext mEntityContext;
    Actor::InitializationMethod mInitMethod;
    std::__cxx11::string mCustomInitEventName;
    VariantParameterList mInitParams;
    bool mForceInitMethodToSpawnOnReload;
  public:
    bool mAdded;
    ActorDefinitionGroup *mDefinitions;
    std::unique_ptr<ActorDefinitionDescriptor, std::default_delete<ActorDefinitionDescriptor> > mCurrentDescription;
    ActorUniqueID mUniqueID;
    std::shared_ptr<RopeSystem> mLeashRopeSystem;
    int mSendRateCounter;
    std::__cxx11::string mAlias;
    float mSwimPrev;
    ChunkPos mChunkPos;
    Vec3 mRenderPos;
    Vec2 mRenderRot;
    int mLastHurtByPlayerTime;
    SynchedActorDataEntityWrapper mEntityData;
    std::unique_ptr<SpatialActorNetworkData, std::default_delete<SpatialActorNetworkData> > mNetworkData;
    Vec3 mSentDelta;
    bool mSentOnGround;
    float mScale;
    float mScalePrev;
    HashType64 mNameTagHash;
    bool mOnGround;
    bool mWasOnGround;
    bool mHorizontalCollision;
    bool mVerticalCollision;
    bool mCollision;
    bool mIgnoreLighting;
    bool mFilterLighting;
    Color mTintColor;
    Color mTintColor2;
    float mStepSoundVolume;
    float mStepSoundPitch;
    AABB *mLastHitBB;
    std::vector<AABB, std::allocator<AABB> > mSubBBs;
    float mTerrainSurfaceOffset;
    float mHeightOffset;
    float mExplosionOffset;
    float mShadowOffset;
    float mPushthrough;
    float mWalkDistPrev;
    float mWalkDist;
    float mMoveDist;
    float mNextStep;
    bool mImmobile;
    bool mWasInLava;
    bool mWasInWater;
    bool mHasEnteredWater;
    bool mHeadInWater;
    Vec2 mSlideOffset;
    Vec3 mHeadOffset;
    Vec3 mEyeOffset;
    Vec3 mBreathingOffset;
    Vec3 mMouthOffset;
    Vec3 mDropOffset;
    bool mFirstTick;
    int mTickCount;
    int mInvulnerableTime;
    int mLastHealth;
    bool mFallDamageImmune;
    bool mHurtMarked;
    bool mWasHurtLastFrame;
    bool mInvulnerable;
    int mFlameTexFrameIndex;
    float mFlameFrameIncrementTime;
    bool mOnHotBlock;
    bool mAlwaysFireImmune;
    int mPortalCooldown;
    BlockPos mPortalBlockPos;
    int mInsidePortalTime;
    std::vector<ActorUniqueID, std::allocator<ActorUniqueID> > mPassengerIDs;
    std::vector<ActorUniqueID, std::allocator<ActorUniqueID> > mPassengerIDsToRemove;
    ActorUniqueID mRidingID;
    ActorUniqueID mRidingPrevID;
    ActorUniqueID mPushedByID;
    bool mInheritRotationWhenRiding;
    bool mPassengersChanged;
    bool mUsesOneWayCollision;
    bool mForcedLoading;
    bool mTeleportedThisTick;
    bool mForceSendMotionPacket;
    float mSoundVolume;
    int mShakeTime;
    float mWalkAnimSpeedMultiplier;
    float mWalkAnimSpeedO;
    float mWalkAnimSpeed;
    float mWalkAnimPos;
    ActorUniqueID mLegacyUniqueID;
    bool mHighlightedThisFrame;
    bool mInitialized;
    bool mProcessedOnChunkDiscard;
    static uint32_t gServerEntityTickCount[5];
    static uint32_t gClientEntityTickCount[5];
  private:
    BlockSource *mRegion;
    WeakRef<Dimension> mDimension;
    ILevel *mLevel;
    HashedString mActorRendererId;
    ActorCategory mCategories;
    BuiltInActorComponents mBuiltInComponents;
  protected:
    HashedString mActorRendererIdThatAnimationComponentWasInitializedWith;
    bool mChanged;
    bool mRemoved;
    bool mMovedToLimbo;
    bool mMovedToUnloadedChunk;
    bool mBlocksBuilding;
    ActorType mActorType;
    std::unique_ptr<EconomyTradeableComponent, std::default_delete<EconomyTradeableComponent> > mEconomyTradeableComponent;
    std::shared_ptr<AnimationComponent> mAnimationComponent;
    std::shared_ptr<AnimationComponent> mUIAnimationComponent;
    std::unique_ptr<PredictedMovementComponent, std::default_delete<PredictedMovementComponent> > mPredictedMovementComponent;
    ActorUniqueID mTargetId;
    ActorUniqueID mInLovePartner;
    MobEffectInstanceList mMobEffects;
    bool mEffectsDirty;
    bool mLootDropped;
    bool mPersistingTrade;
    std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > mPersistingTradeOffers;
    int mPersistingTradeRiches;
    bool mLoadedFromNBTThisFrame;
    ActorRuntimeID mRuntimeID;
    Color mHurtColor;
    std::unique_ptr<ActorDefinitionDiffList, std::default_delete<ActorDefinitionDiffList> > mDefinitionList;
    std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > mLoadedActorPropertyTag;
    std::unique_ptr<ActorPermutationEventHandler, std::default_delete<ActorPermutationEventHandler> > mActorPermutationEventHandler;
    ActorDefinitionPtr mActorDefinitionPtr;
    bool mIsStuckItem;
    bool mIsSafeToSleepNear;
    int mForceVisibleTimerTicks;
    bool mIsPredictableProjectile;
    std::__cxx11::string mFilteredNameTag;
    ActorTerrainInterlockData mTerrainInterlockData;
    float mArmorDropChance[4];
    float mHandDropChance[2];
    bool mIsKnockedBackOnDeath;
    bool mIsRenderingInUI;
    bool mUpdateEffects;
    ActorUniqueID mLastHurtMobId;
    ActorUniqueID mLastHurtByMobId;
    ActorUniqueID mLastHurtByPlayerId;
    int mLastHurtMobTimestamp;
    int mLastHurtByMobTime;
    int mLastHurtByMobTimestamp;
    float mLastHurt;
    ActorDamageCause mLastHurtCause;
    uint64_t mLastHurtTimestamp;
    PredictedMovementValues mDefaultPredictedMovementValues;
  private:
    static const int DAMAGE_NEARBY_MOBS_DURATION;
    static const int LEASHED_ENTITY_SEARCH_RADIUS;
    static const float DEFAULT_MAX_DISTANCE_OPTIMIZATION;
    static const uint64_t DEFAULT_MAX_TICK_DELAY_OPTIMIZATION;
    std::unique_ptr<SimpleContainer, std::default_delete<SimpleContainer> > mArmor;
    std::unique_ptr<SimpleContainer, std::default_delete<SimpleContainer> > mHand;
    std::vector<AABB, std::allocator<AABB> > mOnewayPhysicsBlocks;
    bool mStuckInCollider;
    bool mPenetratingLastFrame;
    bool mCollidableMobNear;
    bool mCollidableMob;
    bool mCanPickupItems;
    bool mHasSetCanPickupItems;
    bool mChainedDamageEffects;
    bool mWasInWallLastTick;
    int mTicksInWall;
    int mDamageNearbyMobsTick;
    SpawnRuleEnum mSpawnRulesEnum;
    std::unique_ptr<ActionQueue, std::default_delete<ActionQueue> > mActionQueue;
    MolangVariableMap mMolangVariables;
    CompoundTag mCachedComponentData;
    ActorUniqueID mFishingHookID;
    float mCrystalSoundIntensity;
    int mLastCrystalSoundPlayTick;
    int mAffectedByWaterBottleTicksToEffect;

  public:
    Actor(ILevel &, EntityContext &);
    Actor(ActorDefinitionGroup *, const ActorDefinitionIdentifier &, EntityContext &);
    Actor(const Actor &);
    Actor(Actor &&);
    Actor & operator=(const Actor &);
    Actor & operator=(Actor &&);
    bool isPredictableProjectile(void) const;
    virtual EntityContext & getEntity(void);
    virtual const EntityContext & getEntity(void) const;
    const WeakRef<EntityContext> getWeakEntity(void) const;
    static Actor * tryGetFromComponent(ActorOwnerComponent &, bool);
    static const Actor * tryGetFromComponent(const ActorOwnerComponent &, bool);
    static Actor * tryGetFromEntity(EntityContext &, const bool);
    static Actor * tryGetFromEntity(StackRefResult<EntityContext>, const bool);
    void reload(void);
    void initActorProperties(void);
    void sendActorDefinitionEventTriggered(const std::__cxx11::string &);
    bool executeEvent(const std::__cxx11::string &, const VariantParameterList &);
    bool isInitialized(void);
    Actor::InitializationMethod getInitializationMethod(void);
    void serverInitItemStackIds(void);
    virtual Mob * getLastHurtByMob(void);
    virtual void setLastHurtByMob(Mob *);
    virtual Player * getLastHurtByPlayer(void);
    virtual void setLastHurtByPlayer(Player *);
    virtual Mob * getLastHurtMob(void);
    virtual void setLastHurtMob(Actor *);
    int getLastHurtMobTimestamp(void);
    int getLastHurtByMobTime(void);
    int getLastHurtByMobTimestamp(void);
    bool hasBeenHurtByMobInLastTicks(int) const;
    float getLastHurtDamage(void) const;
    ActorDamageCause getLastHurtCause(void) const;
    uint64_t getLastHurtTimestamp(void) const;
    virtual void outOfWorld(void);
    bool isUseNewTradeScreen(void) const;
    bool canSeeDaylight(void) const;
    const Block * getInsideBlock(void) const;
    void setInsideBlock(const Block *);
    const BlockPos & getInsideBlockPos(void) const;
    void setInsideBlockPos(const BlockPos &);
  protected:
    virtual void reloadHardcoded(Actor::InitializationMethod, const VariantParameterList &);
    virtual void reloadHardcodedClient(Actor::InitializationMethod, const VariantParameterList &);
    virtual void initializeComponents(Actor::InitializationMethod, const VariantParameterList &);
    virtual void reloadComponents(Actor::InitializationMethod, const VariantParameterList &);
    virtual void _serverInitItemStackIds(void);
    virtual void _doInitialMove(void);
    bool _isHeadInWater(void) const;
    void _assignActorMovementProxy(gsl::not_null<std::shared_ptr<IActorMovementProxy> >);
  private:
    void _updateComposition(bool);
    void _initAliasProperties(void);
    void _addActorNonBuiltInComponents(void);
    BuiltInActorComponents _addActorBuiltInComponents(void);
  public:
    void initParams(VariantParameterList &);
    void initParams(RenderParams &);
    static float getLiquidFlowStrength(const MaterialType);
    bool wasLastHitByPlayer(void);
    bool hasPrevPosRotBeenSetThisTick(void) const;
    Random & getRandom(void) const;
    void onOnewayCollision(BlockPos);
    void onOnewayCollision(const AABB &);
    static void checkEntityOnewayCollision(BlockSource &, const BlockPos &);
    virtual bool hasComponent(const HashedString &) const;
    void setPrevPosRotSetThisTick(bool);
    virtual ~Actor(void);
    void addDefinitionGroup(const std::__cxx11::string &);
    void removeDefinitionGroup(const std::__cxx11::string &);
    void setBaseDefinition(const ActorDefinitionIdentifier &, bool, bool);
    const ActorDefinitionDiffList * getDiffList(void) const;
    virtual ActorDefinitionDiffList * getDiffListNonConst(void);
    bool hasDefinitionGroup(const std::__cxx11::string &) const;
    void updateDescription(void);
    virtual void resetUserPos(bool);
    void setPersistent(void);
    bool isPersistent(void) const;
    int getOnDeathExperience(void);
    bool getIsExperienceDropEnabled(void) const;
    void setIsExperienceDropEnabled(const bool);
    bool hasType(ActorType) const;
    bool isType(ActorType) const;
    bool hasCategory(ActorCategory) const;
    bool hasFamily(const HashedString &) const;
    void setCategory(const ActorCategory &);
    void addCategory(const ActorCategory &);
    void removeCategory(const ActorCategory &);
    virtual ActorCategory getCategories(void) const;
    virtual BlockSource & getRegion(void) const;
    const BlockSource & getRegionConst(void) const;
    Dimension & getDimension(void) const;
    const Dimension & getDimensionConst(void) const;
    bool isRegionValid(void) const;
    void resetRegion(void);
    virtual DimensionType getDimensionId(void) const;
    bool hasDimension(void) const;
    void setDimension(WeakRef<Dimension>);
    const ActorUniqueID & getUniqueID(void) const;
    ActorRuntimeID getRuntimeID(void) const;
    ActorRuntimeID getVehicleRuntimeID(void) const;
    bool hasUniqueID(void) const;
    bool hasRuntimeID(void) const;
    void setRuntimeID(ActorRuntimeID);
    void setUniqueID(ActorUniqueID);
    void migrateUniqueID(ActorUniqueID);
    int64_t getMetadataId(void) const;
    virtual ActorType getOwnerEntityType(void);
    virtual void setRegion(BlockSource &);
    void setRegionForTest(IBlockSource *);
    void testOnly_updateWaterState(void);
    virtual void resetWaterState(void);
    bool operator==(const Actor &) const;
    bool operator!=(const Actor &) const;
    virtual void remove(void);
    virtual void setPos(const Vec3 &);
    void setPosPrev(const Vec3 &);
    void setPosDelta(const Vec3 &);
    virtual void tryTickPredictedMovementComponent(const std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1, 1000000000> > > &);
    void suspendPredictedMovementComponent(void);
    bool isPredictedMovementEnabled(void) const;
    void addPredictionMoveData(const AddActorPacket &);
    void addPredictionMoveData(const MoveActorAbsoluteData &, const std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1, 1000000000> > > &);
    void addPredictionMotionData(const SetActorMotionPacket &);
    void addPredictionMotionData(const MotionPredictionHintsPacket &);
    void resetAllPredictionHistory(void);
    const PredictedMovementComponent::RuntimePredictionData & getRuntimePredictionData(void) const;
    virtual bool isRuntimePredictedMovementEnabled(void) const;
    virtual const PredictedMovementValues & getPredictedMovementValues(void) const;
    void setPosDirectLegacy(const Vec3 &);
    virtual const AABB & getAABB(void) const;
    const Vec2 & getAABBDim(void) const;
    virtual const Vec3 & getPosition(void) const;
    virtual const Vec3 & getPosPrev(void) const;
    const Vec3 & getPosDelta(void) const;
    virtual Vec3 & getPosDeltaNonConst(void);
    virtual const Vec3 getPosExtrapolated(float) const;
    void setAABBDim(const Vec2 &);
    void setPreviousPosRot(const Vec3 &, const Vec2 &);
    void setColor(PaletteColor);
    virtual PaletteColor getColor(void) const;
    void setColor2(PaletteColor);
    PaletteColor getColor2(void) const;
    void setMovementSoundDistanceOffset(float);
    float getMovementSoundDistanceOffset(void) const;
    void moveBBs(const Vec3 &);
    void setLastHitBB(const Vec3 &, const Vec3 &);
    virtual float getFallDistance(void) const;
    void setFallDistance(float);
    const ModelPartLocator * getLocator(const HashedString &);
    Matrix getActorToWorldTransform(float, bool, const Vec3 &) const;
    virtual Vec3 getAttachPos(ActorLocation, float) const;
    virtual Vec3 getFiringPos(void) const;
    float getRadius(void) const;
    virtual void move(const Vec3 &);
    virtual void move(IActorMovementProxy &, const Vec3 &) const;
    static void _move(IActorMovementProxy &, const Vec3 &);
    void testForEntityStacking(BlockSource &, const AABB &, std::vector<AABB, std::allocator<AABB> > &);
    void testForCollidableMobs(BlockSource &, const AABB &, std::vector<AABB, std::allocator<AABB> > &) const;
    static void testForCollidableMobs(const IActorMovementProxy &, BlockSource &, const AABB &, std::vector<AABB, std::allocator<AABB> > &);
    const Vec2 & getRotation(void) const;
    const Vec2 & getRotationPrev(void) const;
    void setRotationWrapped(const Vec2 &);
    void setRotationDirectly(const Vec2 &);
    void setRotationX(float);
    void setRotationY(float);
    void setRotationPrev(const Vec2 &);
    void setRotationPrevX(float);
    void setRotationPrevY(float);
    Vec3 buildForward(void) const;
    static Vec3 buildForward(const IActorMovementProxy &);
    Vec3 getInterpolatedPosition(float) const;
    virtual Vec3 getInterpolatedRidingPosition(float) const;
    Vec2 getInterpolatedRotation(float) const;
    static Vec2 getInterpolatedRotation(const Vec2 &, const Vec2 &, float);
    virtual float getInterpolatedBodyRot(float) const;
    virtual float getInterpolatedHeadRot(float) const;
    virtual float getInterpolatedBodyYaw(float) const;
    virtual float getYawSpeedInDegreesPerSecond(void) const;
    virtual float getInterpolatedWalkAnimSpeed(float) const;
    virtual Vec3 getInterpolatedRidingOffset(float, const int) const;
    virtual void resetInterpolated(void);
    Vec3 getViewVector(float) const;
    static Vec3 getViewVector(const IActorMovementProxy &, float);
    static Vec3 getViewVector(const Vec2 &, const Vec2 &, float);
    Vec2 getViewVector2(float) const;
    virtual void updateEntityInside(const AABB &);
    virtual void updateEntityInside(void);
    bool isInsideBorderBlock(float) const;
    virtual bool isFireImmune(void) const;
    void setCollidableMobNear(bool);
    bool getCollidableMobNear(void) const;
    void setCollidableMob(bool);
    bool getCollidableMob(void) const;
    virtual bool breaksFallingBlocks(void) const;
    virtual void blockedByShield(const ActorDamageSource &, Actor &);
    virtual bool canDisableShield(void);
    void moveTo(const Vec3 &, const Vec2 &);
    void moveRelative(float, float, float, float);
    static void moveRelative(IActorMovementProxy &, float, float, float, float);
    void setVelocity(const Vec3 &);
    static void _moveRelative(Vec3 &, float, float, float, float, float);
    virtual void teleportTo(const Vec3 &, bool, int, int, bool);
    virtual bool tryTeleportTo(const Vec3 &, bool, bool, int, int);
    void teleportPassengersTo(const Vec3 &, int, int);
    virtual void chorusFruitTeleport(const Vec3 &);
    virtual void lerpMotion(const Vec3 &);
    void lerpTo(const Vec3 &, const Vec2 &, int);
    void lerpTo(const Vec3 &, const Vec2 &, float, int);
    void lerpToRotation(const Vec2 &, int);
    bool isInterpolationActive(void) const;
    void setInterpolation(bool);
    virtual std::unique_ptr<AddActorBasePacket, std::default_delete<AddActorBasePacket> > tryCreateAddActorPacket(void);
    static bool canTick(bool, bool, bool, bool);
    bool tick(BlockSource &);
    virtual void normalTick(void);
    virtual void baseTick(void);
    void tickBlockDamage(void);
    virtual void passengerTick(void);
    void positionAllPassengers(const bool);
    virtual void positionPassenger(Actor &, float);
    virtual Actor * getVehicle(void) const;
    Actor * getVehicleRoot(void) const;
    virtual Actor * getFirstPassenger(void) const;
    float getRidingHeight(void) const;
    virtual bool startRiding(Actor &);
    virtual void addPassenger(Actor &);
    virtual void flagPassengerToRemove(Actor &);
    virtual std::__cxx11::string getExitTip(const std::__cxx11::string &, InputMode) const;
    virtual std::__cxx11::string getEntityLocNameString(void) const;
    void removeAllPassengers(bool, bool);
    void setSeatDescription(const Vec3 &, const SeatDescription &);
    virtual bool intersects(const Vec3 &, const Vec3 &) const;
    bool isFree(const Vec3 &, float);
    static bool isFree(IActorMovementProxy &, const Vec3 &, float);
    virtual bool isInWall(void) const;
    virtual bool isInvisible(void) const;
    virtual bool canShowNameTag(void) const;
    virtual bool canExistInPeaceful(void) const;
    virtual void setNameTagVisible(bool);
    virtual const std::__cxx11::string & getNameTag(void) const;
    virtual HashType64 getNameTagAsHash(void) const;
    virtual std::__cxx11::string getFormattedNameTag(void) const;
    virtual void filterFormattedNameTag(const UIProfanityContext &);
    virtual void setNameTag(const std::__cxx11::string &);
    virtual bool getAlwaysShowNameTag(void) const;
    virtual void setScoreTag(const std::__cxx11::string &);
    virtual const std::__cxx11::string & getScoreTag(void) const;
    void setStrengthMax(int);
    int getStrengthMax(void) const;
    void setStrength(int);
    int getStrength(void) const;
    virtual bool isInWater(void) const;
    virtual bool hasEnteredWater(void) const;
    bool isImmersedInWater(void) const;
    static bool isImmersedInWater(const IActorMovementProxy &);
    virtual bool isInWaterOrRain(void) const;
    virtual bool isInContactWithWater(void) const;
    static bool isInLiquid(const MaterialType, const IConstBlockSource &, const AABB &, const std::vector<AABB, std::allocator<AABB> > &);
    virtual bool isInLava(const IConstBlockSource &) const;
    bool isInLava(void) const;
    static bool isInLava(const IActorMovementProxy &, const IConstBlockSource &);
    static bool isInLava(const IActorMovementProxy &);
    bool hasSubBBIn(const MaterialType) const;
    static bool hasSubBBIn(const IConstBlockSource &, const std::vector<AABB, std::allocator<AABB> > &, const MaterialType);
    bool isInClouds(void) const;
    bool isActorLocationInMaterial(const ActorLocation, const MaterialType) const;
    virtual bool isUnderLiquid(MaterialType) const;
    virtual bool isOverWater(void) const;
    bool onClimbableBlock(void) const;
    static bool onClimbableBlock(const IActorMovementProxy &, const IConstBlockSource &);
    static bool onClimbableBlock(const IActorMovementProxy &);
    bool onHoverableBlock(void) const;
    static bool onHoverableBlock(const IActorMovementProxy &);
    bool inDownwardFlowingLiquid(void) const;
    bool canBeginOrContinueClimbingLadder(void) const;
    static bool canBeginOrContinueClimbingLadder(const IActorMovementProxy &, const IConstBlockSource &);
    static bool canBeginOrContinueClimbingLadder(const IActorMovementProxy &);
    const Vec3 & getBlockMovementSlowdownMultiplier(void) const;
    virtual void setBlockMovementSlowdownMultiplier(const BlockLegacy &, const Vec3 &);
    virtual void resetBlockMovementSlowdownMultiplier(void);
    virtual float getCameraOffset(void) const;
    virtual float getShadowHeightOffs(void);
    virtual float getShadowRadius(void) const;
    virtual Vec3 getHeadLookVector(float) const;
    static Vec3 getHeadLookVector(const IActorMovementProxy &, float);
    float getScaleFactor(float) const;
    virtual bool canSeeInvisible(void) const;
    virtual bool canSee(const Actor &) const;
    virtual bool canSee(const Vec3 &) const;
    virtual bool canInteractWithOtherEntitiesInGame(void) const;
    Vec3 getRandomPointInAABB(Random &);
    virtual bool isSkyLit(float);
    virtual float getBrightness(float) const;
    Vec3 getCenter(float) const;
    bool closerThan(const Actor &, const float) const;
    bool closerThan(const Actor &, const float, const float) const;
    float distanceTo(const Actor &) const;
    float distanceTo(const Vec3 &) const;
    float distanceToSqr(const Vec3 &) const;
    float distanceToSqr(const Actor &) const;
    float distanceSqrToBlockPosCenter(const BlockPos &) const;
    virtual bool interactPreventDefault(void);
    virtual void playerTouch(Player &);
    virtual void onAboveBubbleColumn(const bool);
    virtual void onInsideBubbleColumn(const bool);
    virtual bool isImmobile(void) const;
    static bool isImmobile(const IActorMovementProxy &);
    virtual bool isSilent(void) const;
    virtual bool isSilentObserver(void) const;
    virtual bool isPickable(void);
    virtual bool isFishable(void) const;
    virtual bool isSleeping(void) const;
    virtual void setSleeping(bool);
    virtual bool isShootable(void);
    bool isSneaking(void) const;
    virtual void setSneaking(bool);
    virtual bool isBlocking(void) const;
    virtual bool isDamageBlocked(const ActorDamageSource &) const;
    virtual bool isAlive(void) const;
    virtual bool isOnFire(void) const;
    virtual bool isOnHotBlock(void) const;
    virtual bool isCreativeModeAllowed(void);
    virtual bool isSurfaceMob(void) const;
    virtual bool isTargetable(void) const;
    virtual bool isLocalPlayer(void) const;
    virtual bool isRemotePlayer(void) const;
    virtual bool isPlayer(void) const;
    virtual bool isAffectedByWaterBottle(void) const;
    virtual int getVariant(void) const;
    void setVariant(int);
    int getMarkVariant(void) const;
    void setMarkVariant(int);
    int getSkinID(void) const;
    void setSkinID(int);
    bool getUIRendering(void) const;
    virtual void setUIRendering(bool);
    virtual bool canAttack(Actor *, bool) const;
    Actor * getTarget(void) const;
    ActorUniqueID getTargetId(void) const;
    virtual void setTarget(Actor *);
    virtual bool isValidTarget(Actor *) const;
    virtual bool attack(Actor &, const ActorDamageCause &);
    virtual void performRangedAttack(Actor &, float);
    float calculateAttackDamage(Actor &);
    virtual int getEquipmentCount(void) const;
    void setBlockTarget(const BlockPos &);
    BlockPos getBlockTarget(void) const;
    bool hasTag(const std::__cxx11::string &) const;
    bool hasTags(void) const;
    bool addTag(const std::__cxx11::string &);
    bool removeTag(const std::__cxx11::string &);
    const gsl::span<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, -1> getTags(void) const;
    void deregisterTagsFromLevelCache(void);
    bool isBaby(void) const;
    bool isPacified(void) const;
    bool isPlayingDead(void) const;
    bool isStackable(void) const;
    bool isTame(void) const;
    Mob * getOwner(void) const;
    Player * getPlayerOwner(void) const;
    virtual void setOwner(const ActorUniqueID);
    const ActorUniqueID getOwnerId(void) const;
    bool isSitting(void) const;
    static bool isSitting(const IActorMovementProxy &);
    virtual void setSitting(bool);
    virtual void onTame(void);
    virtual void onFailedTame(void);
    bool isTrusting(void) const;
    bool isLayingDown(void) const;
    void setLayingDown(bool);
    bool isInLove(void) const;
    bool canMate(const Actor &) const;
    bool isBribed(void) const;
    bool isAngry(void) const;
    bool isOutOfControl(void) const;
    bool isSheared(void) const;
    bool isChested(void) const;
    bool isIgnited(void) const;
    bool hasSaddle(void) const;
    void setSaddle(bool);
    bool useSaddle(ItemStackBase &, Player *);
    virtual int getInventorySize(void) const;
    virtual int getEquipSlots(void) const;
    virtual int getChestSlots(void) const;
    bool isTickingEntity(void) const;
    bool hasTickingArea(void) const;
    ITickingArea * getTickingArea(void);
    void updateTickingData(void);
    void transferTickingArea(Dimension &);
    bool isDancing(void) const;
    void setDancing(bool);
    bool isInScaffolding(void) const;
    static bool isInScaffolding(const IActorMovementProxy &);
    bool isOverScaffolding(void) const;
    bool canAscendCurrentBlockByJumping(void) const;
    bool canDescendBlockBelowByCrouching(void) const;
    bool isCharged(void) const;
    void setCharged(bool);
    bool isPowered(void) const;
    void setPowered(bool);
    void setTempted(bool);
    bool getTempted(void) const;
    void setTradeInterest(bool);
    bool getTradeInterest(void) const;
    bool isClimbing(void) const;
    static bool isClimbing(const IActorMovementProxy &);
    void setClimbing(bool);
    bool canClimb(void) const;
    static bool canClimb(const IActorMovementProxy &);
    void setCanClimb(bool);
    bool isWalker(void) const;
    void setWalker(bool);
    bool isSwimmer(void) const;
    bool isSwimming(void) const;
    void setSwimmer(bool);
    bool isDoorBreaker(void) const;
    void setDoorBreaker(bool);
    bool isDoorOpener(void) const;
    void setDoorOpener(bool);
    bool isBreakingObstruction(void) const;
    void setBreakingObstruction(bool);
    float getSwimAmount(float) const;
    float getCurrentSwimAmount(void) const;
    bool canCurrentlySwim(void) const;
    bool canFly(void) const;
    void setCanFly(bool);
    void setMoving(bool);
    bool isMoving(void) const;
    bool isResting(void) const;
    void setResting(bool);
    bool isStanding(void) const;
    static bool isStanding(const IActorMovementProxy &);
    virtual void setStanding(bool);
    bool isDead(void) const;
    void setDead(bool);
    bool isWASDControlled(void) const;
    void setWASDControlled(bool);
    bool isDelayedAttacking(void) const;
    void setDelayedAttacking(bool);
    virtual bool canPowerJump(void) const;
    virtual void setCanPowerJump(bool);
    virtual bool isJumping(void) const;
    virtual bool isEnchanted(void) const;
    void setEnchanted(bool);
    bool isSoulSpeedEnchantActive(void) const;
    int getJumpDuration(void) const;
    void setJumpDuration(int);
    virtual void vehicleLanded(const Vec3 &, const Vec3 &);
    int getControllingSeat(void) const;
    void setControllingSeat(int);
    virtual bool shouldRender(void) const;
    LevelSoundEvent getAmbientSoundEvent(void) const;
    virtual void playAmbientSound(void);
    virtual LevelSoundEvent getAmbientSound(void) const;
    virtual bool hurt(const ActorDamageSource &, float, bool, bool);
    virtual bool isInvulnerableTo(const ActorDamageSource &) const;
    virtual ActorDamageCause getBlockDamageCause(const Block &) const;
    virtual void animateHurt(void);
    virtual bool doFireHurt(int);
    virtual void onLightningHit(void);
    virtual void onBounceStarted(const BlockPos &, const Block &);
    virtual void feed(int);
    void spawnEatParticles(const ItemStack &, int);
    virtual void handleEntityEvent(ActorEvent, int);
    virtual float getPickRadius(void);
    virtual const HashedString & getActorRendererId(void) const;
    void setActorRendererId(HashedString);
    void consumeItem(ItemActor &, int);
    void pickUpItem(ItemActor &);
    void pickUpItem(ItemActor &, int);
    virtual ItemActor * spawnAtLocation(int, int);
    virtual ItemActor * spawnAtLocation(int, int, float);
    virtual ItemActor * spawnAtLocation(const Block &, int);
    virtual ItemActor * spawnAtLocation(const Block &, int, float);
    virtual ItemActor * spawnAtLocation(const ItemStack &, float);
    virtual void despawn(void);
    virtual void killed(Actor &);
    virtual void awardKillScore(Actor &, int);
    void celebrateHunt(int, bool);
    virtual void setArmor(ArmorSlot, const ItemStack &);
    virtual const ItemStack & getArmor(ArmorSlot) const;
    virtual std::vector<ItemStack const*, std::allocator<ItemStack const*> > getAllArmor(void) const;
    void setArmorContainer(std::unique_ptr<SimpleContainer, std::default_delete<SimpleContainer> >);
    SimpleContainer & getArmorContainer(void);
    const SimpleContainer & getArmorContainer(void) const;
    virtual ArmorMaterialType getArmorMaterialTypeInSlot(ArmorSlot) const;
    virtual ArmorTextureType getArmorMaterialTextureTypeInSlot(ArmorSlot) const;
    virtual float getArmorColorInSlot(ArmorSlot, int) const;
    virtual const ItemStack & getEquippedSlot(EquipmentSlot) const;
    virtual void setEquippedSlot(EquipmentSlot, const ItemStack &);
    const std::vector<ItemDescriptor, std::allocator<ItemDescriptor> > * tryGetEquippableSlotAllowedItems(int) const;
    void setEquipFromPacket(const UpdateEquipPacket &);
    UpdateEquipPacket createUpdateEquipPacket(int);
    SimpleContainer & getHandContainer(void);
    const SimpleContainer & getHandContainer(void) const;
    virtual void setCarriedItem(const ItemStack &);
    virtual const ItemStack & getCarriedItem(void) const;
    virtual void setOffhandSlot(const ItemStack &);
    const ItemStack & getOffhandSlot(void) const;
    bool hasPriorityAmmunition(void) const;
    bool hasTotemEquipped(void) const;
    virtual const ItemStack & getEquippedTotem(void) const;
    virtual bool consumeTotem(void);
    EquipmentSlot getEquipmentSlotForItem(const ItemStack &) const;
    const ItemStack & getCarriedItemInSlotPreferredBy(const ItemStack &) const;
    virtual bool save(CompoundTag &) const;
    std::unique_ptr<ListTag, std::default_delete<ListTag> > saveLinks(void) const;
    ActorLink::List getLinks(void) const;
    virtual void saveWithoutId(CompoundTag &) const;
    virtual bool load(const CompoundTag &, DataLoadHelper &);
    virtual void loadLinks(const CompoundTag &, ActorLink::List &, DataLoadHelper &);
    void saveEntityFlags(CompoundTag &) const;
    void loadEntityFlags(const CompoundTag &, DataLoadHelper &);
    void setChanged(void);
    const SynchedActorDataEntityWrapper & getEntityData(void) const;
    virtual SynchedActorDataEntityWrapper & getEntityData(void);
    virtual ActorType getEntityTypeId(void) const;
    virtual const ActorDefinitionIdentifier & getActorIdentifier(void) const;
    void _setActorTypeId(ActorType);
    const SpatialActorNetworkData & getSpatialNetworkData(void) const;
    SpatialActorNetworkData & getSpatialNetworkData(void);
    virtual const HashedString & queryEntityRenderer(void) const;
    virtual ActorUniqueID getSourceUniqueID(void) const;
    void onAffectedByWaterBottle(void);
    virtual void thawFreezeEffect(void);
    virtual bool canFreeze(void) const;
    virtual const bool isWearingLeatherArmor(void) const;
    virtual AABB getLiquidAABB(const MaterialType) const;
    static AABB getLiquidAABB(const IActorMovementProxy &, const MaterialType);
    static AABB getLiquidAABB(const AABB &, const MaterialType);
    virtual void handleInsidePortal(const BlockPos &);
    virtual int getPortalCooldown(void) const;
    virtual int getPortalWaitTime(void) const;
    virtual bool canChangeDimensionsUsingPortal(void) const;
    virtual void changeDimension(DimensionType);
    virtual void changeDimension(const ChangeDimensionPacket &);
    virtual ActorUniqueID getControllingPlayer(void) const;
    virtual bool isControlledByLocalInstance(void) const;
    virtual void checkFallDamage(float, bool);
    virtual void causeFallDamage(float, float, ActorDamageSource);
    virtual void handleFallDistanceOnServer(float, float, bool);
    virtual bool getStatusFlag(ActorFlags) const;
    static bool getStatusFlag(const SynchedActorData &, ActorFlags);
    virtual void setStatusFlag(ActorFlags, bool);
    static void setStatusFlag(SynchedActorData &, ActorFlags, bool);
    bool isDebugging(void) const;
    void playSound(LevelSoundEvent, const Vec3 &, const Block &);
    virtual void playSound(LevelSoundEvent, const Vec3 &, int);
    void playSound(LevelSoundEvent, const Vec3 &, const float, const float);
    virtual void playSynchronizedSound(LevelSoundEvent, const Vec3 &, const Block &, bool);
    virtual void playSynchronizedSound(LevelSoundEvent, const Vec3 &, int, bool);
    bool isFlagChanged(ActorFlags, int64_t, int64_t);
    virtual void onSynchedFlagUpdate(int, int64_t, int64_t);
    virtual void onSynchedDataUpdate(int);
    bool isRiding(void) const;
    bool isRiding(Actor *) const;
    bool hasPassenger(void) const;
    bool hasPlayerPassenger(void) const;
    virtual bool canAddPassenger(Actor &) const;
    bool isPassenger(const Actor &) const;
    bool isPassenger(const ActorUniqueID &) const;
    int getPassengerIndex(const Actor &) const;
    bool getFirstAvailableSeatPos(Actor &, Vec3 &) const;
    int getShakeTime(void) const;
    void setShakeTime(int);
    bool wasLoadedFromNBTThisFrame(void) const;
    virtual bool canPickupItem(const ItemStack &) const;
    bool getCanPickupItems(void) const;
    bool hasFishingHook(void) const;
    FishingHook * fetchFishingHook(void);
    void clearFishingHookID(void);
    void setFishingHookID(ActorUniqueID);
    bool pullInEntity(Actor &);
    virtual bool canBePulledIntoVehicle(void) const;
    bool isLeashed(void) const;
    virtual bool inCaravan(void) const;
    ActorUniqueID getLeashHolder(void) const;
    ActorUniqueID getRenderLeashHolder(void);
    void setLeashHolder(ActorUniqueID);
    void dropLeash(bool, bool);
    virtual bool isLeashableType(void);
    virtual void tickLeash(void);
    void forEachLeashedActor(std::function<void (gsl::not_null<Actor *>)>);
    int getAirSupply(void) const;
    int getTotalAirSupply(void) const;
    virtual void sendMotionPacketIfNeeded(void);
    void sendMotionToServer(void);
    bool isRemoved(void) const;
    virtual bool canSynchronizeNewEntity(void) const;
    virtual bool isGlobal(void) const;
    void setGlobal(bool);
    bool isAutonomous(void) const;
    void setAutonomous(bool);
    bool isMovedToLimbo(void) const;
    void setMovedToLimbo(bool);
    bool isMovedToUnloadedChunk(void) const;
    void setMovedToUnloadedChunk(bool);
    virtual void stopRiding(bool, bool, bool);
    virtual void startSwimming(void);
    virtual void stopSwimming(void);
    void setScared(bool);
    bool isScared(void) const;
    virtual void buildDebugInfo(std::__cxx11::string &) const;
    void buildDebugGroupInfo(std::__cxx11::string &) const;
    void exitVehicle(const Actor &, VehicleUtils::ExitPatternStrategy);
    virtual CommandPermissionLevel getCommandPermissionLevel(void) const;
    void _setLevelPtr(Level *);
    ILevel * _getLevelPtr(void) const;
    virtual Level & getLevel(void);
    virtual const Level & getLevel(void) const;
    bool hasLevel(void) const;
    virtual bool isClientSide(void) const;
    virtual StackRefResult<EntityRegistry> getEntityRegistry(void);
    uint64_t getLevelTimeStamp(void) const;
    const Color & getHurtColor(void) const;
    gsl::not_null<BaseAttributeMap*> getAttributes(void);
    gsl::not_null<BaseAttributeMap const*> getAttributes(void) const;
    virtual AttributeInstance * getMutableAttribute(const Attribute &);
    virtual const AttributeInstance & getAttribute(const Attribute &) const;
    bool hasAttributeBuff(AttributeBuffType) const;
    void _sendDirtyActorData(void);
    virtual int getDeathTime(void) const;
    int getHealth(void) const;
    int getMaxHealth(void) const;
    void serializationSetHealth(int);
    virtual void heal(int);
    void healEffects(int);
    virtual bool isInvertedHealAndHarm(void) const;
    void addEffect(const MobEffectInstance &);
    void removeEffect(int);
    void removeAllEffects(void);
    void removeEffectNoUpdate(int);
    int getActiveEffectCount(void) const;
    static int getActiveEffectCount(const MobEffectInstanceList &);
    virtual bool canBeAffected(MobEffectId) const;
    virtual bool canBeAffectedByArrow(const MobEffectInstance &) const;
    bool hasEffect(const MobEffect &) const;
    const MobEffectInstance * getEffect(const MobEffect &) const;
    static const MobEffectInstance * getEffect(const MobEffectInstanceList &, const MobEffect &);
    bool hasAnyVisibleEffects(void) const;
    bool hasAnyEffects(void) const;
    const MobEffectInstanceList & getAllEffects(void) const;
    virtual void onEffectAdded(MobEffectInstance &);
    virtual void onEffectUpdated(MobEffectInstance &);
    virtual void onEffectRemoved(MobEffectInstance &);
    void setInvisible(bool);
    void setStunned(bool);
    void updateInvisibilityStatus(void);
    void removeEffectParticles(void);
    bool canReceiveMobEffectsFromGameplay(void) const;
    virtual bool canObstructSpawningAndBlockPlacement(void) const;
    void setObstructsBlockPlacement(bool);
    EconomyTradeableComponent * getEconomyTradeableComponent(void) const;
    void updateAnimationComponentOnServer(void);
    void resetClientAnimations(void);
    virtual AnimationComponent & getAnimationComponent(void);
    bool hasPersistingTrade(void) const;
    std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > getPersistingTradeOffers(void);
    int getPersistingTradeRiches(void);
    void savePersistingTrade(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> >, int);
    void removePersistingTrade(void);
    void createBehaviorComponent(void);
    bool canOpenContainer(Player &) const;
    virtual void openContainerComponent(Player &);
    virtual void swing(void);
    virtual void useItem(ItemStackBase &, ItemUseMethod, bool);
    virtual bool hasOutputSignal(FacingID) const;
    virtual int getOutputSignal(void) const;
    virtual void getDebugText(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &);
    void doEnchantDamageEffects(Mob &, Mob &);
    virtual float getMapDecorationRotation(void) const;
    virtual float getPassengerYRotation(const Actor &) const;
    float getYHeadRot(void) const;
    void setYHeadRot(float);
    void setYHeadRotations(float, float);
    InterpolationPair getYHeadRotationsNewOld(void) const;
    float getYHeadRotO(void) const;
    void setYHeadRotO(float);
    virtual bool isWorldBuilder(void) const;
    virtual bool isCreative(void) const;
    virtual bool isAdventure(void) const;
    virtual bool isSurvival(void) const;
    virtual bool isSpectator(void) const;
    virtual bool isAttackableGamemode(void) const;
    void dropTowards(const ItemStack &, Vec3);
    virtual bool add(ItemStack &);
    virtual bool drop(const ItemStack &, const bool);
    const ActorUniqueID & lovePartnerId(void) const;
    void setInLove(Actor *);
    Vec3 calcCenterPos(void) const;
    void burn(int, bool);
    virtual bool getInteraction(Player &, ActorInteraction &, const Vec3 &);
    virtual bool canDestroyBlock(const Block &) const;
    virtual void setAuxValue(int);
    void setChainedDamageEffects(bool);
    bool getChainedDamageEffects(void) const;
    virtual void setSize(float, float);
    float getSpeedInMetersPerSecond(void) const;
    float getVerticalSpeedInMetersPerSecond(void) const;
    MerchantRecipeList * getTradeOffers(void);
    std::__cxx11::string getTradeableComponentDisplayName(void) const;
    void setOffersFromPacket(const UpdateTradePacket &);
    UpdateTradePacket createUpdateTradePacket(int);
    void setTradingPlayer(Player *);
    Player * getTradingPlayer(void) const;
    bool isTrading(void) const;
    void updateBBFromDefinition(void);
    void queueBBUpdateFromValue(const Vec2 &);
    void queueBBUpdateFromDefinition(void);
    void pushBackActionEventToActionQueue(ActionEvent);
    bool getNextActionEvent(ActionEvent &);
    void clearActionQueue(void);
    bool isActionQueueEmpty(void) const;
    void setLimitedLifetimeTicks(int);
    int getLimitedLifetimeTicks(void) const;
    bool hasTeleported(void) const;
    bool _isValidBlockToTeleportOnto(const Block &, bool) const;
    bool isOrphan(void) const;
    bool shouldOrphan(BlockSource &);
    virtual void onOrphan(void);
    void setStructuralIntegrity(int);
    int getStructuralIntegrity(void) const;
    void setHurtTime(int);
    int getHurtTime(void) const;
    void setHurtDir(int);
    int getHurtDir(void) const;
    virtual void wobble(void);
    virtual bool wasHurt(void);
    bool damageSensorComponentHurt(float &, const ActorDamageSource &, bool);
    bool isInsidePortal(void) const;
    bool isSafeToSleepNear(void) const;
    virtual void startSpinAttack(void);
    virtual void stopSpinAttack(void);
    virtual void spinAttack(void);
    virtual void setDamageNearbyMobs(bool);
    bool getDamageNearbyMobs(void) const;
    virtual void renderDebugServerState(const Options &);
    ActorTerrainInterlockData & getEntityTerrainInterlockData(void);
    virtual void reloadLootTable(void);
    virtual void reloadLootTable(const EquipmentTableDefinition &);
    virtual float getDeletionDelayTimeSeconds(void) const;
    virtual void kill(void);
    virtual void die(const ActorDamageSource &);
    virtual bool shouldDropDeathLoot(void) const;
    virtual bool shouldTick(void) const;
    DistanceSortedActorList fetchNearbyActorsSorted(const Vec3 &, ActorType);
    DistanceSortedActorList fetchNearbyAttackableActorsSorted(const Vec3 &, ActorType);
    MolangVariableMap & getMolangVariables(void);
    void updateMolangVariables(RenderParams &);
    void cacheComponentData(void);
    void refreshComponents(void);
    bool isInPrecipitation(void) const;
    bool isInRain(void) const;
    bool isInSnow(void) const;
    bool isInThunderstorm(void) const;
    static BlockPos getBlockPosCurrentlyStandingOn(const Vec3 &, AABB, const IConstBlockSource &, optional_ref<GetCollisionShapeInterface const>);
    static BlockPos getBlockPosCurrentlyStandingOn(const IActorMovementProxy &, const IActorMovementProxy *);
    BlockPos getBlockPosCurrentlyStandingOn(const Actor *) const;
    bool isTouchingDamageBlock(void) const;
    bool shouldUpdateEffects(void) const;
    void setUpdateEffects(bool);
    RenderParams & getRenderParams(void);
    bool isInWorld(void) const;
    gsl::not_null<std::shared_ptr<IActorMovementProxy const> > getMovementProxy(void) const;
    gsl::not_null<std::shared_ptr<IActorMovementProxy> > getMovementProxy(void);
    void extractSnapshot(PlayerSnapshotComponent &) const;
    virtual void applySnapshot(const EntityContext &, const EntityContext &);
    void setAABB(const AABB &);
    virtual float getNextStep(const float);
    bool isAliasActor(void) const;
    std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > getAliasList(void) const;
    const std::__cxx11::string & getAliasId(void) const;
    virtual LootTable * getLootTable(void);
    virtual void interpolatorTick(void);
    bool testOnly_GetIsStuckInCollider(void) const;
    void testOnly_SetIsStuckInCollider(bool);
    bool testOnly_GetWasPenetratingLastFrame(void) const;
    void testOnly_SetWasPenetratingLastFrame(bool);
    bool testOnly_GetIsStuckItem(void) const;
    void testOnly_SetIsStuckItem(bool);
    bool testOnly_GetCollidableMobNear(void) const;
    void testOnly_SetCollidableMobNear(bool);
    bool testOnly_shouldProvideFeedbackOnHandContainerItemSet(HandSlot, const ItemStack &) const;
    bool testOnly_shouldProvideFeedbackOnArmorSet(ArmorSlot, const ItemStack &) const;
    const std::vector<AABB, std::allocator<AABB> > & getOnewayPhysicsBlocks(void) const;
    virtual float evaluateSeatRotation(const RideableComponent &);
    virtual void checkInsideCauldron(void);
    DynamicProperties & getOrAddDynamicProperties(void);
    virtual void onPush(Actor &);
    virtual std::optional<BlockPos> getLastDeathPos(void) const;
    virtual std::optional<AutomaticID<Dimension, int> > getLastDeathDimension(void) const;
    virtual bool hasDiedBefore(void) const;
    virtual void tryDoWaterSplashEffect(void);
    virtual void tryPostSplashGameEvent(void);
    virtual void doWaterSplashEffect(void);
    virtual void postSplashGameEvent(void);
    float getMaxAutoStep(void) const;
  protected:
    void _initializeMaxAutoStep(float);
    void _setHandContainerItem(const ItemStack &, HandSlot);
    const ItemStack & _getHandContainerItem(const HandSlot) const;
    virtual bool _shouldProvideFeedbackOnHandContainerItemSet(HandSlot, const ItemStack &) const;
    virtual bool _shouldProvideFeedbackOnArmorSet(ArmorSlot, const ItemStack &) const;
    void _setHandContainer(std::unique_ptr<SimpleContainer, std::default_delete<SimpleContainer> >);
    void _setArmorContainer(std::unique_ptr<SimpleContainer, std::default_delete<SimpleContainer> >);
    virtual void updateEntitySpecificMolangVariables(RenderParams &);
    virtual bool shouldTryMakeStepSound(void);
    virtual bool canMakeStepSound(void) const;
    void _playMovementSound(bool);
    const ItemActor * _drop(const ItemStack &, const bool);
    virtual bool _hurt(const ActorDamageSource &, float, bool, bool);
    virtual void markHurt(void);
    virtual AnimationComponent & _getAnimationComponent(std::shared_ptr<AnimationComponent> &, AnimationComponentGroupType);
    virtual void readAdditionalSaveData(const CompoundTag &, DataLoadHelper &);
    virtual void addAdditionalSaveData(CompoundTag &) const;
    virtual void _playStepSound(const BlockPos &, const Block &);
    virtual void _playFlySound(const BlockPos &, const Block &);
    virtual bool _makeFlySound(void) const;
    virtual void checkInsideBlocks(float);
    virtual void pushOutOfBlocks(const Vec3 &);
    bool updateWaterState(void);
    virtual void spawnTrailBubbles(void);
    virtual void updateInsideBlock(void);
    void _setDimensionTransitionComponent(DimensionType, DimensionType, int);
    void enableAutoSendPosRot(bool);
    bool isAutoSendEnabled(void) const;
    virtual void _removePassenger(const ActorUniqueID &, bool, bool, bool);
    const PredictedMovementComponent & _getPredictedMovementComponent(void) const;
    PredictedMovementComponent & _getPredictedMovementComponentNonConst(void);
    void _setHeightOffset(const float);
    void _refreshAABB(void);
    void _setPos(const Vec3 &);
    void _setPosPrev(const Vec3 &);
    static const Block & getBlockWhenClimbing(const IActorMovementProxy &);
    static const Block & getBlockWhenClimbing(const IActorMovementProxy &, const IConstBlockSource &);
    Mob * _updateMobId(ActorUniqueID &);
  private:
    void _convertOldSave(const CompoundTag &);
    void _updateOwnerChunk(void);
    void _simulateBeginManagePassengers(void);
    void _removePassengersWithoutSeatSystem(void);
    void _removeAllPassengersSystems(void);
    void _managePassengersServerSide(bool);
    void _managePassengersClientSide(void);
    void _managePassengers(BlockSource &);
    void _sendLinkPacket(const ActorLink &) const;
    void _initializeLeashRopeSystem(Actor *);
    void _setupServerAnimationComponent(void);
    void _setupTagsComponent(void);
    void _defaultInitEquipmentDropChances(void);
    bool _reloadComponentItem(ItemStack &);
    void _updateOnewayCollisions(BlockSource &);
    virtual void _onSizeUpdated(void);
    void _damageNearbyMobs(void);
    virtual void _doAutoAttackOnTouch(Actor &);
    void _onVibrationDetected(void);
    void _serializeComponents(CompoundTag &) const;
    void _tryPlantWitherRose(void);
    static bool _containsSneakCollisionShapes(IActorMovementProxy &, const IConstBlockSource &, const AABB &, std::vector<AABB, std::allocator<AABB> > &);
    void _moveHitboxTo(const Vec3 &);
    bool _determineCanPickupItems(void) const;
    void _triggerWrappedNormalTick(void);
    static void _persistentComponentAssert(bool);
    bool _isItemStackNetManagerEnabled(void) const;
  public:
    GameEventListenerComponent * tryGetComponent<GameEventListenerComponent>(void);
    PropertyComponent * tryGetComponent<PropertyComponent>(void);
    const PropertyComponent * tryGetComponent<PropertyComponent>(void) const;
    void addOrRemoveComponent<FlagComponent<HasLightweightFamilyFlag> >(bool);
    HomeComponent * tryGetComponent<HomeComponent>(void);
    const HomeComponent * tryGetComponent<HomeComponent>(void) const;
    HitboxComponent * tryGetComponent<HitboxComponent>(void);
    ScaleByAgeComponent * tryGetComponent<ScaleByAgeComponent>(void);
    BlockPosTrackerComponent * tryGetComponent<BlockPosTrackerComponent>(void);
    TagsComponent<IDType<LevelTagSetIDType> > * tryGetComponent<TagsComponent<IDType<LevelTagSetIDType> > >(void);
    const TagsComponent<IDType<LevelTagSetIDType> > * tryGetComponent<TagsComponent<IDType<LevelTagSetIDType> > >(void) const;
    BreathableComponent * tryGetComponent<BreathableComponent>(void);
    const BreathableComponent * tryGetComponent<BreathableComponent>(void) const;
    ContainerComponent * tryGetComponent<ContainerComponent>(void);
    const ContainerComponent * tryGetComponent<ContainerComponent>(void) const;
    const AdmireItemComponent * tryGetComponent<AdmireItemComponent>(void) const;
    const ProjectileComponent * tryGetComponent<ProjectileComponent>(void) const;
    ProjectileComponent * tryGetComponent<ProjectileComponent>(void);
    const ActorFlagComponent<PersistentFlag> * tryGetComponent<ActorFlagComponent<PersistentFlag> >(void) const;
    ExperienceRewardComponent * tryGetComponent<ExperienceRewardComponent>(void);
    const ExperienceRewardComponent * tryGetComponent<ExperienceRewardComponent>(void) const;
    MovementInterpolatorComponent * tryGetComponent<MovementInterpolatorComponent>(void);
    bool hasComponent<ProjectileComponent>(void) const;
    gsl::not_null<BlockMovementSlowdownMultiplierComponent*> getPersistentComponent<BlockMovementSlowdownMultiplierComponent>(void);
    gsl::not_null<BlockMovementSlowdownMultiplierComponent const*> getPersistentComponent<BlockMovementSlowdownMultiplierComponent>(void) const;
    bool hasComponent<FlagComponent<PrevPosRotSetThisTickFlag> >(void) const;
    void addOrRemoveComponent<FlagComponent<PrevPosRotSetThisTickFlag> >(bool);
    const ActorHeadRotationComponent * tryGetComponent<ActorHeadRotationComponent>(void) const;
    ActorHeadRotationComponent * tryGetComponent<ActorHeadRotationComponent>(void);
    DwellerComponent * tryGetComponent<DwellerComponent>(void);
    const DwellerComponent * tryGetComponent<DwellerComponent>(void) const;
    BossComponent * tryGetComponent<BossComponent>(void);
    DamageSensorComponent * tryGetComponent<DamageSensorComponent>(void);
    TickWorldComponent * tryGetComponent<TickWorldComponent>(void);
    const TickWorldComponent * tryGetComponent<TickWorldComponent>(void) const;
    gsl::not_null<CurrentSwimAmountComponent*> getPersistentComponent<CurrentSwimAmountComponent>(void);
    gsl::not_null<CurrentSwimAmountComponent const*> getPersistentComponent<CurrentSwimAmountComponent>(void) const;
    bool hasComponent<TickWorldComponent>(void) const;
    bool hasComponent<RideableComponent>(void) const;
    RideableComponent * tryGetComponent<RideableComponent>(void);
    const RideableComponent * tryGetComponent<RideableComponent>(void) const;
    const NpcComponent * tryGetComponent<NpcComponent>(void) const;
    NpcComponent * tryGetComponent<NpcComponent>(void);
    ReplayStateComponent * tryGetComponent<ReplayStateComponent>(void);
    BoostableComponent * tryGetComponent<BoostableComponent>(void);
    const LegacyTradeableComponent * tryGetComponent<LegacyTradeableComponent>(void) const;
    LegacyTradeableComponent * tryGetComponent<LegacyTradeableComponent>(void);
    bool hasComponent<FlagComponent<ActorTickedFlag> >(void) const;
    PostTickPositionDeltaComponent * tryGetComponent<PostTickPositionDeltaComponent>(void);
    gsl::not_null<FallDistanceComponent*> getPersistentComponent<FallDistanceComponent>(void);
    gsl::not_null<FallDistanceComponent const*> getPersistentComponent<FallDistanceComponent>(void) const;
    const BreedableComponent * tryGetComponent<BreedableComponent>(void) const;
    const EquippableComponent * tryGetComponent<EquippableComponent>(void) const;
    EquippableComponent * tryGetComponent<EquippableComponent>(void);
    bool hasComponent<FlagComponent<RemotePlayerComponentFlag> >(void) const;
    const MovementInterpolatorComponent * tryGetComponent<MovementInterpolatorComponent const>(void) const;
    const ExplodeComponent * tryGetComponent<ExplodeComponent>(void) const;
    const AgeableComponent * tryGetComponent<AgeableComponent>(void) const;
    const TrustComponent * tryGetComponent<TrustComponent>(void) const;
    const BribeableComponent * tryGetComponent<BribeableComponent>(void) const;
    const DamageOverTimeComponent * tryGetComponent<DamageOverTimeComponent>(void) const;
    const MountTamingComponent * tryGetComponent<MountTamingComponent>(void) const;
    const DryingOutTimerComponent * tryGetComponent<DryingOutTimerComponent>(void) const;
    const TimerComponent * tryGetComponent<TimerComponent>(void) const;
    const CommandBlockComponent * tryGetComponent<CommandBlockComponent>(void) const;
    CommandBlockComponent * tryGetComponent<CommandBlockComponent>(void);
    const SpawnActorComponent * tryGetComponent<SpawnActorComponent>(void) const;
    const BalloonComponent * tryGetComponent<BalloonComponent>(void) const;
    const InsomniaComponent * tryGetComponent<InsomniaComponent>(void) const;
    const GeneticsComponent * tryGetComponent<GeneticsComponent>(void) const;
    const TradeResupplyComponent * tryGetComponent<TradeResupplyComponent>(void) const;
    const FogCommandComponent * tryGetComponent<FogCommandComponent>(void) const;
    FogCommandComponent * tryGetComponent<FogCommandComponent>(void);
    const DynamicPropertiesComponent * tryGetComponent<DynamicPropertiesComponent>(void) const;
    const FreezingComponent * tryGetComponent<FreezingComponent>(void) const;
    FreezingComponent * tryGetComponent<FreezingComponent>(void);
    const WardenSpawnTrackerComponent * tryGetComponent<WardenSpawnTrackerComponent>(void) const;
    WardenSpawnTrackerComponent * tryGetComponent<WardenSpawnTrackerComponent>(void);
    const AngerLevelComponent * tryGetComponent<AngerLevelComponent>(void) const;
    const VibrationListenerComponent * tryGetComponent<VibrationListenerComponent>(void) const;
    const MobEffectComponent * tryGetComponent<MobEffectComponent>(void) const;
    const DimensionTransitionComponent * tryGetComponent<DimensionTransitionComponent>(void) const;
    DimensionTransitionComponent * tryGetComponent<DimensionTransitionComponent>(void);
    const AreaAttackComponent * tryGetComponent<AreaAttackComponent>(void) const;
    void addOrRemoveComponent<FlagComponent<GlobalActorFlag> >(bool);
    void addOrRemoveComponent<FlagComponent<AutonomousActorFlag> >(bool);
    bool hasComponent<WardenSpawnTrackerComponent>(void) const;
    DespawnComponent * tryGetComponent<DespawnComponent>(void);
    InstantDespawnComponent * tryGetComponent<InstantDespawnComponent>(void);
    CelebrateHuntComponent * tryGetComponent<CelebrateHuntComponent>(void);
    bool hasComponent<OnFireComponent>(void) const;
    BuoyancyComponent * tryGetComponent<BuoyancyComponent>(void);
    LeashableComponent * tryGetComponent<LeashableComponent>(void);
    gsl::not_null<InsideBlockComponent const*> getPersistentComponent<InsideBlockComponent>(void) const;
    gsl::not_null<InsideBlockComponent*> getPersistentComponent<InsideBlockComponent>(void);
    gsl::not_null<MaxAutoStepComponent const*> getPersistentComponent<MaxAutoStepComponent>(void) const;
    gsl::not_null<MaxAutoStepComponent*> getPersistentComponent<MaxAutoStepComponent>(void);
    UserEntityIdentifierComponent * tryGetComponent<UserEntityIdentifierComponent>(void);
    IllagerBeastBlockedComponent * tryGetComponent<IllagerBeastBlockedComponent>(void);
    TameableComponent * tryGetComponent<TameableComponent>(void);
    const PhysicsComponent * tryGetComponent<PhysicsComponent>(void) const;
}


class Font { /* Size=0x278 */
  /* 0x0008 */ int32_t mFontTexture;
  /* 0x000c */ bool mAutoResetFormat;
  /* 0x000d */ bool mUseCache;
  /* 0x000e */ bool mRenderUnicodeSmooth;
  /* 0x000f */ bool mAlwaysUnicode;
  /* 0x0010 */ mce::Color mCurrentColor;
  /* 0x0020 */ mce::Color mCaretColor;
  /* 0x0030 */ bool mItalic;
  /* 0x0031 */ bool mBold;
  /* 0x0032 */ bool mStrikethrough;
  /* 0x0033 */ bool mUnderlined;
  /* 0x0034 */ bool mObfuscated;
  /* 0x0038 */ mce::MaterialPtr mFontMat;
  /* 0x0048 */ mce::Color mColors[32];
  /* 0x0248 */ mce::TextureGroup& mTextures;
  /* 0x0250 */ std::map<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,mce::Color,float>,std::vector<Font::TextObject,std::allocator<Font::TextObject> >,std::less<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,mce::Color,float> >,std::allocator<std::pair<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,mce::Color,float> const ,std::vector<Font::TextObject,std::allocator<Font::TextObject> > > > > mStringCache;
  /* 0x0260 */ int32_t mObfuscatedIndex;
  /* 0x0264 */ float mObfuscatedTextTime;
  /* 0x0268 */ Vec2 mCaretRenderPosition;
  /* 0x0270 */ Vec2 mCaretRenderSize;
  static bool bLockUnicodeModle;
  static const int32_t COLOR_TAG;
  static const int32_t DEFAULT_FONT_HEIGHT;
  static const int32_t NBSP;
  static const int32_t SPACE;
  static const int32_t NULL_CHAR;
  static const int32_t UNICODE_REPLACEMENT_CHARACTER_CODE;
  static const int32_t MAX_OBFUSCATED_CACHE_COUNT;
  static const float OBFUSCATED_TIME_SWITCH;
  static const int32_t DEFAULT_WRAP_HEIGHT;
  static const int32_t PRIVATE_USE_AREA_BEGIN;
  static const int32_t PRIVATE_USE_AREA_END;
  static const Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > NOT_FOUND_PAGE;
  static const int32_t GLYPHS_PER_PAGE;
  static const int32_t UNICODE_COUNT;
  static const std::vector<int,std::allocator<int> > ASCII_CHAR_INDICES;
  
  Font(const Font&);
  Font(mce::TextureGroup&);
  virtual ~Font();
  virtual float getCharWidth(int32_t);
  virtual void switchFontsource(const Core::Path&, const Core::Path&);
  virtual std::pair<Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &> getFontSources() const;
  void resetFontData(bool);
  virtual void fetchPage(int32_t);
  void setCaretColor(const mce::Color&);
  void draw(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, const mce::Color&, const glm::tvec2<float,0>&, bool, mce::MaterialPtr*, int32_t, float);
  void drawShadow(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, const mce::Color&, const glm::tvec2<float,0>&, bool, mce::MaterialPtr*, float);
  int32_t drawWordWrap(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, float, const mce::Color&, float, const mce::Color&, const glm::tvec2<float,0>&, bool, bool, bool, mce::MaterialPtr*);
  int32_t drawWordWrapMaxLine(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, float, const mce::Color&, int32_t, float, const mce::Color&, const glm::tvec2<float,0>&, bool, bool, bool, mce::MaterialPtr*);
  void drawTransformed(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, float, float, bool, float, const bool, const mce::Color&, const glm::tvec2<float,0>&);
  virtual Font::SheetId getSheet(int32_t, int32_t&, bool);
  Font::SheetId getSheet(int32_t, bool);
  bool supportsString(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual bool supportsChar(const int32_t&);
  virtual bool _supportsShadowInSingleDraw();
  virtual int32_t getLineLength(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, bool);
  int32_t getTextHeight(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float);
  int32_t getTextHeight(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t, float, bool);
  virtual float getWrapHeight() const;
  virtual float getScaleFactor() const;
  float getBaseFontHeight() const;
  virtual Vec2 getTranslationFactor() const;
  virtual bool isScreenPixelAligned() const;
  virtual bool materialCanBeOverridden() const;
  virtual void uploadTextureToGPU();
  virtual void setTextConstantsInScreenContext(ScreenContext&, const Font::SheetId&, float, const mce::Color&, bool) const;
  virtual float _getCharWidth(int32_t, bool);
  virtual bool _isIconPage(const Font::SheetId&) const;
  virtual mce::Font::Type getType(const Font::SheetId&) const;
  virtual std::optional<mce::Font::RenderingParameters> tryGetRenderingParameters(const ScreenContext&, const Font::SheetId&, float, const mce::Color&, bool, const mce::Color&, const glm::tvec2<float,0>&) const;
  void clearCache();
  virtual void drawCached(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, const mce::Color&, const glm::tvec2<float,0>&, bool, bool, mce::MaterialPtr*, int32_t, bool, float, const mce::Color&);
  void drawWithColorResetOverride(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, const mce::Color&, const mce::Color&, const glm::tvec2<float,0>&, bool, mce::MaterialPtr*, int32_t, float);
  virtual void onAppSuspended();
  virtual void onDeviceLost();
  std::vector<ResourceLocation,std::allocator<ResourceLocation> > getReloadFontTextures() const;
  virtual void reloadFontTextures(ResourceLoadManager&, bool);
  virtual bool isReloadingTextures();
  virtual void unloadTextures();
  int32_t processLinesInBox(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, uint32_t, bool, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,unsigned int &)>);
  void tickObfuscatedTextIndex(float);
  virtual void _scanUnicodeCharacterSize(int32_t, const Font::SheetId&, bool);
  virtual bool isSheetMatch(const Font::SheetId&) const;
  int32_t _drawWordWrap(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, float, const mce::Color&, uint32_t, float, const mce::Color&, const glm::tvec2<float,0>&, bool, bool, bool, mce::MaterialPtr*);
  int32_t _processHeightWrap(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, float, uint32_t, bool, bool, float, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,unsigned int &)>);
  void _drawTextSegment(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, bool, bool, bool, const mce::Color&, const glm::tvec2<float,0>&, mce::MaterialPtr*);
  void _draw(ScreenContext&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float, const mce::Color&, bool, bool, const mce::Color&, const glm::tvec2<float,0>&, mce::MaterialPtr*, int32_t, bool, float, const mce::Color&);
  virtual bool _containsWideChar(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  bool _containsUnicodeChar(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  int32_t _findNextWordPosition(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint64_t, char, uint64_t&, uint64_t&);
  bool _willTextFitOnNextLine(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool, float);
  int32_t _getStringChopAmount(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool, float);
  bool _chopString(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float&, uint32_t&, float, bool, bool, float, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,unsigned int &)>);
  float _getLineOffsetMargin(float);
  bool _containsObfuscatedFormatting(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual float _buildChar(std::vector<Font::GlyphQuad,std::allocator<Font::GlyphQuad> >&, int32_t, const mce::Color&, bool, float, float, bool);
  virtual ResourceLocation _getFontSheetLocation(const Font::SheetId&, bool) const;
  virtual const mce::MaterialPtr& getMaterial(const Font::SheetId&, bool) const;
  virtual void flushQueuedImageUploads();
  void notifyStringChange(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const mce::Color&, float);
  void resetFormat(const mce::Color&);
  bool hasFormattingCodes(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  const Vec2& getCaretRenderPosition() const;
  const Vec2& getCaretRenderSize() const;
  virtual void onLanguageChanged(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void calculateTextWidths(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::vector<int,std::allocator<int> >&);
  const std::vector<ResourceLocation,std::allocator<ResourceLocation> >& getGlyphLocations() const;
  virtual void loadFontData(bool);
  virtual int32_t _getReplacementCharacter();
  bool _isUnicodeChar(const int32_t) const;
  bool _isSpace(const int32_t) const;
  void _calculateColors();
  Font::TextObject _makeTextObject(Tessellator&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const mce::Color&, bool, int32_t, bool, float, bool, const mce::Color&, const mce::Color&, const glm::tvec2<float,0>&);
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
  
  static std::basic_string<char,std::char_traits<char>,std::allocator<char> > getFormattingCodes(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
};


class ScreenController : public IScreenController { /* Size=0x918 */
  /* 0x0000: fields for IScreenController */
  /* 0x0008 */ std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag const &)> mControlCreateCallback;
  /* 0x0048 */ std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &)> mControlDestroyCallback;
  /* 0x0088 */ std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &)> mControlDestroyAllCallback;
  /* 0x00c8 */ std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &)> mScreenViewSendManualInputEventCallback;
  /* 0x0108 */ std::unique_ptr<ScreenControllerProxy,std::default_delete<ScreenControllerProxy> > mProxy;
  /* 0x0110 */ bool mCreateInitialized;
  /* 0x0111 */ bool mInitialized;
  /* 0x0118 */ ScreenViewCommand mScreenViewCommand;
  /* 0x0518 */ std::unordered_map<std::tuple<unsigned int,enum ButtonState>,std::vector<std::tuple<enum ScreenController::PreviousButtonStateRequirement,std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)> >,std::allocator<std::tuple<enum ScreenController::PreviousButtonStateRequirement,std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)> > > >,ScreenController::ButtonEventCallbackKeyHasher,std::equal_to<std::tuple<unsigned int,enum ButtonState> >,std::allocator<std::pair<std::tuple<unsigned int,enum ButtonState> const ,std::vector<std::tuple<enum ScreenController::PreviousButtonStateRequirement,std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)> >,std::allocator<std::tuple<enum ScreenController::PreviousButtonStateRequirement,std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)> > > > > > > mButtonEventCallbackMap;
  /* 0x0558 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)> > > > > > mButtonInteractedEventCallbackMap;
  /* 0x0598 */ std::function<enum ui::ViewRequest __cdecl(RawInputScreenEventData &)> mRawInputEventHandlerCallback;
  /* 0x05d8 */ std::vector<std::function<enum ui::ViewRequest __cdecl(FocusMoveScreenEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(FocusMoveScreenEventData &)> > > mFocusMoveEventCallbacks;
  /* 0x05f0 */ std::vector<std::function<enum ui::ViewRequest __cdecl(InputModeChangeScreenEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(InputModeChangeScreenEventData &)> > > mInputModeChangedEventCallbacks;
  /* 0x0608 */ std::vector<std::function<enum ui::ViewRequest __cdecl(HoloInputModeChangeScreenEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(HoloInputModeChangeScreenEventData &)> > > mHoloInputModeChangedEventCallbacks;
  /* 0x0620 */ std::vector<std::function<enum ui::ViewRequest __cdecl(PointerHeldScreenEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(PointerHeldScreenEventData &)> > > mPointerHeldEventCallbacks;
  /* 0x0638 */ std::unordered_map<unsigned int,std::vector<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)> >,std::allocator<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)> > > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)> >,std::allocator<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)> > > > > > > mTextEditEventCallbackMap;
  /* 0x0678 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(ToggleChangeEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(ToggleChangeEventData &)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(ToggleChangeEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(ToggleChangeEventData &)> > > > > > mToggleChangeEventCallbackMap;
  /* 0x06b8 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(TextEditSelectedStateChangeEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(TextEditSelectedStateChangeEventData &)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(TextEditSelectedStateChangeEventData &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(TextEditSelectedStateChangeEventData &)> > > > > > mTextEditSelectedStateChangeEventCallbackMap;
  /* 0x06f8 */ std::vector<std::shared_ptr<ScreenController>,std::allocator<std::shared_ptr<ScreenController> > > mSubControllers;
  /* 0x0710 */ std::unordered_map<unsigned int,std::vector<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(int,float)> >,std::allocator<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(int,float)> > > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(int,float)> >,std::allocator<std::tuple<bool,std::function<enum ui::ViewRequest __cdecl(int,float)> > > > > > > mSliderChangeEventCallbackMap;
  /* 0x0750 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(void)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(void)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(void)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(void)> > > > > > mAnimationEventCallbackMap;
  /* 0x0790 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(int,int,UIPropertyBag &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(int,int,UIPropertyBag &)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(int,int,UIPropertyBag &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(int,int,UIPropertyBag &)> > > > > > mClippedCollectionEventCallbackMap;
  /* 0x07d0 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(bool,UIPropertyBag &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(bool,UIPropertyBag &)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(bool,UIPropertyBag &)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(bool,UIPropertyBag &)> > > > > > mClipStateChangeEventCallbackMap;
  /* 0x0810 */ std::unordered_map<unsigned int,std::vector<std::function<enum ui::ViewRequest __cdecl(void)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(void)> > >,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<std::function<enum ui::ViewRequest __cdecl(void)>,std::allocator<std::function<enum ui::ViewRequest __cdecl(void)> > > > > > mCustomRendererEventHandlerCallbackMap;
  /* 0x0850 */ std::unordered_map<unsigned int,std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)> > > > mBindCallbacks;
  /* 0x0890 */ std::unordered_map<unsigned int,std::function<void __cdecl(int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::function<void __cdecl(int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)> > > > mCollectionBindCallbacks;
  /* 0x08d0 */ std::unordered_map<unsigned int,std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<std::pair<unsigned int const ,std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)> > > > mAnyCollectionBindCallbacks;
  /* 0x0910 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mTaskGroup;
  static const int32_t AnyButtonId;
  
  ScreenController(bool);
  virtual ~ScreenController();
  virtual ui::DirtyFlag tick();
  virtual ui::ViewRequest handleEvent(ScreenEvent&);
  virtual std::optional<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > getRoute() const;
  virtual void setScreenState(const std::vector<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&);
  virtual void onOpen();
  virtual void queueTitleNarration();
  virtual void onTerminate();
  virtual void onInit();
  virtual void onDelete();
  virtual bool canExit();
  virtual ui::ViewRequest tryExit();
  virtual bool areControllerTabsEnabled();
  virtual void onCreation();
  virtual void logCreationTime(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, double, double, unsigned char);
  virtual void onLeave();
  virtual void leaveScreen(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  bool hasFinishedAsyncTasks() const;
  virtual ui::DirtyFlag handleGameEventNotification(ui::GameEventNotification);
  virtual bool bind(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, UIPropertyBag&);
  virtual bool bind(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint32_t, int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, UIPropertyBag&);
  virtual void handleLicenseChanged();
  virtual void onDictationEvent(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void setAssociatedBlockPos(const BlockPos&);
  virtual void setAssociatedEntityUniqueID(const ActorUniqueID);
  virtual void setSuspendInput(bool);
  virtual float getCallbackInterval() const;
  void setViewCommand(const ScreenViewCommand&);
  virtual void onRender();
  virtual void addStaticScreenVars(Json::Value&);
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getAdditionalScreenInfo() const;
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getTelemetryOverride() const;
  virtual void addEventProperties(std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&) const;
  virtual ui::SceneType getSceneType() const;
  virtual int32_t getScreenVersion() const;
  virtual uint32_t getSceneId() const;
  virtual bool screenHandlesGamepadMenuButton() const;
  virtual ScreenControllerProxy* getProxy();
  virtual void onEntered();
  virtual uint32_t getNameId(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  void registerButtonInteractedHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>);
  void registerButtonPressedHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>);
  void registerButtonReleasedHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>);
  void registerButtonEventHandler(const std::vector<unsigned int,std::allocator<unsigned int> >&, ButtonState, ScreenController::PreviousButtonStateRequirement, std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>);
  void registerButtonEventHandler(const uint32_t, ButtonState, ButtonState, std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>);
  void registerButtonEventHandler(const uint32_t, ButtonState, ScreenController::PreviousButtonStateRequirement, std::function<enum ui::ViewRequest __cdecl(UIPropertyBag *)>);
  void registerRawInputEventHandler(std::function<enum ui::ViewRequest __cdecl(RawInputScreenEventData &)>);
  void registerFocusMovedEventHandler(std::function<enum ui::ViewRequest __cdecl(FocusMoveScreenEventData &)>);
  void registerInputModechangedEventHandler(std::function<enum ui::ViewRequest __cdecl(InputModeChangeScreenEventData &)>);
  void registerHoloInputModeChangedEventHandler(std::function<enum ui::ViewRequest __cdecl(HoloInputModeChangeScreenEventData &)>);
  void registerPointerHeldEventHandler(std::function<enum ui::ViewRequest __cdecl(PointerHeldScreenEventData &)>);
  void registerTextEventHandler(std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)>);
  void registerTextEditChangedEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)>);
  void registerTextEditFinishedEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(TextEditScreenEventData &,int)>);
  void registerToggleChangeEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(ToggleChangeEventData &)>);
  void registerTextEditSelectedStateChangeEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(TextEditSelectedStateChangeEventData &)>);
  void registerSliderChangedEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(int,float)>);
  void registerSliderFinishedEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(int,float)>);
  void registerAnimationEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(void)>);
  void registerClippedCollectionEventHandler(const StringHash&, std::function<enum ui::ViewRequest __cdecl(int,int,UIPropertyBag &)>);
  void registerClipStateChangeEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(bool,UIPropertyBag &)>);
  void registerCustomRendererEventHandler(const uint32_t, std::function<enum ui::ViewRequest __cdecl(void)>);
  void bindString(const StringHash&, const std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(void)>&, const std::function<bool __cdecl(void)>&);
  void bindBool(const StringHash&, const std::function<bool __cdecl(void)>&, const std::function<bool __cdecl(void)>&);
  void bindInt(const StringHash&, const std::function<int __cdecl(void)>&, const std::function<bool __cdecl(void)>&);
  void bindFloat(const StringHash&, const std::function<float __cdecl(void)>&, const std::function<bool __cdecl(void)>&);
  void bindGridSize(const StringHash&, const std::function<glm::vec<2,int,0> __cdecl(void)>&, const std::function<bool __cdecl(void)>&);
  void bindForGlobalGridSize(const StringHash&, const std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>&, const std::function<bool __cdecl(void)>&);
  void bindColor(const StringHash&, const std::function<mce::Color __cdecl(void)>&, const std::function<bool __cdecl(void)>&);
  void bindColorWithPropertyBag(const StringHash&, const std::function<mce::Color __cdecl(UIPropertyBag &)>&, const std::function<bool __cdecl(void)>&);
  void bindStringForCollection(const StringHash&, const StringHash&, const std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(int)>&, const std::function<bool __cdecl(int)>&);
  void bindBoolForCollection(const StringHash&, const StringHash&, const std::function<bool __cdecl(int)>&, const std::function<bool __cdecl(int)>&);
  void bindFloatForCollection(const StringHash&, const StringHash&, const std::function<float __cdecl(int)>&, const std::function<bool __cdecl(int)>&);
  void bindIntForCollection(const StringHash&, const StringHash&, const std::function<int __cdecl(int)>&, const std::function<bool __cdecl(int)>&);
  void bindColorForCollection(const StringHash&, const StringHash&, const std::function<mce::Color __cdecl(int)>&, const std::function<bool __cdecl(int)>&);
  void bindStringForAnyCollection(const StringHash&, const std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&);
  void bindBoolForAnyCollection(const StringHash&, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&);
  void bindIntForAnyCollection(const StringHash&, const std::function<int __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&);
  void bindFloatForAnyCollection(const StringHash&, const std::function<float __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&);
  void bindForAnyCollection(const StringHash&, const std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&);
  void bindForAnyCollection(const StringHash&, const std::function<void __cdecl(int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>, const std::function<bool __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,int)>&);
  void bindForGlobal(const StringHash&, std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>);
  void bindForCollection(const StringHash&, const StringHash&, const std::function<void __cdecl(int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag &)>);
  void setControlFactoryCreateCallback(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,UIPropertyBag const &)>);
  void setControlFactoryDestroyCallback(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &)>);
  void setControlFactoryDestroyAllCallback(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &)>);
  void setScreenViewSendManualInputEventCallback(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &)>);
  void queueAsyncTask(std::function<TaskResult __cdecl(void)>&, std::function<void __cdecl(void)>&);
  virtual bool _doesScreenHaveExitBehavior() const;
  uint32_t _getNameId(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  void _registerSubController(std::shared_ptr<ScreenController>);
  ui::ViewRequest _handleEvent(ScreenEvent&);
  ui::ViewRequest _handleButtonEvent(ScreenEvent&);
  ui::ViewRequest _handleFocusMoveEvent(FocusMoveScreenEventData&);
  ui::ViewRequest _handleInputModeChangedEvent(InputModeChangeScreenEventData&);
  ui::ViewRequest _handleHoloInputModeChangedEvent(HoloInputModeChangeScreenEventData&);
  ui::ViewRequest _handlePointerHeldEvent(PointerHeldScreenEventData&);
  ui::ViewRequest _handleTextEditEvent(TextEditScreenEventData&);
  ui::ViewRequest _handleToggleChangeEvent(ToggleChangeEventData&);
  ui::ViewRequest _handleTextEditSelectedStateChangeEvent(TextEditSelectedStateChangeEventData&);
  ui::ViewRequest _handleSliderChangeEvent(SliderChangeEventData&);
  ui::ViewRequest _handleRawInputEvent(RawInputScreenEventData&);
  ui::ViewRequest _handleAnimationEvent(AnimationEventData&);
  ui::ViewRequest _handleClippedCollectionEvent(ClippedCollectionEventData&);
  ui::ViewRequest _handleClipStateChangeEvent(ClipStateChangeEventData&);
  ui::ViewRequest _handleCustomRendererEvent(CustomRendererEventData&);
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};


class GuiData : public IConfigListener, private AppPlatformListener { /* Size=0x850 */
  /* 0x0000: fields for IConfigListener */
  /* 0x0008: fields for AppPlatformListener */
  /* 0x0018 */ ScreenSizeData mScreenSizeData;
  /* 0x0030 */ bool mScreenSizeDataValid;
  /* 0x0034 */ float mGuiScale;
  /* 0x0038 */ float mInvGuiScale;
  /* 0x003c */ bool mIsCurrentlyActive;
  /* 0x0040 */ std::set<int,std::less<int>,std::allocator<int> > mPostedErrors;
  /* 0x0050 */ MenuPointer mMenuPointer;
  /* 0x0052 */ int16_t mPointerX;
  /* 0x0054 */ int16_t mPointerY;
  /* 0x0056 */ bool mHasShowPreexistingMessages;
  /* 0x0057 */ bool mToolbarWasRendered;
  /* 0x0058 */ int32_t mPrevSelectedSlot;
  /* 0x005c */ ContainerID mPrevSelectedInventoryContainer;
  /* 0x0060 */ int32_t mNumSlots;
  /* 0x0064 */ int32_t mFlashSlotId;
  /* 0x0068 */ double mFlashSlotStartTime;
  /* 0x0070 */ IClientInstance& mClient;
  /* 0x0078 */ RectangleArea mToolbarArea;
  /* 0x0088 */ RectangleArea mToolbarAreaContainer;
  /* 0x0098 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mLastPopupText;
  /* 0x00b8 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mLastPopupSubtitleText;
  /* 0x00d8 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mLastJukeboxPopupText;
  /* 0x00f8 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mLastJukeboxPopupSubtitleText;
  /* 0x0118 */ int32_t mTickCount;
  /* 0x011c */ float mItemNameOverlayTime;
  /* 0x0120 */ float mJukeboxNameOverlayTime;
  /* 0x0124 */ bool mPopupNoticeDirty;
  /* 0x0125 */ bool mJukeboxPopupNoticeDirty;
  /* 0x0128 */ std::vector<GuiMessage,std::allocator<GuiMessage> > mGuiMessages;
  /* 0x0140 */ std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > mDevConsoleMessages;
  /* 0x0158 */ int32_t mMaxDevConsoleMessages;
  /* 0x0160 */ std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > mContentLogMessages;
  /* 0x0178 */ std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > mPerfTurtleMessages;
  /* 0x0190 */ TitleMessage mTitleMessage;
  /* 0x0200 */ uint32_t mServerSettingsId;
  /* 0x0208 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mServerSettings;
  /* 0x0228 */ bool mMuteChat;
  /* 0x022c */ float mCurrentDropTicks;
  /* 0x0230 */ PlayerInventory::SlotData mCurrentDropSlot;
  /* 0x0238 */ PlayerInventory::SlotData mLastSelectedSlot;
  /* 0x0240 */ bool mShowProgress;
  /* 0x0248 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mTipMessage;
  /* 0x0268 */ float mTipMessageLength;
  /* 0x0270 */ mce::Mesh mRcFeedbackOuter;
  /* 0x0420 */ mce::Mesh mRcFeedbackInner;
  /* 0x05d0 */ mce::Mesh mVignette;
  /* 0x0780 */ mce::MaterialPtr mInvFillMat;
  /* 0x0790 */ mce::MaterialPtr mCursorMat;
  /* 0x07a0 */ DevConsoleLogger& mDevConsoleLogger;
  /* 0x07a8 */ std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > > mLastTickTime;
  /* 0x07b0 */ std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<GuiMessage,std::allocator<GuiMessage> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<GuiMessage,std::allocator<GuiMessage> > > > > mDelayedMessages;
  /* 0x07c0 */ std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > mQueuedDevConsoleMessages;
  /* 0x07d8 */ std::mutex mQueuedDevMessagesMutex;
  /* 0x0828 */ int32_t mHotbarRenderAloneBit;
  /* 0x0830 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mFilteredText;
  static const float BUTTONS_TRANSPARENCY;
  static const float DropTicks;
  static const std::array<float,8> GUI_SCALE_VALUES;
  static const int32_t MAX_HELD_MESSAGES;
  static const int32_t MAX_HELD_CONTENT_LOGS;
  
  GuiData(IClientInstance&);
  void tick();
  void displayChatMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void displayClientMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void displayLocalizableMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&);
  void displayLocalizedMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void displaySystemMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, ProfanityFilterContext);
  void displayWhisperMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void displayTextObjectMessage(const TextObjectRoot&);
  void displayTextObjectWhisperMessage(const TextObjectRoot&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void displayAnnouncementMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  bool handleClick();
  float floorAlignToScreenPixel(float) const;
  float ceilAlignToScreenPixel(float) const;
  Vec2 ceilToGuiScale(const Vec2&) const;
  int32_t ceilToGuiScale(int32_t) const;
  RectangleArea setTouchToolbarArea(const RectangleArea&);
  void flashSlot(int32_t);
  int32_t getSlotIdAt(int32_t, int32_t) const;
  void setShowProgress(bool);
  void setScreenSizeData(const ScreenSizeData&);
  const ScreenSizeData& getScreenSizeData() const;
  const bool screenSizeDataValid() const;
  void setGuiScale(float);
  float getGuiScale() const;
  float getInvGuiScale() const;
  bool isOddGuiScale() const;
  bool isMuteChat() const;
  void toggleMuteChat();
  void setMuteChat(bool);
  std::vector<GuiMessage,std::allocator<GuiMessage> >& getMessageList();
  std::vector<GuiMessage,std::allocator<GuiMessage> > getPreexistingMessages();
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getLastChatMessage();
  const TitleMessage& getTitleMessage() const;
  void clearTitleMessages();
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getServerSettings();
  uint32_t getServerSettingsId();
  void showPopupNotice(const ItemStackBase&);
  void showPopupNotice(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void showJukeboxPopupNotice(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  bool getNewPopupNotice(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  bool getNewJukeboxPopupNotice(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void showTipMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  bool getTipMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void clearMessages();
  void clearPlayerMessages();
  const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& getDevConsoleScreenMessages();
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getLastDevConsoleMessage();
  void displayDevConsoleMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void addDevConsoleMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void setDevConsoleMaxMessages(int32_t);
  void queueDevConsoleMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void flushQueuedDevConsoleMessages();
  void addContentLogMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& getContentLogMessages() const;
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getLastContentLogMessage() const;
  void addPerfTurtleMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& getPerfTurtleMessages();
  void clearPerfTurtleMessages();
  void postError(int32_t);
  void updatePointerLocation(int16_t, int16_t);
  virtual void onConfigChanged(const Config&);
  void onLevelGenerated();
  mce::Mesh& getRcFeedbackOuter();
  mce::Mesh& getRcFeedbackInner();
  mce::Mesh& getVignette();
  const mce::MaterialPtr& getInvFillMat() const;
  const mce::MaterialPtr& getCursorMat() const;
  void setMenuPointerPressed(bool);
  int16_t getPointerX() const;
  int16_t getPointerY() const;
  bool getShowProgress() const;
  int32_t getNumSlots() const;
  bool wasToolbarClicked() const;
  float getCurrentDropTicks() const;
  PlayerInventory::SlotData getCurrentDropSlot() const;
  PlayerInventory::SlotData getLastSelectedSlot() const;
  void setLastSelectedSlot(int32_t, ContainerID);
  void setTextToSpeechEnabled(bool);
  void setTitle(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void setSubtitle(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void setTitleAnimationTimes(int32_t, int32_t, int32_t);
  void setActionBarMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void resetTitle();
  void clearTitle();
  void resetPopupText();
  void setHotbarRenderAloneBit(int32_t);
  bool isHotbarRenderAlone(int32_t) const;
  void setFilteredText(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getFilteredText() const;
  void setServerSettings(const uint32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void initializeDevConsoleMessages();
  void initializeChatMessages();
  bool _touchEnabledOrHolographic() const;
  void _tickItemDrop();
  void _getSlotPos(int32_t, int32_t&, int32_t&);
  void _addMessage(const GuiMessage&, ProfanityFilterContext);
  void _addMessage(GuiMessage::MessageType, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, bool, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, ProfanityFilterContext);
  void _tickDelayedMessages();
  virtual ~GuiData();
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
  
  static int32_t getGuiScaleIndexForSmallScreen(const Vec2&);
  static int32_t getGuiScaleIndexForLargeScreen(const Vec2&);
  static int32_t getGuiScaleIndexForSplitscreenConsole(const Vec2&);
  static int32_t getGuiScaleIndexForHandheldConsole(const Vec2&);
  static float resolveGuiScale(int32_t);
  static int32_t _getGuiScaleIndex(float);
};

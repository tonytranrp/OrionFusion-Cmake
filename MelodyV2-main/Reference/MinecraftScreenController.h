
class MinecraftScreenController : public ScreenController, public std::enable_shared_from_this<MinecraftScreenController> { /* Size=0xa58 */
  /* 0x0000: fields for ScreenController */
  /* 0x0918: fields for std::enable_shared_from_this<MinecraftScreenController> */
  /* 0x0928 */ std::shared_ptr<MinecraftScreenModel> mMinecraftScreenModel;
  /* 0x0938 */ ScreenExitBehavior mExitBehavior;
  /* 0x093c */ InputMode mInputMode;
  /* 0x0940 */ HoloUIInputMode mHoloUIInputMode;
  /* 0x0944 */ InputMode mPreviousInputMode;
  /* 0x0948 */ HoloUIInputMode mPreviousHoloUIInputMode;
  /* 0x094c */ bool mPlayerDied;
  /* 0x0950 */ std::function<void __cdecl(enum ModalScreenButtonId)> mModalDialogResultCallback;
  /* 0x0990 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mTTSTitle;
  /* 0x09b0 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mTTSDialogMessage;
  /* 0x09d0 */ bool mLeaveScreen;
  /* 0x09d1 */ bool mRayTracingActive;
  /* 0x09d8 */ std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<bool,std::allocator<bool> >,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<bool,std::allocator<bool> > > > > mDropDownActive;
  /* 0x0a18 */ std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > mStepSliderValues;
  static const std::basic_string<char,std::char_traits<char>,std::allocator<char> > defaultOptionFormat;
  static std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,bool)> defaultProgressSliderOptionLabeller;
  
  MinecraftScreenController(std::shared_ptr<MinecraftScreenModel>, ScreenExitBehavior);
  virtual ~MinecraftScreenController();
  void onGameEventNotification(ui::GameEventNotification);
  virtual ui::ViewRequest tryExit();
  virtual ui::DirtyFlag tick();
  virtual void setSuspendInput(bool);
  virtual void leaveScreen();
  virtual void onInit();
  virtual void onDelete();
  virtual void onOpen();
  InputMode getInputMode() const;
  HoloUIInputMode getHoloUIInputMode() const;
  MinecraftScreenModel* getModel();
  virtual bool verifySceneStack(SceneStack*);
  virtual void onDictationEvent(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  bool isUsingGamepadBehavior() const;
  virtual bool bind(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, UIPropertyBag&);
  virtual bool bind(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint32_t, int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, uint32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, UIPropertyBag&);
  bool launchUri(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual bool _doesScreenHaveExitBehavior() const;
  void _gateRealmsWhenCrossPlatformIsDisabled(std::function<void __cdecl(void)>);
  bool _checkRealmCreatePermissions();
  void _setExitBehavior(ScreenExitBehavior);
  void _displayStandardModalPopup(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, ModalScreenButtonMode, std::function<void __cdecl(bool)>, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void _displayCustomModalPopup(const ModalScreenData&, std::function<void __cdecl(enum ModalScreenButtonId)>);
  void _displayReportModalPopup(const ModalScreenData&, std::function<void __cdecl(enum ModalScreenButtonId)>);
  void _displayReportRecordModalPopup(const ModalScreenData&, std::function<void __cdecl(enum ModalScreenButtonId)>);
  void _displayJsonDefinedControlPopup(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  void _displayJsonDefinedControlPopup(const UIPropertyBag&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  void _displayPrivilegesBlockedModalPopup(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  void _closeJsonDefinedControlPopup(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  virtual bool _isStillValid() const;
  void setUpCallbacksForNestedButton(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::basic_string<char,std::char_traits<char>,std::allocator<char> >, std::vector<unsigned int,std::allocator<unsigned int> >);
  void setUpCallbacksForNestedButtonInCollection(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::basic_string<char,std::char_traits<char>,std::allocator<char> >, std::function<int __cdecl(UIPropertyBag &)>, std::function<bool __cdecl(UIPropertyBag &,int)>, std::vector<unsigned int,std::allocator<unsigned int> >);
  void setUpCallbacksForStackPanelGrid(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<int __cdecl(void)>, std::function<int __cdecl(void)>, std::function<int __cdecl(void)>);
  void setUpCallbacksForDropdownOption(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >&, const std::unordered_map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<int>,std::equal_to<int>,std::allocator<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&, std::function<int __cdecl(void)>, std::function<void __cdecl(int)>);
  void setUpCallbacksForDropdownOption(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >&, const std::unordered_map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<int>,std::equal_to<int>,std::allocator<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<bool __cdecl(void)>, std::function<int __cdecl(void)>, std::function<void __cdecl(int)>);
  void setUpCallbacksForDropdownOption(OptionID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >&, const std::unordered_map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<int>,std::equal_to<int>,std::allocator<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void setUpCallbacksForDropdownOption(OptionID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >&, const std::unordered_map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<int>,std::equal_to<int>,std::allocator<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&);
  std::shared_ptr<DropdownScreenController> setUpCallbacksForCollectionDropdownOption(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const int32_t&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >&, const std::unordered_map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::hash<int>,std::equal_to<int>,std::allocator<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<bool __cdecl(int)>, std::function<int __cdecl(int)>, std::function<void __cdecl(int,int)>);
  void setUpCallbacksForFloatOption(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(void)>, std::function<bool __cdecl(void)>, std::function<float __cdecl(void)>, std::function<void __cdecl(float)>, std::function<float __cdecl(void)>, std::function<float __cdecl(void)>, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,bool)>);
  void setUpCallbacksForFloatOption(OptionID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,bool)>);
  void setUpCallbacksForFloatOption(OptionID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,float,bool)>);
  void setUpCallbacksForStepOption(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(void)>, std::function<bool __cdecl(void)>, std::function<std::vector<int,std::allocator<int> > __cdecl(void)>, std::function<int __cdecl(void)>, std::function<void __cdecl(int)>, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(int)>, bool);
  void setUpCallbacksForStepOption(OptionID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(int)>, bool);
  void setUpCallbacksForStepOption(OptionID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<std::basic_string<char,std::char_traits<char>,std::allocator<char> > __cdecl(int)>, bool);
  virtual bool _getGamepadHelperVisible() const;
  virtual bool _getMixedHelperVisible() const;
  virtual bool _getKeyboardHelperVisible() const;
  bool _getGestureControlEnabled();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonADescription();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonBDescription();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonXDescription();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonYDescription();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonKeyboardDescription();
  void _showEduUnownedContentModal();
  void _showNoWifiModal();
  NetworkFilter _getNetworkFilter() const;
  void _showLiveMultiplayerModal();
  void _showServerCapacityFullModal();
  bool _tryShowSuspendWarningModal(std::function<void __cdecl(void)>);
  void showPickCustomSkinDialog(std::function<void __cdecl(enum PickCustomSkinResult)>);
  void showPickFileDialog(std::shared_ptr<FilePickerSettings>, std::basic_string<char,std::char_traits<char>,std::allocator<char> >, std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  void exportWorld();
  void exportWorld(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  void exportPDF(PDFOptions, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<void __cdecl(bool)>);
  void showPlayerProfile(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, mce::UUID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void showRemoteStorageErrorModal(const Core::Path&);
  void _navigateToPlayerBannedScreen();
  void _attemptAddFriends(std::function<void __cdecl(void)>);
  void _attemptXblGatedScreen(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<void __cdecl(void)>);
  void _closeModalDialog();
  bool _usingGamepadBehavior(InputMode, HoloUIInputMode) const;
  bool _usingGamepadBehavior() const;
  void _reevaluateUsingGamepadBehavior(InputMode, HoloUIInputMode);
  bool _tryNavigateToXblFirstLaunchScreen();
  void _onModalEventReceived(ModalScreenButtonId);
  void gateOnPlatformSignInForStoreAccess(std::function<void __cdecl(void)>);
  ui::ViewRequest promptSignIn(std::function<void __cdecl(enum Social::SignInResult)>);
  ui::ViewRequest showSignIn();
  ui::ViewRequest promptConnect(bool, std::function<void __cdecl(enum Social::UserPlatformConnectionResult)>);
  bool isRayTracingEnabled() const;
  bool _attemptSignIn(std::function<void __cdecl(enum Social::SignInResult)>, std::function<void __cdecl(enum Social::SignInResult)>);
  void _attemptConnect(std::function<void __cdecl(enum Social::UserPlatformConnectionResult)>);
  void _onAttemptSignInResult(const Social::MultiIdentitySigninResult&, std::function<void __cdecl(enum Social::SignInResult)>, std::function<void __cdecl(enum Social::SignInResult)>);
  void _handleSignInFailure(const Social::MultiIdentitySigninResult&, std::function<void __cdecl(enum Social::SignInResult)>, bool);
  void _promptEduSwitchAccounts();
  int32_t _packItemInstance(const ItemInstance&) const;
  void _attemptSigninOrSignup(std::function<void __cdecl(Social::MultiIdentitySigninResult const &)>);
  void _displayVRRemoveDeviceWarning(std::function<void __cdecl(void)>, std::function<void __cdecl(void)>);
  void _handleSignIn(std::function<void __cdecl(Social::MultiIdentitySigninResult const &)>);
  void _registerEventHandlers();
  bool _resolveSafeZoneVisibility(SafeZoneBuffer) const;
  SafeZoneBuffer _getSafeZoneBuffersByPosition(SplitScreenPosition) const;
  SplitScreenPosition _getSplitScreenPositionByInfo(const SplitScreenInfo&) const;
  void _updateRayTracingStatus();
  bool _isApprovedLink(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  int32_t _getStepSliderValue(std::function<int __cdecl(void)>, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> > _retrieveBindingValueFromPropertyBag(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, UIPropertyBag&) const;
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
  
  static ModalScreenData getProfanityModalData();
};


class BaseActorRenderContext { /* Size=0x298 */
  /* 0x0008 */ float mNumEntitiesRenderedThisFrame;
  /* 0x000c */ float mLastFrameTime;
  /* 0x0010 */ const float mFrameAlpha;
  /* 0x0018 */ SortedMeshDrawList* mSortedMeshDrawList;
  /* 0x0020 */ IClientInstance& mClientInstance;
  /* 0x0028 */ IMinecraftGame& mMinecraftGame;
  /* 0x0030 */ ScreenContext& mScreenContext;
  /* 0x0038 */ BlockActorRenderDispatcher& mBlockEntityRenderDispatcher;
  /* 0x0040 */ ActorRenderDispatcher& mEntityRenderDispatcher;
  /* 0x0048 */ ActorBlockRenderer& mEntityBlockRenderer;
  /* 0x0050 */ ItemInHandRenderer& mItemInHandRenderer;
  /* 0x0058 */ ItemRenderer& mItemRenderer;
  /* 0x0060 */ ParticleSystemEngine* mParticleSystemEngine;
  /* 0x0068 */ std::optional<__int64> mRenderUniqueIdOverride;
  /* 0x0078 */ Vec3 mCameraTargetPosition;
  /* 0x0084 */ Vec3 mCameraPosition;
  /* 0x0090 */ AABB mWorldClipRegion;
  /* 0x00ac */ bool mIsOnScreen;
  /* 0x00ad */ bool mUpdateBonesAndEffects;
  /* 0x00ae */ bool mUpdateEffects;
  /* 0x00af */ bool mIgnoresLightning;
  /* 0x00b0 */ HistoricalFrameTimes mHistoricalFrameTimes;
  
  BaseActorRenderContext(const BaseActorRenderContext&);
  BaseActorRenderContext(ScreenContext&, IClientInstance&, IMinecraftGame&);
  virtual ~BaseActorRenderContext();
  BlockActorRenderDispatcher& getBlockEntityRenderDispatcher();
  ActorRenderDispatcher& getEntityRenderDispatcher();
  ItemInHandRenderer& getItemInHandRenderer();
  ItemRenderer& getItemRenderer();
  ActorBlockRenderer& getEntityBlockRenderer();
  DataDrivenRenderer* getDataDrivenRenderer(const HashedString&) const;
  const FontHandle& getFontHandle();
  const Actor* getCameraEntity() const;
  Actor* getCameraEntity();
  Vec2 getCameraRotation(const float) const;
  void setCameraTargetPosition(const Vec3&);
  const Vec3& getCameraTargetPosition() const;
  void setCameraPosition(const Vec3&);
  const Vec3& getCameraPosition() const;
  void setWorldClipRegion(const AABB&);
  const AABB& getWorldClipRegion() const;
  MatrixStack& getProjectionMatrix();
  MatrixStack& getViewMatrix();
  MatrixStack& getWorldMatrix();
  const IClientInstance& getClient() const;
  IClientInstance& getClient();
  Options& getOptions();
  ScreenContext& getScreenContext() const;
  Tessellator& getTessellator();
  mce::TextureGroup& getTextures();
  ParticleSystemEngine* getParticleSystemEngine();
  bool isFancy();
  bool isRealityFullVRMode() const;
  bool isVRClient() const;
  bool isLivingroomMode() const;
  bool isVRTransitioning() const;
  const HitResult& getHitResult();
  BaseActorRenderContext overrideScreenContext(ScreenContext&) const;
  bool isIgnoringLightning() const;
  void setIgnoreLighting(bool);
  LightTexture* getLightTexture() const;
  void setIsOnScreen(bool);
  void setUpdateBonesAndEffects(bool);
  void setUpdateEffects(bool);
  bool isOnScreen() const;
  bool shouldUpdateBonesAndEffects() const;
  bool shouldUpdateEffects() const;
  void setRenderUniqueIdOverride(std::optional<__int64>);
  void setRenderUniqueIdOverride(int64_t);
  void resetRenderUniqueIdOverride();
  std::optional<__int64> getRenderUniqueIdOverride() const;
  void setHistoricalFrameTimes(const HistoricalFrameTimes&);
  const HistoricalFrameTimes& getHistoricalFrameTimes() const;
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};

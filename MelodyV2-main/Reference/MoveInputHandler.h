
class MoveInputHandler : public MoveInput { /* Size=0x98 */
  /* 0x0000: fields for MoveInput */
  /* 0x0058 */ bool mAscend;
  /* 0x0059 */ bool mDescend;
  /* 0x005a */ bool mNorthJump;
  /* 0x005b */ bool mJumpDown;
  /* 0x005c */ bool mSprintDown;
  /* 0x005d */ bool mChangeHeight;
  /* 0x005e */ bool mPersistSneak;
  /* 0x005f */ bool mUp;
  /* 0x0060 */ bool mDown;
  /* 0x0061 */ bool mLeft;
  /* 0x0062 */ bool mRight;
  /* 0x0063 */ bool mUpLeft;
  /* 0x0064 */ bool mUpRight;
  /* 0x0068 */ Vec2 mAnalogMoveVector;
  /* 0x0070 */ Vec3 mGazeDir;
  /* 0x007c */ bool mLookCenter;
  /* 0x007d */ unsigned char mLookSlightDirField;
  /* 0x007e */ unsigned char mLookNormalDirField;
  /* 0x007f */ unsigned char mLookSmoothDirField;
  /* 0x0080 */ bool mPreJumpDownState;
  /* 0x0081 */ bool mPreMovingState;
  /* 0x0082 */ bool mFlyDown;
  /* 0x0083 */ bool mTryFly;
  /* 0x0084 */ bool mWalkDown;
  /* 0x0088 */ int32_t mWalkState;
  /* 0x008c */ int32_t mWalkStateOld;
  /* 0x0090 */ bool mWantSlowdown;
  /* 0x0091 */ bool mSneakButtonDown;
  /* 0x0092 */ bool mFirstPersonDown;
  /* 0x0093 */ bool mThirdPersonDown;
  /* 0x0094 */ bool mThirdPersonFrontDown;
  /* 0x0095 */ bool mMayFile;
  /* 0x0096 */ bool mSprintMode;
  
  MoveInputHandler(const MoveInputHandler&);
  MoveInputHandler();
  virtual ~MoveInputHandler();
  virtual void tick(IPlayerMovementProxy&);
  virtual void clearInputState();
  virtual void fillInputPacket(PlayerAuthInputPacket&);
  virtual bool isChangeHeight() const;
  bool isMovingForward() const;
  bool isMovingLeft() const;
  bool isMovingRight() const;
  bool wantsMoveForward() const;
  virtual bool isPlayerMoving() const;
  bool isJumpDown() const;
  void setSneakPersistence(bool);
  void setGazeDirection(const Vec3&);
  virtual const Vec3& getGazeDirection() const;
  virtual void registerInputHandlers(InputHandler&);
  virtual std::unique_ptr<IReplayableActorInput,std::default_delete<IReplayableActorInput> > createSnapshot();
  void _toggleSneak();
  void _updateGGVector(int16_t, float, float, float);
  void _updateMoveVector(float, float);
  bool mayFly() const;
  int32_t GetWalkState() const;
  void toggleWalkState();
  void toggleFlyState();
  void toggleSwimState();
  void setWalkState(int32_t);
  bool wantSlowdown();
  void setSneakBtnDown();
  void _updateXY(bool);
  MoveInputHandler& operator=(const MoveInputHandler&);
  void __local_vftable_ctor_closure();
  virtual void* __vecDelDtor(uint32_t);
  
  static unsigned char _getLookBitmask(const MoveInputHandler::LookDirection, const MoveInputHandler::LookDirection);
  static unsigned char _getLookBitmask(const MoveInputHandler::LookDirection);
};

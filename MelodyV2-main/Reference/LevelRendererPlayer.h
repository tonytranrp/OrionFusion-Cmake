
class LevelRendererPlayer : public LevelRendererCamera { /* Size=0x18c8 */
  /* 0x0000: fields for LevelRendererCamera */
  /* 0x1508 */ const float WATER_VISION_QUICK_TIME;
  /* 0x150c */ const float WATER_VISION_MAX_TIME;
  /* 0x1510 */ const float WATER_VISION_QUICK_PERCENT;
  /* 0x1514 */ Vec3 mComfortRenderAdjustment;
  /* 0x1520 */ std::unordered_map<BlockPos,unsigned __int64,std::hash<BlockPos>,std::equal_to<BlockPos>,std::allocator<std::pair<BlockPos const ,unsigned __int64> > > mRecordSoundMap;
  /* 0x1560 */ std::unordered_map<BlockPos,BlockDestructInfo,std::hash<BlockPos>,std::equal_to<BlockPos>,std::allocator<std::pair<BlockPos const ,BlockDestructInfo> > > mDestroyingBlockList;
  /* 0x15a0 */ double mLastDestroyRenderTime;
  /* 0x15a8 */ std::unordered_map<BlockPos,BlockActorDelayedDeletionInfo,std::hash<BlockPos>,std::equal_to<BlockPos>,std::allocator<std::pair<BlockPos const ,BlockActorDelayedDeletionInfo> > > mBlockEntityDelayedDeletionList;
  /* 0x15e8 */ std::vector<BlockPos,std::allocator<BlockPos> > mRemoveBlockEntityTempList;
  /* 0x1600 */ float fov;
  /* 0x1604 */ float oFov;
  /* 0x1608 */ float fovOffset;
  /* 0x160c */ float fovOffsetO;
  /* 0x1610 */ PlayerRenderingParameters mRenderingParameters;
  /* 0x171c */ float thirdDistance;
  /* 0x1720 */ float thirdDistanceO;
  /* 0x1724 */ float thirdRotation;
  /* 0x1728 */ float thirdRotationO;
  /* 0x172c */ float thirdTilt;
  /* 0x1730 */ float thirdTiltO;
  /* 0x1734 */ float cameraRoll;
  /* 0x1738 */ float cameraRollO;
  /* 0x173c */ float currentCameraDist;
  /* 0x1740 */ float prevHeightOffset;
  /* 0x1744 */ float mHeightOffsetAdjustment;
  /* 0x1748 */ float mUnderwaterVisionTime;
  /* 0x174c */ float mUnderwaterVisionTimePrevious;
  /* 0x1750 */ float mUnderwaterVisionClarity;
  /* 0x1754 */ float mUnderwaterVisionScale;
  /* 0x1758 */ mce::MaterialPtr selectionBlockEntityOverlayMaterial;
  /* 0x1768 */ mce::MaterialPtr selectionBlockEntityOverlayColorMaterial;
  /* 0x1778 */ mce::MaterialPtr selectionOverlayMaterial;
  /* 0x1788 */ mce::MaterialPtr selectionOpaqueMaterial;
  /* 0x1798 */ mce::MaterialPtr selectionTwoSidedMaterial;
  /* 0x17a8 */ mce::MaterialPtr cracksOverlayMaterial;
  /* 0x17b8 */ mce::MaterialPtr cracksOverlayAlphaTestMaterial;
  /* 0x17c8 */ mce::MaterialPtr cracksOverlayBlockEntityMaterial;
  /* 0x17d8 */ mce::MaterialPtr mOutlineSelectionMaterial;
  /* 0x17e8 */ const SoundMapping& mSounds;
  /* 0x17f0 */ std::vector<DeferredSound,std::allocator<DeferredSound> > mDeferredSounds;
  /* 0x1808 */ TextureAtlasItem uvBreakBlockItem;
  /* 0x1848 */ IClientInstance& mClientInstance;
  /* 0x1850 */ LocalPlayer& mLocalPlayer;
  /* 0x1858 */ LevelRenderer& mLevelRenderer;
  /* 0x1860 */ Bedrock::NonOwnerPointer<SoundPlayerInterface> mSoundPlayer;
  /* 0x1870 */ Level& mLevel;
  /* 0x1878 */ HolographicPlatform& mHolographicPlatform;
  /* 0x1880 */ std::unique_ptr<AmbientSoundController,std::default_delete<AmbientSoundController> > mAmbientSoundController;
  /* 0x1888 */ std::function<float __cdecl(float,float,float)> mEase;
  
  LevelRendererPlayer(IClientInstance&, std::shared_ptr<Options>, Level&, LevelRenderer&, LocalPlayer&, const gsl::not_null<Bedrock::NonOwnerPointer<SoundPlayerInterface> >&, const gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas const > >&, HolographicPlatform&, const SoundMapping&);
  void reinit(const gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas const > >&);
  virtual void tickLevelRendererCamera();
  virtual void tickRain();
  virtual void preRenderUpdate(ScreenContext&, LevelRenderPreRenderUpdateParameters&);
  bool blockCanHaveCracksOverlay(const Block&) const;
  bool blockCanHaveSelectionOverlay(const Block&) const;
  void renderHitSelect(BaseActorRenderContext&, BlockSource&, const BlockPos&, const bool) const;
  virtual void renderVRHitFlash(ScreenContext&);
  const mce::MaterialPtr& chooseOverlayMaterial(const bool, const BlockRenderLayer) const;
  void clearDestroyProgress();
  void updateDestroyProgress();
  void addDestroyBlock(const BlockPos&, float);
  void updateDestroyBlock(const BlockPos&, float);
  void removeDestroyBlock(const BlockPos&);
  virtual void renderBlockEntities(BaseActorRenderContext&, bool);
  bool canRenderNameTags(Actor&) const;
  bool canRenderScoreTags(Actor&) const;
  virtual NameTagRenderObjectCollection extractNameTags(ScreenContext&) const;
  virtual void callRenderNameTags(ScreenContext&, const ViewRenderObject&, Font&);
  virtual CrackRenderObjectCollection extractCracks(ScreenContext&) const;
  virtual void callRenderCracks(BaseActorRenderContext&, const ViewRenderObject&);
  virtual void renderHolographicCursor(ScreenContext&);
  CrackRenderObject createCrackRenderObject(ScreenContext&, BlockSource&, const Block&, const BlockPos&, float) const;
  virtual void renderFonts(BaseActorRenderContext&);
  void renderFontByEntity(BaseActorRenderContext&, Actor&);
  virtual void renderHealth(BaseActorRenderContext&, const ViewRenderData&);
  virtual void renderBindEffects(BaseActorRenderContext&);
  virtual void renderProcessBar(BaseActorRenderContext&, const ViewRenderData&);
  float getUnderWaterVisionScale();
  virtual bool getForceFog(const Actor&) const;
  virtual void setupFog(ScreenContext&, const float);
  float getCurrentCameraDist();
  float getFov(float, bool);
  void tickFov();
  void tickUnderwaterVision();
  void bobHurt(Matrix&, float);
  void bobView(Matrix&, float);
  float getProjectionAspectRatio();
  Vec3 getComfortRenderAdj();
  uint64_t playSound(const Actor&, const ActorLocation, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float) const;
  uint64_t playSound(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Vec3&, float, float) const;
  void stopSound(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void stopSound(uint64_t);
  void stopSounds();
  void playDeferredSound(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Vec3&, float, float);
  void playRecord(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Vec3&, float, float);
  void stopRecord(const Vec3&);
  void tryReassignSound(LevelSoundEvent&, Sound&, const ActorDefinitionIdentifier&, BlockSoundType&, Random&, bool&);
  virtual void levelSoundEvent(LevelSoundEvent, const Vec3&, int32_t, const ActorDefinitionIdentifier&, bool, bool);
  virtual void levelEvent(LevelEvent, const CompoundTag&);
  virtual void levelEvent(LevelEvent, const Vec3&, int32_t);
  const Vec3 getCameraPosFromEntity(const Actor&, const float) const;
  const Vec3 getCameraPosWhenDeparted(const Actor&, const float) const;
  const PlayerRenderingParameters& getRenderingParameters() const;
  void setItemInHandRenderingParameters(mce::Camera&);
  void setupCamera(mce::Camera&, const float);
  virtual void addCameraListenerToRenderChunkCoordinator();
  void clearInWorldCursors();
  virtual void notifyGeoChangedForAffectedEntities(RenderChunkShared&, unsigned char);
  virtual void blockEntityAboutToBeRemoved(BlockSource&, std::shared_ptr<BlockActor>);
  bool isCameraUnderwater();
  float getHeightOffsetAdjustment() const;
  virtual void addParticleEffect(const HashedString&, const Actor&, const HashedString&, const Vec3&, const MolangVariableMap&);
  virtual void addParticleEffect(const HashedString&, const Vec3&, const MolangVariableMap&);
  virtual void addTerrainParticleEffect(const BlockPos&, const Block&, const Vec3&, float, float, float);
  virtual void addTerrainSlideEffect(const BlockPos&, const Block&, const Vec3&, float, float, float);
  virtual void addBreakingItemParticleEffect(const Vec3&, ParticleType, const TextureUVCoordinateSet&, bool);
  virtual float getUnderwaterVisionClarity();
  virtual const Block* _getBlockForBlockEnity(const BlockActor&);
  virtual void _fetchAdditionalBlockEntities(std::vector<BlockActor *,std::allocator<BlockActor *> >&);
  void _addTerrainEffect(const HashedString&, const BlockPos&, const Block&, const Vec3&, float, float, float);
  virtual FogDefinition::DistanceSettingType _getFogDistanceSettingType() const;
  virtual FogDefinition::DensitySettingType _getFogDensitySettingType() const;
  void _adjustHeightOffsetNearLiquidSurface(float&, const Actor&, const mce::Camera&, float, BlockSource&);
  bool checkPosForOneToOneClip(const Vec3&) const;
  virtual bool isPositionTooCloseToCamera(const Vec3&) const;
  virtual void queueRenderEntities(const LevelRenderPreRenderUpdateParameters&);
  virtual void renderEntityEffects(BaseActorRenderContext&);
  void _renderOutlineSelection(ScreenContext&, const Block&, BlockSource&, const BlockPos&) const;
  void _renderHighlightSelection(BaseActorRenderContext&, BlockSource&, const Block&, const BlockPos&, bool, const bool) const;
  void _playBabySoundEvent(Sound, const Vec3&, Random&) const;
  Sound _retrieveActorSoundWithFallback(LevelSoundEvent, LevelSoundEvent, const ActorDefinitionIdentifier&);
  void _pruneBlockEntityDelayedDeletionList();
  const mce::MaterialPtr& _getForcedMaterial(const BlockActor&) const;
  const TextureUVCoordinateSet& _getTerrainTextureUVsFromBlock(const Block&);
  void _crack(BlockSource&, const Block&, const BlockPos&, unsigned char);
  virtual ~LevelRendererPlayer();
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
  
  static void renderNameTags(ScreenContext&, const ViewRenderData&, const NameTagRenderObjectCollection&, Font&);
  static void renderCracks(ScreenContext&, const ViewRenderData&, const CrackRenderObjectCollection&);
  static float getNightVisionScale(const Mob&, float);
};

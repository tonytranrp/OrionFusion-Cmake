
class LevelRenderer : public LevelListener, public AppPlatformListener { /* Size=0x1d50 */
  /* 0x0000: fields for LevelListener */
  /* 0x0008: fields for AppPlatformListener */
  /* 0x0018 */ std::unordered_map<AutomaticID<Dimension,int>,std::unique_ptr<RenderChunkCoordinator,std::default_delete<RenderChunkCoordinator> >,std::hash<AutomaticID<Dimension,int> >,std::equal_to<AutomaticID<Dimension,int> >,std::allocator<std::pair<AutomaticID<Dimension,int> const ,std::unique_ptr<RenderChunkCoordinator,std::default_delete<RenderChunkCoordinator> > > > > mRenderChunkCoordinators;
  /* 0x0058 */ mce::TextureGroup& mTextures;
  /* 0x0060 */ std::shared_ptr<mce::Mesh> mShadowCylinder;
  /* 0x0070 */ std::shared_ptr<mce::Mesh> mShadowOverlayCube;
  /* 0x0080 */ std::shared_ptr<mce::Mesh> mSkyMesh;
  /* 0x0090 */ std::shared_ptr<mce::Mesh> mStarsMesh;
  /* 0x00a0 */ std::shared_ptr<mce::Mesh> mEndSkyMesh;
  /* 0x00b0 */ std::shared_ptr<mce::Mesh> mSunMesh;
  /* 0x00c0 */ std::shared_ptr<mce::Mesh> mMoonMesh[8];
  /* 0x0140 */ std::shared_ptr<mce::Mesh> mMilkyWayMesh;
  /* 0x0150 */ std::shared_ptr<mce::Mesh> mMeteorMesh[8];
  /* 0x01d0 */ mce::TexturePtr mAtlasTexture;
  /* 0x0218 */ mce::TexturePtr mBrightnessTex;
  /* 0x0260 */ mce::TexturePtr mSunTex;
  /* 0x02a8 */ mce::TexturePtr mMilkyWayTex;
  /* 0x02f0 */ mce::TexturePtr mMeteorTex;
  /* 0x0338 */ mce::TexturePtr mMoonTex;
  /* 0x0380 */ mce::TexturePtr mEndSkyTex;
  /* 0x03c8 */ std::vector<mce::TexturePtr,std::allocator<mce::TexturePtr> > mCrackFrames;
  /* 0x03e0 */ DebugRenderer mDebugRenderer;
  /* 0x03e8 */ Tick mTicks;
  /* 0x03f0 */ BlockActorRenderDispatcher& mBlockEntityRenderDispatcher;
  /* 0x03f8 */ std::unique_ptr<BlockTessellator,std::default_delete<BlockTessellator> > mLocalRenderer;
  /* 0x0400 */ std::unique_ptr<ParticleEngine,std::default_delete<ParticleEngine> > mParticleEngine;
  /* 0x0408 */ std::unique_ptr<ParticleSystemEngine,std::default_delete<ParticleSystemEngine> > mParticleSystemEngine;
  /* 0x0410 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mTaskGroup;
  /* 0x0418 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mSyncTaskGroup;
  /* 0x0420 */ GameRenderer& mGameRenderer;
  /* 0x0428 */ MinecraftGraphics& mMinecraftGraphics;
  /* 0x0430 */ Level& mLevel;
  /* 0x0438 */ std::shared_ptr<Options> mOptions;
  /* 0x0448 */ IClientInstance& mClientInstance;
  /* 0x0450 */ LocalPlayer& mLocalPlayer;
  /* 0x0458 */ HolographicPlatform& mHolographicPlatform;
  /* 0x0460 */ LevelRendererPlayer mLevelRendererPlayer;
  /* 0x1d28 */ std::unique_ptr<LevelRendererProxy,std::default_delete<LevelRendererProxy> > mProxy;
  /* 0x1d30 */ mce::Color mClearBufferColor;
  /* 0x1d40 */ std::weak_ptr<PlayerRenderView> mPlayerView;
  static const float Z_NEAR;
  static const float Z_FAR_MIN;
  
  LevelRenderer(IClientInstance&, Level&, std::shared_ptr<Options>, mce::TextureGroup&, const gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas const > >&, LocalPlayer&, HolographicPlatform&, GameRenderer&, const gsl::not_null<Bedrock::NonOwnerPointer<SoundPlayerInterface> >&, GeometryGroup&, const SoundMapping&, const ActorResourceDefinitionGroup&);
  virtual ~LevelRenderer();
  void reinit(const gsl::not_null<Bedrock::NonOwnerPointer<TextureAtlas const > >&, GeometryGroup&, const ActorResourceDefinitionGroup&);
  virtual void onAppSuspended();
  virtual void onAppResumed();
  virtual void onDeviceLost();
  virtual void onLowMemory();
  virtual Particle* addParticle(ParticleType, const Vec3&, const Vec3&, int32_t, const CompoundTag*, bool);
  virtual void onBlockChanged(BlockSource&, const BlockPos&, uint32_t, const Block&, const Block&, int32_t, const ActorBlockSyncMessage*);
  void onOptionsChanged();
  void rebuildAllRenderChunkGeometry();
  virtual void levelSoundEvent(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Vec3&, float, float);
  virtual void stopSoundEvent(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void stopAllSounds();
  Tessellator& getTessellator();
  BlockTessellator& getBlockRenderer();
  std::shared_ptr<ClientBlockPipeline::SchematicsRepository> getSchematicsRepository() const;
  void frameUpdate(ClientFrameUpdateContext&);
  void tickLevelRenderer();
  void preRenderUpdate(ScreenContext&, LevelRenderPreRenderUpdateParameters&);
  void renderLevel(ScreenContext&, const FrameRenderObject&);
  SeasonsRenderer& getSeasonsRenderer();
  const LevelRendererPlayer& getLevelRendererPlayer() const;
  LevelRendererPlayer& getLevelRendererPlayer();
  ParticleEngine& getParticleEngine() const;
  ParticleSystemEngine& getParticleSystemEngine() const;
  TaskGroup& getTaskGroup();
  RenderChunkCoordinator& getRenderChunkCoordinator(AutomaticID<Dimension,int>);
  TaskGroup& getSyncTaskGroup();
  virtual void takePicture(cg::ImageBuffer&, Actor*, Actor*, ScreenshotOptions&);
  const Tick& getTicks() const;
  LocalPlayer& getLocalPlayer();
  const BlockActorRenderDispatcher& getBlockEntityRenderDispatcher() const;
  BlockActorRenderDispatcher& getBlockEntityRenderDispatcher();
  const ActorRenderDispatcher& getEntityRenderDispatcher() const;
  ActorRenderDispatcher& getEntityRenderDispatcher();
  LevelRendererProxy* getProxy();
  bool newParticlesEnabled() const;
  void resetParticleSystemEngine();
  void onWillChangeDimension();
  void onDimensionChanged();
  bool takeScreenshot(cg::ImageBuffer&);
  bool changeSunTex(ResourceLocation);
  bool changeMoonTex(ResourceLocation);
  void reinitTex();
  void clearMilkyWayMesh();
  void clearMeteorMesh();
  void setClearBufferColor(const mce::Color&);
  const mce::Color& getClearBufferColor() const;
  void _createBlockRenderer();
  void _createMeshes(Tessellator&);
  void _resetMeshes();
  void _initResources();
  void _initPipelineTessellatorResources();
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};

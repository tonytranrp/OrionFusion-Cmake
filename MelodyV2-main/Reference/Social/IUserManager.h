
class Social::IUserManager : public Bedrock::EnableNonOwnerReferences { /* Size=0x18 */
  /* 0x0008: fields for Bedrock::EnableNonOwnerReferences */
  
  virtual ~IUserManager();
  virtual std::shared_ptr<Bedrock::Threading::IAsyncResult<void> > createPrimaryUserAsync(IMinecraftEventing&, std::shared_ptr<Options>);
  virtual void initPrimaryIdentity(std::weak_ptr<FlightingService>);
  virtual std::shared_ptr<Social::User> getPrimaryUser() const;
  virtual bool isSecondaryUserCreationAllowed(int32_t) const;
  virtual void setSecondaryUserCreationAllowed(int32_t);
  virtual std::shared_ptr<Bedrock::Threading::IAsyncResult<void> > addSecondaryUserAsync(int32_t, IMinecraftEventing&, std::shared_ptr<Options>, std::function<void __cdecl(enum Social::UserPlatformConnectionResult)>);
  virtual bool controllerChanged(int32_t&, int32_t&);
  virtual bool canChangePrimaryUserFromStartMenuScreen() const;
  virtual void getAsyncUserSelection(std::function<void __cdecl(int)>, int32_t);
  virtual void getAsyncUserSelectionForNewPrimaryUser(int32_t, bool);
  virtual void forceCloudSaveOnWorld(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual Core::Subject<Social::UserListObserver,Core::SingleThreadedLock>& getUserListSubject();
  virtual bool isPrimaryUserReady();
  virtual bool canAccessPlayScreen();
  virtual bool needToShowPlatformStoreConnectConfirmationScreen();
  virtual bool canAccessSettingsScreen();
  virtual bool canAccessAchievementsScreen();
  virtual bool canAccessSkinScreen();
  virtual bool canAccessStoreScreen();
  virtual bool canAccessRealmsPendingInvitesScreen();
  virtual bool canHandleInvites();
  virtual bool needPlatformConnectionBeforeXBLSignIn();
  virtual bool needPlatformConnectionForMultiplayer() const;
  virtual bool needPlatformConnectionForSplitScreenMultiplayer() const;
  virtual bool needPlatformConnectionBeforeServerSearch() const;
  virtual bool needsAsyncUserSelection(int32_t, bool);
  virtual void onFullGameUnlock();
  virtual bool hasPlatformIcons() const;
  virtual bool hasPlatformProfileCards() const;
  virtual void getLinkedXuids(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >)>, const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&) const;
  virtual void getLinkedPlatformIds(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >)>, const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&) const;
  virtual void onAppResumed();
  virtual void onAppSuspended();
  virtual void onAppFocusLost();
  virtual void removeUser(int32_t, bool);
  virtual void removeClient(std::shared_ptr<IClientInstance>);
  virtual void removeUserClient(int32_t);
  virtual void setUserClient(int32_t, const std::shared_ptr<IClientInstance>&);
  virtual bool userHasClient(int32_t);
  virtual ControllerIDtoClientMap& retrieveCIDToClientMap();
  virtual int32_t getClientCID(const IClientInstance&) const;
  virtual void registerSignOutListener(const Core::CallbackListeners<int,enum Social::SignInResult>::Listener&);
  virtual void registerSignInListener(const Core::CallbackListeners<int,enum Social::SignInResult>::Listener&);
  virtual void registerIdentitySignInListener(Social::IdentityType, std::function<void __cdecl(unsigned int,enum Social::IdentityType)>);
  virtual void registerIdentitySignOutListener(Social::IdentityType, std::function<void __cdecl(unsigned int,enum Social::IdentityType)>);
  virtual bool needGamepadDisconnectScreen(int32_t);
  virtual void tick(IMinecraftGame&);
  virtual void updateMapping(bool, bool);
  virtual void saveUserEventInformation();
  virtual std::shared_ptr<Social::User> getUser(const Social::XboxLiveUser&);
  virtual std::shared_ptr<Social::User> getUser(const IClientInstance&) const;
  virtual const std::shared_ptr<Social::User const > getUserFromUserId(uint32_t) const;
  virtual std::shared_ptr<Social::User> getUserFromUserId(uint32_t);
  virtual GameUserType getUserTypeFromUserId(uint32_t) const;
  virtual bool isChatAllowedWhenBlockedByPlatform() const;
  virtual const std::vector<std::shared_ptr<Social::User>,std::allocator<std::shared_ptr<Social::User> > >& getUsers() const;
  virtual bool isUserSignedIn(uint32_t);
  virtual void registerLevelLocationObserver(LevelListCache&);
  virtual Social::MultiplayerServiceObserver& getMultiplayerServiceObserver();
  IUserManager(const Social::IUserManager&);
  IUserManager();
  Social::IUserManager& operator=(const Social::IUserManager&);
  void __autoclassinit2(uint64_t);
  void __local_vftable_ctor_closure();
  virtual void* __vecDelDtor(uint32_t);
};

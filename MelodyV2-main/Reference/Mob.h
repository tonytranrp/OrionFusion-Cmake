class Mob : public Actor {
  public:
    static const float PLAYER_SWIMMING_SURFACE_OFFSET;
    static const float GLIDING_FALL_RESET_DELTA;
    static const float SLOW_FALL_GRAVITY;
    static const float DEFAULT_GRAVITY;
    static const float LADDER_CLIMB_SPEED;
    static const float ASCEND_BLOCK_BY_JUMPING_SPEED;
    static const float MAX_ARMOR;
    static const float NUM_ARMOR_ITEMS;
    static const float BASE_ARMOR_TOUGHNESS;
    static const float MIN_ARMOR_RATIO;
    static const float ARMOR_PROTECTION_DIVIDER;
    static const int TOTAL_ROLL_STEPS;
    static const int REMOVE_PASSENGERS_DELAY;
    static const int SPAWN_XP_DELAY;
    static const int ARMOR_DAMAGE_DIVISOR;
    static const float FRICTION_CONSTANT;
    static const float FRICTION_MODIFIER;
    static const float FRICTION_CONSTANT_MODIFIED;
    int mHurtTime;
    int mHurtDuration;
    float mHurtDir;
    int mAttackTime;
    float mOTilt;
    float mTilt;
    int mLookTime;
    float mFallTime;
    bool mFloatsInLiquid;
    bool mDiscardFriction;
    Vec3 mElytraRot;
    CompassSpriteCalculator mCompassSpriteCalc;
    CompassSpriteCalculator mRecoveryCompassSpriteCalc;
    ClockSpriteCalculator mClockSpriteCalc;
    float mXxa;
    float mYya;
    float mZza;
    float mYRotA;
    bool mHasMoveInput;
    float mAttackAnim;
  protected:
    static const int MAX_INACTIVITY_TIMER;
    bool mSwinging;
    int mSwingTime;
    int mNoActionTime;
    int mNoJumpDelay;
    float mDefaultLookAngle;
    float mFrictionModifier;
    float mFlyingSpeed;
    float mSwimSpeedMultiplier;
    int mDeathTime;
    int mDeathScore;
    float mAnimStep;
    float mAnimStepO;
    float mLockedBodyYRot;
    float mPassengerYRotLimit;
    bool mJumping;
    bool mJumpVelRedux;
    float mPlayerMountAbilityPendingScale;
    bool mAllowStandSliding;
    Vec3 mJumpStartPos;
    float mSpeed;
    float mMovementComponentCurrentSpeed;
    bool mSurfaceMob;
    bool mNaturallySpawned;
    std::weak_ptr<VillageLegacy> mVillageLegacy;
    bool mWantsToBeJockey;
    bool mSpawnedXP;
    int mRollCounter;
  private:
    static const int SWING_DURATION;
    ActorUniqueID mLookingAtId;
    ActorUniqueID mCaravanHead;
    ActorUniqueID mCaravanTail;
    float mOAttackAnim;
    int mArrowCount;
    int mRemoveArrowTime;
    int mFallFlyTicks;
    bool mHasBoundOrigin;
    BlockPos mBoundOrigin;
    std::optional<bool> mActuallyDoKnockbackOrNotReallyBadHackDoNotUse;
    MobSpawnMethod mSpawnMethod;
    bool mCreateAiOnReload;
    ActorUniqueID mTargetCaptainId;

  public:
    Mob(Level &, EntityContext &);
    Mob(ActorDefinitionGroup *, const ActorDefinitionIdentifier &, EntityContext &);
    virtual void initializeComponents(Actor::InitializationMethod, const VariantParameterList &);
    virtual void reloadHardcodedClient(Actor::InitializationMethod, const VariantParameterList &);
    virtual void reloadHardcoded(Actor::InitializationMethod, const VariantParameterList &);
    virtual ~Mob(void);
    void setJumpTicks(int);
    int getJumpTicks(void) const;
    bool discardFriction(void) const;
    void resetAttributes(void);
    virtual void knockback(Actor *, int, float, float, float, float, float);
    virtual void kill(void);
    virtual void die(const ActorDamageSource &);
    virtual bool shouldDropDeathLoot(void) const;
    virtual void spawnAnim(void);
    virtual bool isAlive(void) const;
    virtual bool isPickable(void);
    virtual bool isShootable(void);
    virtual bool isSleeping(void) const;
    virtual void setSleeping(bool);
    virtual bool isBlocking(void) const;
    bool isSprinting(void) const;
    virtual void setSprinting(bool);
    static void setSprinting(BaseAttributeMap &, SynchedActorDataWriter, bool);
    void setSpeedModifier(float);
    virtual bool canBePulledIntoVehicle(void) const;
    void playSpawnSound(void);
    void playBornSound(void);
    virtual LevelSoundEvent getHurtSound(void);
    virtual LevelSoundEvent getDeathSound(void);
    int getItemIconAnimationFrame(const ItemStack &);
    virtual float getSpeed(void) const;
    virtual void setSpeed(float);
    virtual float getSprintSpeedIncrease(void) const;
    float getMovementComponentCurrentSpeed(void) const;
    void setMovementComponentCurrentSpeed(float);
    virtual bool isJumping(void) const;
    void setJumping(bool);
    void setJumpVelRedux(bool);
    float getJumpPower(void) const;
    float calculateJumpImpulse(void);
    static float calculateJumpImpulse(const IMobMovementProxy &);
    float getJumpEffectAmplifierValue(void);
    static float getJumpEffectAmplifierValue(const IMobMovementProxy &);
    virtual float getYawSpeedInDegreesPerSecond(void) const;
    virtual void normalTick(void);
    virtual void baseTick(void);
    void frostWalk(void);
    bool isFrostWalking(void) const;
    virtual void tryFrostWalk(void);
    virtual void hurtEffects(const ActorDamageSource &, float, bool, bool);
    virtual float getMeleeWeaponDamageBonus(Mob *);
    virtual int getMeleeKnockbackBonus(void);
    virtual void animateHurt(void);
    virtual bool doFireHurt(int);
    virtual void travel(float, float, float);
    static void _travel(IMobMovementProxy &, float, float, float);
    virtual void applyFinalFriction(float, bool);
    virtual void aiStep(void);
    virtual void aiStep(IMobMovementProxy &) const;
    static void _aiStep(IMobMovementProxy &);
    virtual void pushActors(void);
    virtual void lookAt(Actor *, float, float);
    virtual bool isLookingAtAnEntity(void);
    virtual bool checkSpawnRules(bool);
    virtual bool checkSpawnObstruction(void) const;
    virtual float getAttackAnim(float);
    virtual void addPassenger(Actor &);
    virtual bool startRiding(Actor &);
    virtual void stopRiding(bool, bool, bool);
    void setYBodyRotation(float);
    void setOldYBodyRotation(float);
    void setYBodyRotations(float, float);
    InterpolationPair getYBodyRotationsNewOld(void) const;
    float getYBodyRotation(void) const;
    float getOldYBodyRotation(void) const;
    void snapToYHeadRot(float);
    void snapToYBodyRot(float);
    virtual void handleEntityEvent(ActorEvent, int);
    virtual int getItemUseDuration(void) const;
    virtual float getItemUseStartupProgress(void) const;
    virtual float getItemUseIntervalProgress(void) const;
    virtual int getItemUseIntervalAxis(void) const;
    virtual void swing(void);
    virtual int getTimeAlongSwing(void) const;
    virtual void ate(void);
    virtual float getMaxHeadXRot(void);
    virtual bool isImmobile(void) const;
    static bool isImmobile(const IActorMovementProxy &);
    virtual void blockedByShield(const ActorDamageSource &, Actor &);
    virtual void setTarget(Actor *);
    virtual bool attack(Actor &, const ActorDamageCause &);
    virtual bool isAlliedTo(Mob *);
    virtual bool doHurtTarget(Actor *, const ActorDamageCause &);
    virtual ActorDamageCause getBlockDamageCause(const Block &) const;
    virtual bool canBeControlledByPassenger(void);
    virtual void leaveCaravan(void);
    virtual void joinCaravan(Mob *);
    virtual bool hasCaravanTail(void) const;
    virtual bool inCaravan(void) const;
    virtual ActorUniqueID getCaravanHead(void) const;
    Mob * getFirstCaravanHead(void);
    int getCaravanSize(void) const;
    virtual int getArmorValue(void) const;
    virtual float getArmorCoverPercentage(void) const;
    virtual int getToughnessValue(void) const;
    void hurtArmor(const ActorDamageSource &, int);
    void hurtArmorSlot(const ActorDamageSource &, int, ArmorSlot);
    virtual void hurtArmorSlots(const ActorDamageSource &, int, const std::bitset<4>);
    virtual void setDamagedArmor(ArmorSlot, const ItemStack &);
    virtual void sendArmorDamage(const std::bitset<4>);
    void sendArmorDamageSlot(ArmorSlot);
    virtual void sendArmor(const std::bitset<4>);
    void sendArmorSlot(ArmorSlot);
    void sendArmorAllSlots(void);
    virtual ArmorMaterialType getArmorMaterialTypeInSlot(ArmorSlot) const;
    virtual ArmorTextureType getArmorMaterialTextureTypeInSlot(ArmorSlot) const;
    virtual float getArmorColorInSlot(ArmorSlot, int) const;
    virtual void containerChanged(int);
    virtual void updateEquipment(void);
    virtual int clearEquipment(void);
    virtual std::vector<int, std::allocator<int> > getAllArmorID(void) const;
    virtual std::vector<ItemStack const*, std::allocator<ItemStack const*> > getAllHand(void) const;
    virtual std::vector<ItemStack const*, std::allocator<ItemStack const*> > getAllEquipment(void) const;
    virtual int getDeathTime(void) const;
    virtual int getArmorTypeHash(void);
    virtual void dropEquipmentOnDeath(const ActorDamageSource &, int);
    virtual void dropEquipmentOnDeath(void);
    virtual void clearVanishEnchantedItemsOnDeath(void);
    virtual void sendInventory(bool);
    virtual void buildDebugInfo(std::__cxx11::string &) const;
    virtual float getInterpolatedBodyRot(float) const;
    virtual float getInterpolatedHeadRot(float) const;
    virtual float getInterpolatedBodyYaw(float) const;
    virtual void resetInterpolated(void);
    float getXxa(void) const;
    void setXxa(float);
    float getYya(void) const;
    void setYya(float);
    float getZza(void) const;
    void setZza(float);
    float getYRotA(void) const;
    void setYRotA(float);
    void incrementArrowCount(const int);
    void setNaturallySpawned(bool);
    bool isNaturallySpawned(void) const;
    void setSurfaceMob(bool);
    virtual bool isSurfaceMob(void) const;
    virtual float getDamageAfterEnchantReduction(const ActorDamageSource &, float) const;
    virtual float getDamageAfterArmorReduction(const ActorDamageSource &, float) const;
    virtual float getDamageAfterResistanceEffect(const ActorDamageSource &, float) const;
    const ItemStack & getItemSlot(EquipmentSlot) const;
    virtual bool createAIGoals(void);
    void createAI(std::vector<GoalDefinition, std::allocator<GoalDefinition> >);
    void stopAI(void);
    virtual void onBorn(Actor &, Actor &);
    virtual bool setItemSlot(EquipmentSlot, const ItemStack &);
    const std::weak_ptr<VillageLegacy> & getVillageLegacy(void) const;
    std::weak_ptr<VillageLegacy> getVillageLegacy(void);
    TravelType getTravelType(void);
    static TravelType getTravelType(IMobMovementProxy &);
    float calcMoveRelativeSpeed(TravelType);
    static float _calcMoveRelativeSpeed(IMobMovementProxy &, TravelType);
    void setPassengerLockedBodyRot(float);
    float getPassengerLockedBodyRot(void) const;
    void setPassengerRotLimit(float);
    float getPassengerRotLimit(void) const;
    bool isGliding(void) const;
    int getGlidingTicks(void) const;
    bool isSwinging(void) const;
    bool isTransitioningSitting(void) const;
    virtual void setTransitioningSitting(bool);
    bool isEating(void) const;
    void setEating(bool);
    bool isAbleToMove(void) const;
    int getEatCounter(void) const;
    void setEatCounter(int);
    void setWantsToBeJockey(bool);
    bool wantsToBeJockey(void) const;
    virtual bool hasComponent(const HashedString &) const;
    float getFlightSpeed(void) const;
    void setFlightSpeed(float);
    float getSwimSpeedMultiplier(void) const;
    void setSwimSpeedMultiplier(float);
    bool allowStandSliding(void) const;
    float getPlayerJumpPendingScale(void) const;
    virtual bool canChangeDimensionsUsingPortal(void) const;
    void onPlayerDimensionChanged(Player *, DimensionType, DimensionType);
    virtual void teleportTo(const Vec3 &, bool, int, int, bool);
    virtual void attackAnimation(Actor *, float);
    virtual int getAttackTime(void);
    virtual float _getWalkTargetValue(const BlockPos &);
    int getNoActionTime(void) const;
    void resetNoActionTime(void);
    void onPlayerJump(int);
    bool canPickUpLoot(const ItemStack &) const;
    bool checkTotemDeathProtection(const ActorDamageSource &);
    bool checkForPostHitDamageImmunity(const float, const ActorDamageSource &);
    void setSpawnMethod(const MobSpawnMethod);
    MobSpawnMethod getSpawnMethod(void);
    virtual bool canExistWhenDisallowMob(void) const;
    bool hasBoundOrigin(void) const;
    BlockPos getBoundOrigin(void) const;
    void setBoundOrigin(BlockPos);
    virtual bool canPowerJump(void) const;
    virtual void setEquippedSlot(EquipmentSlot, const ItemStack &);
    static bool shouldApplyWaterGravity(const IActorMovementProxy &);
    bool isPregnant(void) const;
    void setIsPregnant(bool);
    bool isLayingEgg(void) const;
    void setIsLayingEgg(bool);
    virtual void renderDebugServerState(const Options &);
    float getFrictionModifier(void) const;
    void setFrictionModifier(float);
    int getRollCounter(void) const;
    bool isRolling(void) const;
    void setRolling(bool);
    virtual bool useNewAi(void) const;
    virtual void ascendLadder(void);
    virtual void ascendBlockByJumping(void);
    virtual void descendBlockByCrouching(void);
    void setTargetCaptain(ActorUniqueID);
    ActorUniqueID getTargetCaptain(void) const;
    float getJumpMultiplier(void);
    static float getJumpMultiplier(const IMobMovementProxy &);
    virtual JumpPreventionResult getJumpPrevention(void);
    static JumpPreventionResult getJumpPrevention(const IMobMovementProxy &);
    virtual void emitJumpPreventedEvent(const BlockPos &);
    virtual void dropContainer(void);
    void addSpeedModifier(const mce::UUID &, const std::__cxx11::string &, float);
    void removeSpeedModifier(const mce::UUID &);
    virtual bool canFreeze(void) const;
    float getExpectedFallDamage(float, float) const;
    static Mob * tryGetFromEntity(EntityContext &, const bool);
    void _endJump(void);
  protected:
    virtual void updateEntitySpecificMolangVariables(RenderParams &);
    virtual void addAdditionalSaveData(CompoundTag &) const;
    virtual void readAdditionalSaveData(const CompoundTag &, DataLoadHelper &);
    std::unique_ptr<ListTag, std::default_delete<ListTag> > saveMainhand(void) const;
    void loadMainhand(const ListTag *);
    std::unique_ptr<ListTag, std::default_delete<ListTag> > saveOffhand(void) const;
    void loadOffhand(const ListTag *);
    virtual std::unique_ptr<BodyControl, std::default_delete<BodyControl> > initBodyControl(void);
    virtual void causeFallDamage(float, float, ActorDamageSource);
    virtual void _onSizeUpdated(void);
    virtual void outOfWorld(void);
    virtual bool _hurt(const ActorDamageSource &, float, bool, bool);
    virtual void jumpFromGround(void);
    virtual void jumpFromGround(IMobMovementProxy &) const;
    static void _jumpFromGround(IMobMovementProxy &);
    static bool isJumpOnBlockPrevented(const IMobMovementProxy &, const BlockPos &);
    virtual void updateAi(void);
    virtual void newServerAiStep(void);
    virtual void _serverAiMobStep(void);
    virtual void _playStepSound(const BlockPos &, const Block &);
    virtual void dropBags(void);
    void updateAttackAnim(void);
    int getCurrentSwingDuration(void);
    virtual void passengerTick(void);
    bool shouldDropExperience(void) const;
    virtual void tickDeath(void);
    void tickAttributes(void);
    void tickEffects(void);
    void _registerMobAttributes(void);
    void _doSprintParticleEffect(void);
    void _doSoulSpeedParticleEffect(void);
    virtual void _removePassenger(const ActorUniqueID &, bool, bool, bool);
    bool updateGlidingDurability(void);
    virtual void updateGliding(void);
    virtual bool _allowAscendingScaffolding(void) const;
    virtual void _doInitialMove(void);
    void _processSoulSpeed(void);
    virtual AABB _getAdjustedAABBForSpawnCheck(const AABB &, const Vec3 &) const;
  public:
    static void _updateMobTravel(IMobMovementProxy &);
    virtual void tryProcessSoulSpeed(void);
    virtual void tryUpdateAI(void);
  private:
    void _initialize(EntityContext &);
    bool _initHardCodedComponents(void);
    void _updateSprintingState(void);
    void _verifyAttributes(void);
    std::unique_ptr<ListTag, std::default_delete<ListTag> > _saveArmor(void) const;
    void _loadArmor(const ListTag *);
    bool _isFloorDamaging(const BlockPos &);
    static bool _tryApplyingLevitation(const IMobMovementProxy &, Vec3 &);
    bool _shouldDropItem(const ItemStack &, const bool, const bool, const int, const float) const;
    bool _shouldPreserveItemDurability(const ItemStack &, const float) const;
    float _getJumpEffectAddend(void);
    static void _executePowerJump(Mob &, IMobMovementProxy &, float);
    static void _executeDash(Mob &, IMobMovementProxy &);
  public:
    bool hasComponent<SitComponent>(void) const;
    bool hasComponent<FlagComponent<PersistSitFlag> >(void) const;
}

cclass mce::Camera { /* Size=0x1d0 */
  /* 0x0000 */ MatrixStack viewMatrixStack;
  /* 0x0030 */ MatrixStack worldMatrixStack;
  /* 0x0060 */ MatrixStack projectionMatrixStack;
  /* 0x0090 */ glm::mat<4,4,float,0> mInverseViewMatrix;
  /* 0x00d0 */ glm::vec<3,float,0> mRight;
  /* 0x00dc */ glm::vec<3,float,0> mUp;
  /* 0x00e8 */ glm::vec<3,float,0> mForward;
  /* 0x00f4 */ glm::vec<3,float,0> mPosition;
  /* 0x0100 */ float mAspectRatio;
  /* 0x0104 */ float mFov;
  /* 0x0108 */ float mZNear;
  /* 0x010c */ float mZFar;
  /* 0x0110 */ Frustum mFrustum;
  
  void setProjectionParams(const float, const float, const float, const float);
  void setupPerspectiveProjection(const uint32_t, const uint32_t, const float, const float, const float);
  void updateViewMatrixDependencies();
  const glm::vec<3,float,0>& getRightVector() const;
  const glm::vec<3,float,0>& getUpVector() const;
  const glm::vec<3,float,0>& getForwardVector() const;
  const glm::vec<3,float,0>& getPosition() const;
  bool isOrthographic() const;
  glm::mat<4,4,float,0> getModelViewProjectionMatrix() const;
  glm::mat<4,4,float,0> getModelViewMatrix() const;
  const Frustum& getFrustum() const;
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  glm::tvec2<float,0> getPitchLimit() const;
  void resetCameraParam();
  Camera(mce::Camera&);
  Camera(const mce::Camera&);
  Camera();
  ~Camera();
  mce::Camera& operator=(mce::Camera&);
  mce::Camera& operator=(const mce::Camera&);
  void __autoclassinit2(uint64_t);
  void* __vecDelDtor(uint32_t);
};

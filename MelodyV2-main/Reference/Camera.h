
class Camera { /* Size=0x138 */
  /* 0x0000 */ HashedString mId;
  /* 0x0030 */ int32_t mPriority;
  /* 0x0038 */ CameraBlendSettings mBlendInDefault;
  /* 0x0080 */ bool mRenderPlayerModel;
  /* 0x0081 */ bool mShouldRenderFirstPersonObjects;
  /* 0x0088 */ ActorUniqueID mLookTarget;
  /* 0x0090 */ ActorUniqueID mFollowTarget;
  /* 0x0098 */ float mAspectRatio;
  /* 0x009c */ float mFieldOfView;
  /* 0x00a0 */ float mNearPlane;
  /* 0x00a4 */ float mFarPlane;
  /* 0x00a8 */ glm::tquat<float,0> mOrientation;
  /* 0x00b8 */ glm::tvec3<float,0> mPosition;
  /* 0x00c4 */ glm::tvec3<float,0> mScale;
  /* 0x00d0 */ Matrix mPostViewTransform;
  /* 0x0110 */ bool mFacesPlayerFront;
  /* 0x0111 */ bool mPlayerRotateWithCamera;
  /* 0x0114 */ glm::tvec2<float,0> mPlayerRotationOffset;
  /* 0x011c */ glm::tvec3<float,0> mLiquidOffset;
  /* 0x0128 */ float mRideRotationOffset;
  /* 0x012c */ float mPlayerSneakOffset;
  /* 0x0130 */ float mPlayerGlideOffset;
  static const glm::tvec3<float,0> UNIT_RIGHT;
  static const glm::tvec3<float,0> UNIT_UP;
  static const glm::tvec3<float,0> UNIT_FORWARD;
  static const HashedString INVALID_CAMERA_ID;
  
  Camera(const Camera&);
  Camera(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  ~Camera();
  glm::tquat<float,0> getOrientationQuat() const;
  Matrix getOrientationMat() const;
  const Matrix& getPostViewTransform() const;
  Matrix getView() const;
  Matrix getProjection() const;
  glm::tvec3<float,0> getRight() const;
  glm::tvec3<float,0> getUp() const;
  glm::tvec3<float,0> getForward() const;
  float getAspectRatio() const;
  const HashedString& getId() const;
  const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getName() const;
  glm::tvec3<float,0> getEulerAngles() const;
  const glm::tvec3<float,0>& getPosition() const;
  const glm::tvec2<float,0> getPlayerRotation() const;
  const glm::tvec2<float,0> getCameraRotation() const;
  const bool getPlayerRotateWithCamera() const;
  const bool getFacesPlayerFront() const;
  const glm::tvec2<float,0> getPlayerRotationOffset() const;
  glm::tvec3<float,0> getLiquidOffset() const;
  float getRideRotationOffset() const;
  float getPlayerSneakOffset() const;
  float getPlayerGlideOffset() const;
  float getNearClippingPlane() const;
  float getFarClippingPlane() const;
  int32_t getPriority() const;
  void setPriority(int32_t);
  const CameraBlendSettings& getBlendInDefault() const;
  void setBlendInDefault(const CameraBlendSettings&);
  void setRenderPlayerModel(bool);
  bool getRenderPlayerModel() const;
  void setShouldRenderFirstPersonObjects(bool);
  bool getShouldRenderFirstPersonObjects() const;
  void setLookTarget(ActorUniqueID);
  ActorUniqueID getLookTarget() const;
  void setFollowTarget(ActorUniqueID);
  ActorUniqueID getFollowTarget() const;
  float getFieldOfView() const;
  void setFieldOfView(float);
  void setAspectRatio(float);
  void setClippingPlanes(float, float);
  void setOrientation(float, float, float);
  void setOrientation(const Matrix&);
  void setOrientation(const glm::tquat<float,0>&);
  void setPosition(const glm::tvec3<float,0>&);
  void setPostViewTransform(const Matrix&);
  void setPlayerRotationOffset(const glm::tvec2<float,0>&);
  void setPlayerRotateWithCamera(bool);
  void setFacesPlayerFront(bool);
  void setLiquidOffset(const glm::tvec3<float,0>&);
  void setRideRotationOffset(float);
  void setPlayerSneakOffset(float);
  void setPlayerGlideOffset(float);
  void setScale(const glm::tvec3<float,0>&);
  glm::tvec3<float,0> getScale() const;
  void offsetPosition(const glm::tvec3<float,0>&);
  void lookAt(const glm::tvec3<float,0>&, const glm::tvec3<float,0>&);
  void lookAt(const glm::tvec3<float,0>&);
  glm::tvec3<float,0> localToScreenPoint(const glm::tvec3<float,0>&, const glm::tvec4<float,0>&) const;
  glm::tvec3<float,0> screenToLocalPoint(const glm::tvec3<float,0>&, const glm::tvec4<float,0>&) const;
  glm::tvec3<float,0> worldToScreenPoint(const glm::tvec3<float,0>&, const glm::tvec4<float,0>&) const;
  glm::tvec3<float,0> screenToWorldPoint(const glm::tvec3<float,0>&, const glm::tvec4<float,0>&) const;
  Camera& operator=(const Camera&);
  void __autoclassinit2(uint64_t);
  void* __vecDelDtor(uint32_t);
};

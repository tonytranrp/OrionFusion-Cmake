
class IClientInstance { /* Size=0x8 */
  
  virtual ~IClientInstance();
  virtual void onInitMinecraftGame();
  virtual void onDestroyMinecraftGame();
  virtual void init(Core::FilePathManager*, NetworkHandler&, Timer&, Timer&, const gsl::not_null<Bedrock::NonOwnerPointer<Social::IUserManager> >&, int32_t, IGameModuleApp&);
  virtual void initSceneFactory(hbui::ILibrary*, std::unique_ptr<SceneFactory,std::default_delete<SceneFactory> >, std::unique_ptr<hbui::SceneProvider,std::default_delete<hbui::SceneProvider> >);
  virtual void setUiRouter(std::unique_ptr<hbui::Router,std::default_delete<hbui::Router> >);
  virtual void initGraphics();
  virtual void stop();
  virtual void teardown();
  virtual void preShutDown();
  virtual void requestLeaveGame(bool, bool);
  virtual void stopPlayScreen();
  virtual bool isLeaveGameDone() const;
  virtual void setupPlayScreenForLeaveGame();
  virtual void resetPrimaryClient();
  virtual void resetGameSession();
  virtual void tick();
  virtual void frameUpdate(FrameUpdateContext&);
  virtual bool update(bool);
  virtual void endFrame();
  virtual void startSubClientLateJoin(bool, std::unique_ptr<GameModuleClient,std::default_delete<GameModuleClient> >);
  virtual void setupClientGame(std::function<void __cdecl(enum ClientGameSetupResult)>&, bool, std::unique_ptr<GameModuleClient,std::default_delete<GameModuleClient> >);
  virtual BlockSource& getRegion();
  virtual const LocalPlayer* getLocalPlayer() const;
  virtual LocalPlayer* getLocalPlayer();
  virtual Actor* getCameraEntity() const;
  virtual void setCameraEntity(Actor*);
  virtual Actor* getCameraTargetEntity() const;
  virtual void setCameraTargetEntity(Actor*);
  virtual bool isLeavingGame() const;
  virtual bool isDestroyingGame() const;
  virtual bool isShuttingDown() const;
  virtual bool useLowFrequencyUIRender() const;
  virtual bool isSplitScreenActive() const;
  virtual bool isVRClient() const;
  virtual bool isARClient() const;
  virtual bool isARVRClient() const;
  virtual bool isHoloviewerMode() const;
  virtual bool isHoloscreenMode() const;
  virtual bool isLivingroomMode() const;
  virtual bool isExitingLevel() const;
  virtual bool isNotVLRMode() const;
  virtual bool isHoloRealityMode() const;
  virtual bool isRealityFullVRMode() const;
  virtual bool isInBedScreen() const;
  virtual bool isKeyboardEnabled() const;
  virtual bool isVRTransitioning() const;
  virtual bool hasCommands() const;
  virtual bool isScriptingEnabled() const;
  virtual float getHoloviewerScale() const;
  virtual int32_t getSplitScreenCount() const;
  virtual bool isStereoRendering() const;
  virtual bool isPlatformNX() const;
  virtual bool isLocalSplitscreenWith(const ActorUniqueID&) const;
  virtual bool isValidCrossPlatformSkin() const;
  virtual bool isSelectedSkinInitialized() const;
  virtual SplitScreenInfo getSplitScreenInfo() const;
  virtual int32_t getCurrentMaxGUIScaleIndex() const;
  virtual const float& getRealityModeFrameFactor() const;
  virtual void setRealityModeFrameFactor(const float&);
  virtual bool getRealityModeToggleTriggered() const;
  virtual void setRealityModeToggleTriggered(bool);
  virtual bool getHandlingControllerDisconnect();
  virtual void setOpenControllerDisconnectScreen(bool);
  virtual const ClientPlayMode& getClientPlayMode() const;
  virtual void setClientPlayMode(const ClientPlayMode&);
  virtual bool getLivingRoomForCredits() const;
  virtual void setLivingRoomForCredits(bool);
  virtual std::function<void __cdecl(void)> getCreditsCallback();
  virtual void setCreditsCallback(std::function<void __cdecl(void)>);
  virtual void setupTransitionForCredits(std::function<void __cdecl(void)>);
  virtual void refreshScreenSizeData();
  virtual void onScreenSizeChanged(int32_t, int32_t, float);
  virtual void onGuiScaleOffsetChanged();
  virtual void onSafeZoneChanged();
  virtual void quit(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual IMinecraftGame& getMinecraftGame() const;
  virtual IClientInstances& getClientInstances() const;
  virtual Automation::AutomationClient& getAutomationClient() const;
  virtual IMinecraftEventing& getEventing() const;
  virtual IConnectionEventing& getConnectionEventing() const;
  virtual FontHandle getFontHandle() const;
  virtual FontHandle getRuneFontHandle() const;
  virtual FontHandle getUnicodeFontHandle() const;
  virtual std::shared_ptr<GeometryGroup> getGeometryGroup() const;
  virtual Social::MultiplayerServiceManager& getMultiplayerServiceManager() const;
  virtual Level* getLocalServerLevel();
  virtual IResourcePackRepository& getResourcePackRepository() const;
  virtual ResourcePackManager& getResourcePackManager() const;
  virtual PackManifestFactory& getPackManifestFactory();
  virtual const IContentKeyProvider& getKeyProvider();
  virtual const PacksInfoData& getHostSpecifiedPacks() const;
  virtual std::shared_ptr<SkinRepository> getSkinRepository() const;
  virtual SkinRepositoryClientInterface& getSkinRepositoryClientInterface() const;
  virtual persona::PersonaPieceCollectionModel& getPersonaPieceCollectionModel();
  virtual PersonaRepository& getPersonaRepository() const;
  virtual std::shared_ptr<mce::TextureGroup> getTextureGroup() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<mce::TextureGroup> > getStoreCacheTextures() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<MinecraftGraphics> > getMinecraftGraphics() const;
  virtual UIRepository* getUIRepository() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<Social::IUserManager> > getUserManager() const;
  virtual bool wantToQuit() const;
  virtual bool isPrimaryLevelCrossPlatformMultiplayer() const;
  virtual bool isPrimaryLevelMultiplayer() const;
  virtual bool isAdhocEnabled() const;
  virtual void handleResizeScreen(int32_t);
  virtual const std::basic_string<char,std::char_traits<char>,std::allocator<char> > getTitleString(const EmulatedScreenSize&);
  virtual DebugInfoMessageDispatcher& getDebugInfoMessageDispatcher() const;
  virtual DebugInfoPacketHandler& getDebugInfoPacketHandler() const;
  virtual bool isMarketplaceDisabled() const;
  virtual void linkToOffer(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void linkTo3PServerOffers(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void navigateToBrazeScreen(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void navigateToStoreHomeScreen();
  virtual void navigateToCoinPurchaseScreen(int32_t, std::function<void __cdecl(bool)>);
  virtual void navigateToPurchaseOfferScreen(StoreCatalogItem&, StoreNavigationOrigin, const bool);
  virtual void navigateToStoreSeeAllByCreatorScreen(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const bool);
  virtual void navigateToDressingRoomOfferScreen(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void navigateToServersScreen(const bool);
  virtual void navigateToHowToPlayScreen(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void tryPushLeaveGameScreen();
  virtual void tryStartDayOneExperience();
  virtual bool isReadyToRender() const;
  virtual void onDimensionChangedEvent();
  virtual void onGameEventNotification(ui::GameEventNotification);
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getTopScreenName() const;
  virtual void setLeaveGameInProgressAsReadyToContinue();
  virtual void stopDestroying();
  virtual void onClientCreatedLevel(std::pair<std::unique_ptr<Level,std::default_delete<Level> >,OwnerPtrT<EntityRefTraits> >, std::unique_ptr<LocalPlayer,std::default_delete<LocalPlayer> >);
  virtual uint64_t getClientRandomId() const;
  virtual UserAuthentication& getUserAuthentication();
  virtual std::weak_ptr<UserAuthentication> getWeakUserAuthentication();
  virtual void registerToUserManager(const gsl::not_null<Bedrock::NonOwnerPointer<Social::IUserManager> >&, int32_t);
  virtual void resumeWithUserManager(const gsl::not_null<Bedrock::NonOwnerPointer<Social::IUserManager> >&, int32_t);
  virtual void createUserAuthentication(uint64_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void createUserAuthentication(std::basic_string<char,std::char_traits<char>,std::allocator<char> >);
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getPlatformId() const;
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getPlatformOnlineId() const;
  virtual bool isHoloCursorNeeded() const;
  virtual bool useController() const;
  virtual bool useTouchscreen() const;
  virtual bool getMouseGrabbed() const;
  virtual bool currentInputModeIsGamePadOrMotionController() const;
  virtual bool currentInputModeIsMouseAndKeyboard() const;
  virtual bool getForceMonoscopic() const;
  virtual bool allowPicking() const;
  virtual bool isShowingMenu() const;
  virtual bool isShowingProgressScreen() const;
  virtual bool isShowingWorldProgressScreen() const;
  virtual bool isShowingDeathScreen() const;
  virtual bool isScreenReplaceable() const;
  virtual bool isInGame() const;
  virtual bool isWorldActive() const;
  virtual bool isInRealm();
  virtual bool readyForShutdown() const;
  virtual bool isPrimaryClient() const;
  virtual bool isEduMode() const;
  virtual bool isGamepadCursorEnabled() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<Minecraft const > > getServerData() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<Minecraft> > getServerData();
  virtual const MultiPlayerLevel* getLevel() const;
  virtual MultiPlayerLevel* getLevel();
  virtual bool isPreGame() const;
  virtual bool isInMultiplayerGame() const;
  virtual bool isMultiPlayerClient() const;
  virtual const Options& getOptions() const;
  virtual Options& getOptions();
  virtual const std::shared_ptr<Options const > getOptionsPtr() const;
  virtual std::shared_ptr<Options> getOptionsPtr();
  virtual const std::shared_ptr<Social::User const > getUser() const;
  virtual std::shared_ptr<Social::User> getUser();
  virtual GameRenderer& getGameRenderer() const;
  virtual HolosceneRenderer* getHolosceneRenderer() const;
  virtual LevelRenderer* getLevelRenderer() const;
  virtual LevelRendererCameraProxy* getLevelRendererCameraProxy() const;
  virtual const CameraManager* getCameraManager() const;
  virtual CameraManager* getCameraManager();
  virtual LightTexture* getLightTexture();
  virtual void setupLevelRendering(Level&, Actor&);
  virtual const mce::ViewportInfo& getViewportInfo() const;
  virtual void setViewportInfo(const mce::ViewportInfo&);
  virtual Vec2 getNormalizedViewportSize() const;
  virtual void updateChunkRadius();
  virtual void setUITexture(mce::Texture*);
  virtual mce::Texture* getUITexture();
  virtual void setLevelTexture(mce::Texture*);
  virtual mce::Texture* getLevelTexture();
  virtual void setUICursorTexture(mce::TexturePtr);
  virtual mce::TexturePtr getUICursorTexture() const;
  virtual mce::Camera& getCamera();
  virtual ShaderColor& getShaderColor();
  virtual ShaderColor& getDarkShaderColor();
  virtual void clearGraphicsCache();
  virtual void getNormalizedUICursorTransform(MatrixStack::MatrixStackRef&, float);
  virtual bool shouldRenderUICursor() const;
  virtual bool getRenderPlayerModel() const;
  virtual bool getCameraFacesPlayerFront() const;
  virtual ChunkDisplay* getChunkCacheDisplay() const;
  virtual BiomeMapDisplay* getBiomeMapDisplay() const;
  virtual float getGuiScale() const;
  virtual const Option& getGuiScaleOption() const;
  virtual int32_t getGuiScaleOffset() const;
  virtual void setGuiScaleOffset(int32_t);
  virtual void renderImGui(ScreenContext&, bool);
  virtual const GuiData& getGuiData() const;
  virtual GuiData& getGuiData();
  virtual GuidedFlowManager& getGuidedFlowManager();
  virtual const PixelCalc& getDpadScale() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<DateManager const > > getDateManager() const;
  virtual void addOverrideHoursToDateTime(const uint32_t);
  virtual ToastManager& getToastManager();
  virtual const AbstractScene* getTopScene() const;
  virtual AbstractScene* getTopScene();
  virtual const AbstractScene* getActiveScene() const;
  virtual AbstractScene* getActiveScene();
  virtual SceneFactory& getSceneFactory() const;
  virtual SceneStack& getClientSceneStack();
  virtual const SceneStack& getClientSceneStack() const;
  virtual hbui::Router& getClientUIRouter() const;
  virtual const SceneStack& getMainSceneStack() const;
  virtual SceneStack& getMainSceneStack();
  virtual SceneStack& getCurrentSceneStack();
  virtual const SceneStack& getCurrentSceneStack() const;
  virtual const hbui::Router& getCurrentUIRouter() const;
  virtual hbui::Router& getCurrentUIRouter();
  virtual hbui::ITelemetry& getHBUITelemetry();
  virtual SceneStack& prepareSceneFor(const ui::SceneType, std::function<std::shared_ptr<AbstractScene> __cdecl(void)>);
  virtual CachedScenes& getCachedScenes();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getScreenName() const;
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > getScreenTelemetry() const;
  virtual ui::SceneType getTopSceneType() const;
  virtual MobEffectsLayout& getMobEffectsLayout();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > emoticonifyText(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > emoticonifyText(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  virtual void onMobEffectsChange();
  virtual void setUISizeAndScale(int32_t, int32_t, float);
  virtual void forEachVisibleScreen(std::function<void __cdecl(AbstractScene &)>, bool);
  virtual void forEachScreen(std::function<bool __cdecl(AbstractScene &)>, bool);
  virtual void forEachScreenConst(std::function<bool __cdecl(AbstractScene const &)>, bool) const;
  virtual bool updateSceneStack();
  virtual void forEachAlwaysAcceptInputScreen(std::function<void __cdecl(AbstractScene &)>, const AbstractScene*);
  virtual void forEachAlwaysAcceptInputScreenWithTop(std::function<void __cdecl(AbstractScene &)>);
  virtual void showPlayerProfile(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, mce::UUID, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual InputMode getCurrentInputMode() const;
  virtual bool isTouchGameplayAllowed() const;
  virtual Bedrock::NonOwnerPointer<MinecraftInputHandler> getMinecraftInput() const;
  virtual void setHoloInput(std::unique_ptr<HolographicPlatform,std::default_delete<HolographicPlatform> >);
  virtual HolographicPlatform& getHoloInput() const;
  virtual VoiceSystem& getVoiceSystem() const;
  virtual KeyboardManager& getKeyboardManager();
  virtual void setVoiceSystem(std::unique_ptr<VoiceSystem,std::default_delete<VoiceSystem> >);
  virtual void setLastPointerLocation(float, float, float);
  virtual Vec3& getLastPointerLocation();
  virtual bool shouldUseLastPointerLocationOnFocusChange();
  virtual void adjustGazeCursorByMouse(float, float);
  virtual bool currentScreenShouldStealMouse();
  virtual BuildActionIntention& getInProgressBAI() const;
  virtual bool newDictationDataAvailable() const;
  virtual void clearDictationDataAvailable();
  virtual const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& getDictationText() const;
  virtual PacketSender& getPacketSender();
  virtual const NetworkHandler& getClientNetworkSystem() const;
  virtual NetworkHandler& getClientNetworkSystem();
  virtual void setMoveTurnInput(std::unique_ptr<MoveInputHandler,std::default_delete<MoveInputHandler> >);
  virtual MoveInputHandler& getMoveTurnInput();
  virtual void setupPersistentControls(InputMode);
  virtual void resetPlayerMovement();
  virtual void suspendPredictedMovement();
  virtual void onClientInputInitComplete();
  virtual void setClientInputHandler(std::unique_ptr<ClientInputHandler,std::default_delete<ClientInputHandler> >);
  virtual ClientInputHandler* getInput() const;
  virtual int32_t getControllerId() const;
  virtual bool hasConnectedController() const;
  virtual unsigned char getClientSubId() const;
  virtual void setSuspendInput(bool);
  virtual void setDisableInput(bool);
  virtual void grabMouse();
  virtual void releaseMouse();
  virtual void refocusMouse(bool);
  virtual void resetBai(int32_t);
  virtual void clearInProgressBAI();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<SoundEngine> > getSoundEngine() const;
  virtual void play(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const Vec3&, float, float);
  virtual void playUI(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, float);
  virtual void muteAudio();
  virtual void unMuteAudio();
  virtual void fadeOutMusic() const;
  virtual TaskGroup& getTaskGroup();
  virtual void onFullVanillaPackOnStack();
  virtual bool isFullVanillaPackOnStack() const;
  virtual void onPlayerLoaded(Player&);
  virtual void setClientGameMode(GameType);
  virtual void resetToDefaultGameMode();
  virtual IGameConnectionListener& getGameConnectionListener();
  virtual void connectToThirdPartyServer(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual void startExternalNetworkWorld(Social::GameConnectionInfo, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  virtual bool checkForPiracy();
  virtual void updateChatFilterStatus();
  virtual void updateControllerHandling();
  virtual void setBehaviorCommandCallback(std::function<void __cdecl(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,enum BehaviorStatus)>);
  virtual void setBehaviorCommandStatus(std::basic_string<char,std::char_traits<char>,std::allocator<char> >, BehaviorStatus);
  virtual void setConnectGamepadScreenActive(bool);
  virtual Core::PathBuffer<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > requestScreenshot(ScreenshotOptions&);
  virtual DevConsoleLogger& getDevConsoleLogger() const;
  virtual const AbstractClientInstanceTestInterface& getTestInterface() const;
  virtual AbstractClientInstanceTestInterface& getTestInterface();
  virtual std::shared_ptr<FileDataRequest> requestImageFromUrl(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<void __cdecl(Core::Path const &)>);
  virtual void initializeRenderResources();
  virtual void postInitRenderResources();
  virtual void onAppSuspended();
  virtual void onActiveResourcePacksChanged(const std::shared_ptr<ActorResourceDefinitionGroup>);
  virtual void reloadEntityRenderers(const std::shared_ptr<ActorResourceDefinitionGroup>);
  virtual BlockTessellator& getBlockTessellator();
  virtual BlockActorRenderDispatcher& getBlockEntityRenderDispatcher();
  virtual std::shared_ptr<ActorRenderDispatcher> getEntityRenderDispatcher();
  virtual ActorBlockRenderer& getEntityBlockRenderer();
  virtual ItemInHandRenderer* getItemInHandRenderer();
  virtual ItemRenderer* getItemRenderer();
  virtual std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& getSentMessageHistory();
  virtual std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& getDevConsoleMessageHistory();
  virtual const UIProfanityContext& getUIProfanityContext() const;
  virtual void initTTSClient(std::shared_ptr<TextToSpeechClient>);
  virtual std::shared_ptr<TextToSpeechClient const > getTTSClient() const;
  virtual std::shared_ptr<TextToSpeechClient> getTTSClient();
  virtual std::shared_ptr<ITTSEventManager> getTTSEventManager();
  virtual void addTTSMessage(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, ProfanityFilterContext, bool, bool, bool);
  virtual void initCommands();
  virtual uint32_t getUserId() const;
  virtual double getServerConnectionTime() const;
  virtual const ClientHMDState& getHMDState() const;
  virtual ClientHMDState& getHMDState();
  virtual void setServerPingTime(int32_t);
  virtual int32_t getServerPingTime() const;
  virtual void setDefaultPlayscreenTab(PlayScreenDefaultTab);
  virtual void setClientInstanceState(const ClientInstanceState&);
  virtual void setUIEventCoordinator(std::unique_ptr<UIEventCoordinator,std::default_delete<UIEventCoordinator> >&);
  virtual gsl::not_null<Bedrock::NonOwnerPointer<UIEventCoordinator> > getUIEventCoordinator();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<ClientInstanceEventCoordinator> > getEventCoordinator();
  virtual void computeScreenCoordsFromScreenNormCoords(float, float, int16_t&, int16_t&);
  virtual std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > > getNoBlockBreakUntil();
  virtual void setNoBlockBreakUntil(std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >);
  virtual void setDictation(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  virtual void setNewDictationString(bool);
  virtual GameModuleClient* getGameModule();
  virtual GameCallbacks& getGameCallbacks();
  virtual Core::StorageAreaStateListener& getStorageAreaStateListener();
  virtual MinecraftClientScriptEngine* getScriptEngine();
  virtual void sendClientEnteredLevel();
  virtual HitDetectSystem* getHitDetectSystem();
  virtual bool isPlaying() const;
  virtual ClientInstanceState getClientInstanceState() const;
  virtual LatencyGraphDisplay* getLatencyGraphDisplay() const;
  virtual const PlayerCapabilities::IClientController& getClientCapabilities() const;
  virtual std::weak_ptr<IClientInstance> getWeakPtrToThis();
  virtual const ClientRequirementVerifier& getClientRequirementVerifier() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<FogDefinitionRegistry> > getFogDefinitionRegistry();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<FogDefinitionRegistry const > > getFogDefinitionRegistry() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<FogManager> > getFogManager();
  virtual gsl::not_null<Bedrock::NonOwnerPointer<FogManager const > > getFogManager() const;
  virtual gsl::not_null<Bedrock::NonOwnerPointer<ScreenLoadTimeTracker> > getScreenLoadTimeTracker();
  IClientInstance(const IClientInstance&);
  IClientInstance();
  IClientInstance& operator=(const IClientInstance&);
  void __local_vftable_ctor_closure();
  virtual void* __vecDelDtor(uint32_t);
};

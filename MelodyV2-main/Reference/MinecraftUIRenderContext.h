
class MinecraftUIRenderContext : public UIRenderContext { /* Size=0x110 */
  /* 0x0000: fields for UIRenderContext */
  /* 0x0008 */ IClientInstance& mClient;
  /* 0x0010 */ ScreenContext& mScreenContext;
  /* 0x0018 */ MinecraftUIMeasureStrategy mMeasureStrategy;
  /* 0x0028 */ float mTextAlpha;
  /* 0x0030 */ UIRepository& mUIRepository;
  /* 0x0038 */ mce::TextureGroup& mTextures;
  /* 0x0040 */ mce::TextureGroup& mStoreCacheTextures;
  /* 0x0048 */ std::vector<MinecraftUIRenderContext::TextItem,std::allocator<MinecraftUIRenderContext::TextItem> > mTextToDraw;
  /* 0x0060 */ std::vector<MinecraftUIRenderContext::ImageItem,std::allocator<MinecraftUIRenderContext::ImageItem> > mImagesToDraw;
  /* 0x0078 */ std::vector<std::unique_ptr<MinecraftUIRenderContext::PersistentMeshItem,std::default_delete<MinecraftUIRenderContext::PersistentMeshItem> >,std::allocator<std::unique_ptr<MinecraftUIRenderContext::PersistentMeshItem,std::default_delete<MinecraftUIRenderContext::PersistentMeshItem> > > > mPersistentMeshes;
  /* 0x0090 */ unsigned char mStencilRef;
  /* 0x0094 */ int32_t mCurrentPersistentMeshItemIdx;
  /* 0x0098 */ FontHandle mDebugTextFontHandle;
  /* 0x00c8 */ glm::tmat3x3<float,0> mCurrentTransformMatrix;
  /* 0x00f0 */ const UIScene& mCurrentScene;
  /* 0x00f8 */ std::optional<glm::tvec4<float,0> > mSavedOriginalClippingRectangle;
  
  MinecraftUIRenderContext(const MinecraftUIRenderContext&);
  MinecraftUIRenderContext(IClientInstance&, ScreenContext&, const UIScene&);
  virtual ~MinecraftUIRenderContext();
  virtual int32_t getLineLength(Font&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, float, bool) const;
  virtual float getTextAlpha() const;
  virtual void setTextAlpha(float);
  virtual void drawDebugText(const RectangleArea&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const mce::Color&, float, ui::TextAlignment, const TextMeasureData&, const CaretMeasureData&);
  virtual void drawText(Font&, const RectangleArea&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const mce::Color&, float, const mce::Color&, const glm::tvec2<float,0>&, ui::TextAlignment, const TextMeasureData&, const CaretMeasureData&);
  virtual void flushText(float);
  virtual void flushImagesUVZeroOneBase(const mce::Color&, float, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual bool hasTexture(const ResourceLocation&) const;
  virtual void drawImage(const mce::TexturePtr&, const glm::tvec2<float,0>&, const glm::tvec2<float,0>&, const glm::tvec2<float,0>&, const glm::tvec2<float,0>&, int32_t);
  virtual void drawNineslice(const mce::TexturePtr&, const NinesliceInfo&, int32_t);
  virtual void flushImages(const mce::Color&, float, const HashedString&);
  virtual mce::TexturePtr getTexture(const ResourceLocation&, bool) const;
  virtual mce::TexturePtr getZippedTexture(const Core::Path&, const ResourceLocation&, bool) const;
  virtual bool unloadTexture(const ResourceLocation&);
  virtual UITextureInfoPtr getUITextureInfo(const ResourceLocation&, bool) const;
  virtual void touchTexture(const ResourceLocation&);
  virtual void beginSharedMeshBatch(ComponentRenderBatch&);
  virtual void endSharedMeshBatch(ComponentRenderBatch&);
  virtual void drawRectangle(const RectangleArea&, const mce::Color&, float, int32_t);
  virtual void fillRectangle(const RectangleArea&, const mce::Color&, float);
  virtual void increaseStencilRef();
  virtual void decreaseStencilRef();
  virtual void resetStencilRef();
  virtual void fillRectangleStencil(const RectangleArea&);
  virtual void enableScissorTest(const RectangleArea&);
  virtual void disableScissorTest();
  virtual void setClippingRectangle(const RectangleArea&);
  virtual void setFullClippingRectangle();
  virtual void saveCurrentClippingRectangle();
  virtual void restoreSavedClippingRectangle();
  virtual RectangleArea getFullClippingRectangle() const;
  virtual void cleanup();
  virtual void removePersistentMeshes();
  virtual UIMeasureStrategy& getMeasureStrategy();
  const ScreenContext& getScreenContext() const;
  ScreenContext& getScreenContext();
  virtual void snapImageSizeToGrid(glm::tvec2<float,0>&) const;
  virtual void snapImagePositionToGrid(glm::tvec2<float,0>&) const;
  virtual void notifyImageEstimate(uint64_t);
  virtual bool updateCustom(gsl::not_null<CustomRenderComponent *>);
  virtual void renderCustom(gsl::not_null<CustomRenderComponent *>, int32_t, RectangleArea&);
  void _splitTextItemText(const MinecraftUIRenderContext::TextItem&, std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >&) const;
  float _getTextAlignmentPosition(const MinecraftUIRenderContext::TextItem&) const;
  float _getTextAlignmentOffset(const MinecraftUIRenderContext::TextItem&, float) const;
  void _renderTextAligned(const MinecraftUIRenderContext::TextItem&, float, float);
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};


class AABB { /* Size=0x1c */
  /* 0x0000 */ Vec3 min;
  /* 0x000c */ Vec3 max;
  /* 0x0018 */ bool empty;
  static const AABB EMPTY;
  static const AABB BLOCK_SHAPE;
  
  bool operator==(const AABB&) const;
  bool operator!=(const AABB&) const;
  AABB(const Vec3&, float);
  AABB(const Vec3&, const Vec3&);
  AABB(float, float, float, float, float, float);
  AABB();
  void set(float, float, float, float, float, float);
  void set(const AABB&);
  AABB& set(const Vec3&, const Vec3&);
  AABB expanded(const Vec3&) const;
  AABB& expand(const Vec3&);
  AABB translated(const Vec3&) const;
  AABB merge(const AABB&) const;
  AABB grow(const Vec3&) const;
  AABB cloneMove(const Vec3&) const;
  float clipXCollide(const AABB&, float, bool) const;
  float clipYCollide(const AABB&, float, bool) const;
  float clipZCollide(const AABB&, float, bool) const;
  Vec3 clipCollide(const AABB&, const Vec3&, bool, float*) const;
  bool intersects(const Vec3&, const Vec3&) const;
  bool intersects(const AABB&) const;
  bool intersectsInner(const AABB&) const;
  bool intersectSegment(const Vec3&, const Vec3&, Vec3&, Vec3&) const;
  Vec3 getSmallestAxisOut(const AABB&) const;
  Vec3 axisInside(const AABB&, Vec3) const;
  float distanceTo(const AABB&) const;
  float distanceTo(const Vec3&) const;
  float distanceToSqr(const AABB&) const;
  float distanceToSqr(const Vec3&) const;
  AABB& move(const Vec3&);
  AABB& move(float, float, float);
  AABB& centerAt(const Vec3&);
  AABB resize(const Vec3&) const;
  AABB transform(const Matrix&) const;
  bool contains(const AABB&) const;
  bool contains(const Vec3&) const;
  float getSize() const;
  float getVolume() const;
  bool isNan() const;
  AABB shrink(const Vec3&) const;
  AABB flooredCopy(float, float) const;
  AABB flooredCeiledCopy() const;
  HitResult clip(const Vec3&, const Vec3&) const;
  bool isEmpty() const;
  bool isValid() const;
  Vec3 getCenter() const;
  Vec3 getBounds() const;
  bool containsX(const Vec3&) const;
  bool containsY(const Vec3&) const;
  bool containsZ(const Vec3&) const;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > toString() const;
  float _clipAxisCollide(const AABB&, float, int32_t, bool) const;
  AABB& operator=(AABB&);
  AABB& operator=(const AABB&);
  
  static AABB fromIntersection(const AABB&, const AABB&);
  static AABB fromPoints(const Vec3&, const Vec3&);
  static AABB fromPoints(const std::initializer_list<Vec3>&);
};

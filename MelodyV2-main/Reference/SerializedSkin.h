type = class SerializedSkin {
  private:
    std::__cxx11::string mId;
    std::__cxx11::string mPlayFabId;
    std::__cxx11::string mFullId;
    std::__cxx11::string mResourcePatch;
    std::__cxx11::string mDefaultGeometryName;
    mce::Image mSkinImage;
    mce::Image mCapeImage;
    std::vector<AnimatedImageData, std::allocator<AnimatedImageData> > mSkinAnimatedImages;
    Json::Value mGeometryData;
    SemVersion mGeometryDataEngineVersion;
    Json::Value mGeometryDataMutable;
    std::__cxx11::string mAnimationData;
    std::__cxx11::string mCapeId;
    std::vector<SerializedPersonaPieceHandle, std::allocator<SerializedPersonaPieceHandle> > mPersonaPieces;
    persona::ArmSize::Type mArmSizeType;
    std::unordered_map<persona::PieceType, TintMapColor, std::hash<persona::PieceType>, std::equal_to<persona::PieceType>, std::allocator<std::pair<persona::PieceType const, TintMapColor> > > mPieceTintColors;
    Color mSkinColor;
    TrustedSkinFlag mIsTrustedSkin;
    bool mIsPremium;
    bool mIsPersona;
    bool mIsPersonaCapeOnClassicSkin;
    bool mIsPrimaryUser;

  public:
    SerializedSkin(void);
    SerializedSkin(const SerializedSkin &);
    SerializedSkin(SerializedSkin &&);
    SerializedSkin(const ConnectionRequest &);
    SerializedSkin(const SubClientConnectionRequest &);
    SerializedSkin(const std::__cxx11::string &, const std::__cxx11::string &, const std::__cxx11::string &, const mce::Image &, const uint16_t &, const uint16_t &, const mce::Image &, const uint16_t &, const uint16_t &, Json::Value &&, const SemVersion &, const std::__cxx11::string &, const std::__cxx11::string &, bool, bool, bool, bool, const bool);
    SerializedSkin & operator=(const SerializedSkin &);
    static SerializedSkin createTrustedDefaultSerializedSkin(void);
    bool read(ReadOnlyBinaryStream &);
    void write(BinaryStream &) const;
    void setGeometryData(const Json::Value &, const SemVersion &);
    void setPersonaAppearanceData(const persona::ArmSize::Type &, const Color &, const std::vector<SerializedPersonaPieceHandle, std::allocator<SerializedPersonaPieceHandle> >, const std::unordered_map<persona::PieceType, TintMapColor, std::hash<persona::PieceType>, std::equal_to<persona::PieceType>, std::allocator<std::pair<persona::PieceType const, TintMapColor> > > &);
    const std::__cxx11::string & getName(void) const;
    const std::__cxx11::string & getPlayFabId(void) const;
    const std::__cxx11::string & getFullId(void) const;
    void setPlayFabId(const std::__cxx11::string &);
    void setAnimatedImageData(const std::vector<AnimatedImageData, std::allocator<AnimatedImageData> > &);
    const std::__cxx11::string & getResourcePatch(void) const;
    void setResourcePatch(const std::__cxx11::string &);
    const std::__cxx11::string & getDefaultGeometryName(void) const;
    mce::Image & getImageData(void);
    const mce::Image & getImageData(void) const;
    mce::Image & getCapeImageData(void);
    const mce::Image & getCapeImageData(void) const;
    mce::Image & getImageDataMutable(void);
    std::vector<AnimatedImageData, std::allocator<AnimatedImageData> > & getAnimatedImageData(void);
    const std::vector<AnimatedImageData, std::allocator<AnimatedImageData> > & getAnimatedImageData(void) const;
    float getAnimationFrames(persona::AnimatedTextureType) const;
    bool useBlinkingAnimation(void) const;
    const Json::Value & getGeometryData(void) const;
    const SemVersion & getGeometryDataEngineVersion(void) const;
    Json::Value & getGeometryDataMutable(void) const;
    const std::vector<SerializedPersonaPieceHandle, std::allocator<SerializedPersonaPieceHandle> > & getPersonaPieces(void) const;
    const std::unordered_map<persona::PieceType, TintMapColor, std::hash<persona::PieceType>, std::equal_to<persona::PieceType>, std::allocator<std::pair<persona::PieceType const, TintMapColor> > > & getPieceTintColors(void) const;
    const persona::ArmSize::Type & getArmSize(void) const;
    std::__cxx11::string getArmSizeAsString(void) const;
    void setArmSizeFromString(const std::__cxx11::string &);
    const Color & getSkinColor(void) const;
    std::__cxx11::string getGeometryDataStr(void) const;
    const std::__cxx11::string & getAnimationData(void) const;
    bool getIsPremium(void) const;
    bool getIsPersona(void) const;
    bool getIsPersonaCapeOnClassicSkin(void) const;
    void setIsPersonaCapeOnClassicSkin(bool);
    void setImageData(const mce::Image *);
    void setCapeImageData(const mce::Image *);
    void setCapeId(const std::__cxx11::string &);
    bool isTrustedSkin(void) const;
    void setIsTrustedSkin(bool);
    bool isPrimaryUser(void) const;
    void setIsPrimaryUser(const bool);
    void updateGeometryName(void);
    bool isValid(void) const;
    static bool isSkinDisabled(const SerializedSkin &, const LevelData &);
}

type = class ActorDefinition {
  public:
    ActorDefinitionDescriptor mDescription;
    IdentifierDescription mIdentifier;
    RuntimeIdentifierDescription mRuntimeIdentifier;
    IsSpawnableDescription mIsSpawnable;
    IsSummonableDescription mIsSummonable;
    AnimationsDescription mAnimationsDescription;
    AnimationScriptsDescription mAnimationScriptsDescription;
    ActorPropertiesDescription mActorPropertiesDescription;
    ActorAliasDescription mActorAliasDescription;
    std::vector<ActorDefinitionAttribute, std::allocator<ActorDefinitionAttribute> > mAttributes;
    std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ActorDefinitionEvent, std::hash<std::__cxx11::string>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, ActorDefinitionEvent> > > mEventHandlers;
    std::vector<std::shared_ptr<ActorPermutation>, std::allocator<std::shared_ptr<ActorPermutation> > > mPermutations;
    std::shared_ptr<CommonResourceDefinitionMap> mCommonResourceDefinitionMap;
    std::__cxx11::string mRelativeResourceFilepath;
    CurrentCmdVersion mCommandVersion;
    DynamicPropertiesDefinition mDynamicPropertiesDefinition;
    AttackDescription mAttack;
    MobEffectChangeDescription mMobEffects;
    AmphibiousMoveControlDescription mAmphibiousMoveControl;
    BehaviorTreeDescription mBehavior;
    BreakBlocksDescription mBreakBlocks;
    BreakDoorAnnotationDescription mBreakDoorAnnotation;
    BucketableDescription mBucketable;
    CommandBlockDescription mCommandBlock;
    ContainerDescription mContainer;
    DwellerDescription mDweller;
    GenericMoveControlDescription mGenericMoveControl;
    GlideMoveControlDescription mGlideMoveControl;
    HideDescription mHide;
    IllagerBeastBlockedDescription mIllagerBeastBlocked;
    ManagedWanderingTraderDescription mManagedWanderingTrader;
    MoveControlBasicDescription mMoveControl;
    MoveControlDolphinDescription mDolphinSwimControl;
    MoveControlFlyDescription mFlyControl;
    MoveControlSkipDescription mHopControl;
    MoveControlHoverDescription mHoverControl;
    MoveControlSwayDescription mSwimControl;
    NavigationClimbDescription mWallClimberNavigation;
    NavigationFloatDescription mFloatNavigation;
    NavigationFlyDescription mFlyingNavigation;
    NavigationHoverDescription mHoverNavigation;
    NavigationGenericDescription mGenericNavigation;
    NavigationSwimDescription mWaterboundNavigation;
    NavigationWalkDescription mNavigation;
    PersistentDescription mPersistent;
    PreferredPathDescription mPreferredPath;
    ProjectileDescription mProjectile;
    PushableDescription mPushable;
    RaidTriggerDescription mRaidTrigger;
    SlimeMoveControlDescription mSlimeMoveControl;
    StrengthDescription mStrength;
    TrailDescription mTrail;
    TeleportDescription mTeleport;
    TickWorldDescription mTickWorld;
    TradeResupplyDescription mTradeResupply;
    TrustDescription mTrust;
    EconomyTradeableDescription mEconomyTradeable;
    TransformationDescription mTransformation;
    WaterMovementDescription mWaterMovement;
    DynamicJumpControlDescription mDynamicJumpControl;
    JumpControlDescription mJumpControl;
    OpenDoorAnnotationDescription mOpenDoorAnnotation;
    TripodCameraDescription mTripodCamera;

    ActorDefinition(const std::__cxx11::string &);
    void parse(DeserializeDataParams, ActorDefinitionDescriptor &, ActorFactory &, LogArea);
    void parseEntityDescription(DeserializeDataParams);
    void parseAttributes(DeserializeDataParams, ActorDefinitionDescriptor &);
    void parseEvents(const Json::Value &, const SemVersion &, const SemVersion &, ActorEventResponseFactory *);
    void parsePermutations(Json::Value &, const SemVersion &, const SemVersion &, ActorFactory &);
    bool validatePermutationJson(Json::Value &);
    const DefinitionInstanceGroup & getDefinitionGroup(void) const;
    const DefinitionInstanceGroup & getGoalDefinitionGroup(void);
}

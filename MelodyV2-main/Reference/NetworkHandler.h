
class NetworkHandler : public Social::IGameConnectionInfoProvider, private RakNetInstance::ConnectionCallbacks, private RakPeerHelper::IPSupportInterface, private LocalConnector::ConnectionCallbacks, public NetworkSuspendResumeListener { /* Size=0x2f8 */
  /* 0x0000: fields for Social::IGameConnectionInfoProvider */
  /* 0x0008: fields for RakNetInstance::ConnectionCallbacks */
  /* 0x0010: fields for RakPeerHelper::IPSupportInterface */
  /* 0x0018: fields for LocalConnector::ConnectionCallbacks */
  /* 0x0020: fields for NetworkSuspendResumeListener */
  /* 0x0030 */ std::unique_ptr<RakNetInstance,std::default_delete<RakNetInstance> > mRakNetInstance;
  /* 0x0038 */ std::unique_ptr<LocalConnector,std::default_delete<LocalConnector> > mLocalConnector;
  /* 0x0040 */ std::unique_ptr<RakNetServerLocator,std::default_delete<RakNetServerLocator> > mRakNetServerLocator;
  /* 0x0048 */ std::unique_ptr<UPNPInterface,std::default_delete<UPNPInterface> > mUPnPInterface;
  /* 0x0050 */ bool mConnectionDelayErase;
  /* 0x0058 */ std::recursive_mutex mConnectionsMutex;
  /* 0x00a8 */ std::vector<std::unique_ptr<NetworkHandler::Connection,std::default_delete<NetworkHandler::Connection> >,std::allocator<std::unique_ptr<NetworkHandler::Connection,std::default_delete<NetworkHandler::Connection> > > > mConnections;
  /* 0x00c0 */ std::shared_mutex mSendStreamMutex;
  /* 0x00c8 */ std::unordered_map<NetworkIdentifier,NetworkHandler::Connection *,std::hash<NetworkIdentifier>,std::equal_to<NetworkIdentifier>,std::allocator<std::pair<NetworkIdentifier const ,NetworkHandler::Connection *> > > mConnectionMap;
  /* 0x0108 */ uint64_t mCurrentConnection;
  /* 0x0110 */ std::shared_ptr<Bedrock::Threading::IAsyncResult<void> > mReceiveTask;
  /* 0x0120 */ std::unique_ptr<TaskGroup,std::default_delete<TaskGroup> > mReceiveTaskGroup;
  /* 0x0128 */ PacketObserver* mPacketObserver;
  /* 0x0130 */ Scheduler& mMainThread;
  /* 0x0138 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mReceiveBuffer;
  /* 0x0158 */ NetworkIdentifier mHostingPlayerId;
  /* 0x01f0 */ unsigned char mHostingPlayerSubId;
  /* 0x01f8 */ std::basic_string<char,std::char_traits<char>,std::allocator<char> > mSendBuffer;
  /* 0x0218 */ BinaryStream mSendStream;
  /* 0x0280 */ std::unique_ptr<ResourcePackTransmissionManager,std::default_delete<ResourcePackTransmissionManager> > mResourcePackTransmissionManager;
  /* 0x0288 */ std::unique_ptr<NetworkHandler::IncomingPacketQueue,std::default_delete<NetworkHandler::IncomingPacketQueue> > mIncomingPackets[4];
  /* 0x02a8 */ bool mUseIPv6Only;
  /* 0x02aa */ uint16_t mDefaultGamePort;
  /* 0x02ac */ uint16_t mDefaultGamePortv6;
  /* 0x02ae */ bool mUseLocalConnector;
  /* 0x02af */ bool mIsNetSafeAndFast;
  /* 0x02b0 */ std::shared_ptr<NetworkHookAdapter> mHookAdapter;
  /* 0x02c0 */ std::shared_ptr<NetworkHookAdapter> mBackupHookAdapter;
  /* 0x02d0 */ bool mIsNetWorkGame;
  /* 0x02d1 */ bool mIsScriptHandler;
  /* 0x02d8 */ std::unique_ptr<NetworkPacketEventCoordinator,std::default_delete<NetworkPacketEventCoordinator> > mPacketEventCoordinator;
  /* 0x02e0 */ std::unique_ptr<NetworkStatistics,std::default_delete<NetworkStatistics> > mNetworkStatistics;
  /* 0x02e8 */ std::unique_ptr<PacketViolationHandler,std::default_delete<PacketViolationHandler> > mPacketViolationHandler;
  /* 0x02f0 */ uint16_t mCompressionThreshold;
  
  NetworkHandler(Scheduler&, NetworkHandler::NetworkStatisticsConfig, bool, bool);
  virtual ~NetworkHandler();
  void setPacketObserver(PacketObserver*);
  void registerNetworkPacketEventListener(NetworkPacketEventListener&);
  void unregisterNetworkPacketEventListener(NetworkPacketEventListener&);
  bool host(const ConnectionDefinition&);
  bool connect(Social::GameConnectionInfo, Social::GameConnectionInfo);
  void disconnect();
  void update(const std::vector<Player *,std::allocator<Player *> >*);
  void runEvents(bool);
  void registerClientInstance(NetEventCallback&, unsigned char);
  void registerServerInstance(NetEventCallback&);
  void unregisterClientOrServerInstance(const unsigned char&);
  void unregisterServerInstance();
  void setNetSafeAndFast(bool);
  bool getNetSafeAndFast();
  NetEventCallback* getNetEventCallback();
  void setHookAdapter(std::shared_ptr<NetworkHookAdapter>);
  std::shared_ptr<NetworkHookAdapter> getHookAdapter();
  void setCacheSend(bool);
  void flushAll();
  bool isInNetworkGame();
  bool isServer() const;
  NetworkIdentifier getPrimaryNetworkId() const;
  NetworkIdentifier getLocalNetworkId() const;
  NetworkIdentifier getServerId() const;
  bool isLocalConnectionId(const NetworkIdentifier&) const;
  bool isHostingPlayer(const NetworkIdentifier&, const unsigned char&) const;
  void setHostingPlayerIdentity(const NetworkIdentifier&, const unsigned char&);
  ServerLocator& getServerLocator();
  Connector& getConnector();
  UPNPInterface& getUPnPInterface();
  void send(const NetworkIdentifier&, const Packet&, const unsigned char);
  void sendToMultiple(const std::vector<NetworkIdentifierWithSubId,std::allocator<NetworkIdentifierWithSubId> >&, const Packet&);
  void flush(const NetworkIdentifier&, std::function<void __cdecl(void)>&);
  NetworkPeer* getPeerForUser(const NetworkIdentifier&);
  std::weak_ptr<EncryptedNetworkPeer> getEncryptedPeerForUser(const NetworkIdentifier&);
  std::weak_ptr<NetworkPacketRecorder> getNetworkPacketRecorderForUser(const NetworkIdentifier&);
  void setConnectionChannelPaused(const NetworkIdentifier&, uint32_t, bool);
  void setCloseConnection(const NetworkIdentifier&);
  void closeConnection(const NetworkIdentifier&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  const std::vector<std::unique_ptr<NetworkHandler::Connection,std::default_delete<NetworkHandler::Connection> >,std::allocator<std::unique_ptr<NetworkHandler::Connection,std::default_delete<NetworkHandler::Connection> > > >& getConnections() const;
  void setUseIPv6Only(bool);
  void setDefaultGamePort(uint16_t);
  void setDefaultGamePortv6(uint16_t);
  void setCompressionThresholdBytesize(uint16_t);
  uint16_t getCompressionThresholdBytesize();
  virtual const Social::GameConnectionInfo& getConnectionInfo() const;
  ResourcePackFileUploadManager& getResourcePackUploadManager(PacketSender&, const NetworkIdentifier&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  std::weak_ptr<ResourcePackFileDownloaderManager> getResourcePackDownloadManager(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  ResourcePackFileDownloaderManager& getResourcePackDownloadManager(PacketSender&, const NetworkIdentifier&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void cleanupResourcePackManager(const NetworkIdentifier&);
  virtual bool useIPv4Only() const;
  virtual bool useIPv6Only() const;
  virtual uint16_t getDefaultGamePort() const;
  virtual uint16_t getDefaultGamePortv6() const;
  void enableAsyncFlush(const NetworkIdentifier&);
  void getPingTimeForConnection(const Social::GameConnectionInfo&, std::function<void __cdecl(unsigned int)>);
  const NetworkStatistics* getNetworkStatistics() const;
  void resetNetworkStatistics();
  virtual void onSuspend();
  virtual void onResume();
  virtual void onNewIncomingConnection(const NetworkIdentifier&, std::shared_ptr<NetworkPeer>);
  virtual void onNewOutgoingConnection(const NetworkIdentifier&, std::shared_ptr<NetworkPeer>);
  virtual void onConnectionClosed(const NetworkIdentifier&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  virtual void onAllConnectionsClosed(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  virtual void onAllRemoteConnectionsClosed(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, bool);
  virtual void onOutgoingConnectionFailed();
  virtual void onWebsocketRequest(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::function<void __cdecl(void)>);
  virtual void onNewIncomingLocalConnection(const NetworkIdentifier&, std::shared_ptr<NetworkPeer>);
  virtual void onNewOutgoingLocalConnection(const NetworkIdentifier&, std::shared_ptr<NetworkPeer>);
  bool _sortAndPacketizeEvents(NetworkHandler::Connection&, std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >);
  void _handlePacket(std::shared_ptr<Packet>&, NetEventCallback&, NetworkHandler::Connection&);
  NetworkHandler::Connection* _getConnectionFromId(const NetworkIdentifier&) const;
  void _sendInternal(const NetworkIdentifier&, const Packet&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void _handlePacketViolation(StreamReadResult, PacketViolationResponse, MinecraftPacketIds, const NetworkIdentifier&, NetworkHandler::Connection&, unsigned char, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void _doConnectionClean();
  void _checkNCleanConnections(NetworkIdentifier);
  void resetLocalNetworkId();
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
};

class BlockLegacy {
  public:
    struct NameInfo {
      HashedString mRawName;
      std::__cxx11::string mNamespaceName;
      HashedString mFullName;
    }

    static const float SIZE_OFFSET;
    static const int UPDATE_NEIGHBORS;
    static const int UPDATE_CLIENTS;
    static const int UPDATE_INVISIBLE;
    static const int UPDATE_ITEM_DATA;
    static const int UPDATE_NONE;
    static const int UPDATE_ALL;
    static const int TILE_NUM_SHIFT;
    static const int NUM_LEGACY_BLOCK_TYPES;
    static const float REGULAR_GROUND_FRICTION;
    static const std::__cxx11::string BLOCK_DESCRIPTION_PREFIX;
    std::__cxx11::string mDescriptionId;
  private:
    BlockLegacy::NameInfo mNameInfo;
    BlockProperty mProperties;
  public:
    bool mFancy;
    BlockRenderLayer mRenderLayer;
    bool mRenderLayerCanRenderAsOpaque;
    BlockActorType mBlockEntityType;
    bool mAnimatedTexture;
    float mBrightnessGamma;
    float mThickness;
    bool mCanSlide;
    bool mCanInstatick;
    bool mIsInteraction;
    float mGravity;
    const Material &mMaterial;
    bool mHeavy;
    float mParticleQuantityScalar;
    CreativeItemCategory mCreativeCategory;
    std::__cxx11::string mCreativeGroup;
    bool mIsHiddenInCommands;
    bool mAllowsRunes;
    bool mCanBeBrokenFromFalling;
    bool mCanBeOriginalSurface;
    bool mSolid;
    bool mPushesOutItems;
    bool mIgnoreBlockForInsideCubeRenderer;
    bool mIsTrapdoor;
    bool mIsDoor;
    float mTranslucency;
    bool mShouldRandomTick;
    bool mShouldRandomTickExtraLayer;
    bool mIsMobPiece;
    bool mCanBeExtraBlock;
    bool mCanPropagateBrightness;
  protected:
    Brightness mLightBlock;
    Brightness mLightEmission;
    FlameOdds mFlameOdds;
    BurnOdds mBurnOdds;
    LavaFlammable mLavaFlammable;
    float mDestroySpeed;
    float mExplosionResistance;
    Color mMapColor;
    float mFriction;
    BlockTintType mBlockTintTypeID;
  private:
    NewBlockID mID;
    BaseGameVersion mMinRequiredBaseGameVersion;
    bool mIsVanilla;
    std::vector<HashedString, std::allocator<HashedString> > mTags;
  public:
    std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, DefinitionEvent, std::hash<std::__cxx11::string>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DefinitionEvent> > > mEventHandlers;
  private:
    AABB mVisualShape;
    unsigned int mBitsUsed;
    unsigned int mTotalBitsUsed;
    std::map<unsigned long, ItemStateInstance, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, ItemStateInstance> > > mStates;
    std::unordered_map<HashedString, unsigned long, std::hash<HashedString>, std::equal_to<HashedString>, std::allocator<std::pair<HashedString const, unsigned long> > > mStateNameMap;
    size_t mCreativeEnumState;
    std::vector<std::unique_ptr<Block, std::default_delete<Block> >, std::allocator<std::unique_ptr<Block, std::default_delete<Block> > > > mBlockPermutations;
    const Block *mDefaultState;
    Core::Cache<unsigned short, Block const*, Block const*> mLegacyDataLookupTable;
    OwnerPtr<EntityId> mEntity;
    std::unique_ptr<BlockStateGroup, std::default_delete<BlockStateGroup> > mBlockStateGroup;
    IntRange mExperienceDropRange;
    bool mReturnDefaultBlockOnUnidentifiedBlockState;

  public:
    bool operator==(const BlockLegacy &) const;
    bool operator==(const HashedString &) const;
    bool operator!=(const BlockLegacy &) const;
    bool operator!=(const HashedString &) const;
    void createBlockPermutations(uint32_t);
    BlockLegacy(const std::__cxx11::string &, int, const Material &);
    BlockLegacy(const BlockLegacy &);
    BlockLegacy(BlockLegacy &&);
    virtual ~BlockLegacy(void);
    BlockLegacy & operator=(const BlockLegacy &);
    BlockLegacy & operator=(BlockLegacy &&);
    static BlockLegacy::NameInfo extractBlockNameInfo(const std::__cxx11::string &);
    static std::__cxx11::string buildDescriptionIdFromNameInfo(const BlockLegacy::NameInfo &);
    bool hasProperty(BlockProperty) const;
    const Block * tryGetStateFromLegacyData(DataID) const;
    virtual const Block & getStateFromLegacyData(DataID) const;
    virtual std::shared_ptr<BlockActor> newBlockEntity(const BlockPos &, const Block &) const;
    bool hasState(const ItemState &) const;
    bool hasState(const HashedString &) const;
    const ItemState * getBlockState(const HashedString &) const;
    unsigned int getStateMask(const ItemState &) const;
    bool matchesStates(const BlockLegacy &) const;
    virtual const Block * getNextBlockPermutation(const Block &) const;
    BlockLegacy & addTag(const HashedString &);
    bool hasTag(const HashedString &) const;
    bool hasTag(const HashType64 &) const;
    virtual bool hasTag(BlockSource &, const BlockPos &, const Block &, const std::__cxx11::string &) const;
    const std::vector<HashedString, std::allocator<HashedString> > & getTags(void) const;
    virtual bool getCollisionShape(AABB &, const Block &, const IConstBlockSource &, const BlockPos &, optional_ref<GetCollisionShapeInterface const>) const;
    virtual bool isObstructingChests(BlockSource &, const BlockPos &, const Block &) const;
    virtual Vec3 randomlyModifyPosition(const BlockPos &, int32_t &) const;
    virtual Vec3 randomlyModifyPosition(const BlockPos &) const;
    bool addAABB(const AABB &, const AABB *, std::vector<AABB, std::allocator<AABB> > &) const;
    virtual void addAABBs(const Block &, const BlockSource &, const BlockPos &, const AABB *, std::vector<AABB, std::allocator<AABB> > &) const;
    virtual const AABB & getAABB(const IConstBlockSource &, const BlockPos &, const Block &, AABB &, bool) const;
    virtual bool addCollisionShapes(const Block &, const BlockSource &, const BlockPos &, const AABB *, std::vector<AABB, std::allocator<AABB> > &, optional_ref<GetCollisionShapeInterface const>) const;
    virtual bool updateTallestCollisionShape(const Block &, const BlockSource &, const BlockPos &, const AABB &, optional_ref<GetCollisionShapeInterface const>, AABB &, const Vec3 &, float &) const;
    virtual const AABB & getOutline(BlockSource &, const BlockPos &, AABB &) const;
    virtual bool getLiquidClipVolume(BlockSource &, const BlockPos &, AABB &) const;
    virtual void onProjectileHit(BlockSource &, const BlockPos &, const Actor &) const;
    virtual void onLightningHit(BlockSource &, const BlockPos &) const;
    virtual bool liquidCanFlowIntoFromDirection(FacingID, const GetBlockFunction &, const BlockPos &) const;
    virtual bool isSolid(void) const;
    void setSolid(bool);
    virtual bool hasVariableLighting(void) const;
    bool pushesOutItems(void) const;
    void setPushesOutItems(bool);
    bool ignoreBlockForInsideCubeRenderer(void) const;
    void setIgnoreBlockForInsideCubeRenderer(bool);
    bool isHeavy(void) const;
    bool canBeBrokenFromFalling(void) const;
    virtual bool isStrippable(const Block &) const;
    virtual const Block & getStrippedBlock(const Block &) const;
    virtual bool canProvideSupport(const Block &, FacingID, BlockSupportType) const;
    virtual bool canProvideFullSupport(const Block &, FacingID) const;
    virtual bool canProvideMultifaceSupport(const Block &, FacingID) const;
    virtual bool canConnect(const Block &, FacingID, const Block &) const;
    virtual void getConnectedDirections(const Block &, const BlockPos &, const IConstBlockSource &, bool &, bool &, bool &, bool &) const;
    bool isSolidBlockingBlock(void) const;
    bool isMotionBlockingBlock(void) const;
    bool isEmpty(void) const;
    virtual bool isAir(void) const;
    virtual const CopperBehavior * tryGetCopperBehavior(void) const;
    virtual bool canDamperVibrations(void) const;
    virtual bool canOccludeVibrations(void) const;
    virtual bool isClimbable(const IActorMovementProxy &) const;
    virtual bool isStemBlock(void) const;
    virtual bool isContainerBlock(void) const;
    virtual bool isCraftingBlock(void) const;
    virtual bool isWaterBlocking(void) const;
    virtual bool isHurtableBlock(void) const;
    virtual bool isFenceBlock(void) const;
    virtual bool isFenceGateBlock(void) const;
    virtual bool isThinFenceBlock(void) const;
    virtual bool isWallBlock(void) const;
    virtual bool isStairBlock(void) const;
    virtual bool isSlabBlock(void) const;
    virtual bool isDoubleSlabBlock(void) const;
    virtual bool isDoorBlock(void) const;
    virtual bool isRailBlock(void) const;
    virtual bool isButtonBlock(void) const;
    virtual bool isLeverBlock(void) const;
    virtual bool isCandleCakeBlock(void) const;
    virtual bool isMultifaceBlock(void) const;
    virtual bool canHurtAndBreakItem(void) const;
    virtual bool isSignalSource(void) const;
    virtual bool canBeOriginalSurface(void) const;
    virtual bool canBeAscendedByJumping(const Actor &, const BlockPos &) const;
    virtual bool isSilentWhenJumpingOff(void) const;
    virtual bool isValidAuxValue(int) const;
    virtual bool canFillAtPos(BlockSource &, const BlockPos &, const Block &) const;
    virtual const Block & sanitizeFillBlock(BlockSource &, const BlockPos &, const Block &) const;
    virtual void onFillBlock(BlockSource &, const BlockPos &, const Block &) const;
    virtual int getDirectSignal(BlockSource &, const BlockPos &, int) const;
    virtual bool canBeDestroyedByWaterSpread(void) const;
    virtual bool waterSpreadCausesSpawn(void) const;
    virtual bool canContainLiquid(void) const;
    virtual std::optional<HashedString> getRequiredMedium(void) const;
    virtual bool shouldConnectToRedstone(BlockSource &, const BlockPos &, int) const;
    virtual void handlePrecipitation(BlockSource &, const BlockPos &, float, float) const;
    virtual bool canBeUsedInCommands(const BaseGameVersion &) const;
    BlockActorType getBlockEntityType(void) const;
    bool hasBlockEntity(void) const;
    virtual float getThickness(void) const;
    virtual float getFlexibility(BlockSource &, const BlockPos &) const;
    virtual bool checkIsPathable(Actor &, const BlockPos &, const BlockPos &) const;
    virtual bool shouldDispense(BlockSource &, Container &) const;
    virtual bool dispense(BlockSource &, Container &, int, const Vec3 &, FacingID) const;
    virtual void transformOnFall(BlockSource &, const BlockPos &, Actor *, float) const;
    virtual void onRedstoneUpdate(BlockSource &, const BlockPos &, int, bool) const;
    virtual void onMove(BlockSource &, const BlockPos &, const BlockPos &) const;
    virtual bool detachesOnPistonMove(BlockSource &, const BlockPos &) const;
    virtual void movedByPiston(BlockSource &, const BlockPos &) const;
    virtual void onStructureBlockPlace(BlockSource &, const BlockPos &) const;
    virtual void onStructureNeighborBlockPlace(BlockSource &, const BlockPos &) const;
    virtual void setupRedstoneComponent(BlockSource &, const BlockPos &) const;
    virtual BlockProperty getRedstoneProperty(BlockSource &, const BlockPos &) const;
    virtual void updateEntityAfterFallOn(const BlockPos &, UpdateEntityAfterFallOnInterface &) const;
    virtual bool isBounceBlock(void) const;
    virtual bool isFilteredOut(BlockRenderLayer) const;
    virtual bool isPreservingMediumWhenPlaced(const BlockLegacy *) const;
    bool isVanilla(void) const;
    void setIsVanillaBlock(bool);
    virtual bool ignoreEntitiesOnPistonMove(const Block &) const;
    virtual bool onFertilized(BlockSource &, const BlockPos &, Actor *, FertilizerType) const;
    virtual bool mayConsumeFertilizer(BlockSource &) const;
    virtual bool canBeFertilized(BlockSource &, const BlockPos &, const Block &) const;
    virtual bool mayPick(void) const;
    virtual bool mayPick(const BlockSource &, const Block &, bool) const;
    virtual bool mayPlace(BlockSource &, const BlockPos &, FacingID) const;
    virtual bool mayPlace(BlockSource &, const BlockPos &) const;
    virtual bool mayPlaceOn(BlockSource &, const BlockPos &) const;
    virtual bool tryToPlace(BlockSource &, const BlockPos &, const Block &, const ActorBlockSyncMessage *) const;
    virtual bool tryToTill(BlockSource &, const BlockPos &, Actor &, ItemStack &) const;
    virtual bool breaksFallingBlocks(const Block &, const BaseGameVersion) const;
    virtual void destroy(BlockSource &, const BlockPos &, const Block &, Actor *) const;
    virtual bool playerWillDestroy(Player &, const BlockPos &, const Block &) const;
    virtual bool getIgnoresDestroyPermissions(Actor &, const BlockPos &) const;
    virtual void neighborChanged(BlockSource &, const BlockPos &, const BlockPos &) const;
    virtual bool getSecondPart(const BlockSource &, const BlockPos &, BlockPos &) const;
    virtual ItemInstance asItemInstance(const Block &, const BlockActor *) const;
    static void spawnResources(BlockSource &, const BlockPos &, Randomize &, std::vector<Item const*, std::allocator<Item const*> > *, float);
    virtual void spawnResources(BlockSource &, const BlockPos &, const Block &, Randomize &, const ResourceDropsContext &, std::vector<Item const*, std::allocator<Item const*> > *) const;
    virtual void trySpawnResourcesOnExplosion(BlockSource &, const BlockPos &, const Block &, Randomize &, std::vector<Item const*, std::allocator<Item const*> > *, float) const;
    static ItemActor * popResource(BlockSource &, const BlockPos &, const ItemStack &);
    static ItemActor * popResource(BlockSource &, const BlockPos &, const ItemInstance &);
    virtual bool spawnBurnResources(BlockSource &, float, float, float) const;
    virtual const Block & getPlacementBlock(Actor &, const BlockPos &, FacingID, const Vec3 &, int) const;
    virtual int calcVariant(BlockSource &, const BlockPos &, const Color &) const;
    virtual bool isAttachedTo(BlockSource &, const BlockPos &, BlockPos &) const;
    virtual bool attack(Player *, const BlockPos &) const;
    virtual void handleEntityInside(BlockSource &, const BlockPos &, Actor *, Vec3 &) const;
    virtual bool shouldTriggerOnStandOn(Actor &, const BlockPos &) const;
    virtual bool shouldTriggerEntityInside(BlockSource &, const BlockPos &, Actor &) const;
    virtual void entityInside(BlockSource &, const BlockPos &, Actor &) const;
    BlockLegacy & setExperienceDrop(IntRange);
    int getExperienceDrop(Random &) const;
    virtual bool canBeBuiltOver(BlockSource &, const BlockPos &, const BlockItem &) const;
    virtual bool canBeBuiltOver(BlockSource &, const BlockPos &) const;
    BlockLegacy & setNameId(const std::__cxx11::string &);
    virtual void triggerEvent(BlockSource &, const BlockPos &, int, int) const;
    virtual void executeEvent(const std::__cxx11::string &, RenderParams &) const;
    virtual void executeEvent(BlockSource &, const BlockPos &, const Block &, const std::__cxx11::string &, Actor &) const;
    virtual bool executeTrigger(const DefinitionTrigger &, RenderParams &) const;
    virtual void forceExecuteTrigger(const DefinitionTrigger &, RenderParams &) const;
    virtual const MobSpawnerData * getMobToSpawn(const SpawnConditions &, BlockSource &) const;
    const Material & getMaterial(void) const;
    virtual bool shouldStopFalling(Actor &) const;
    virtual bool pushesUpFallingBlocks(void) const;
    virtual float calcGroundFriction(const IMobMovementProxy &, const BlockPos &) const;
    virtual bool canHaveExtraData(void) const;
    virtual bool hasComparatorSignal(void) const;
    virtual int getComparatorSignal(BlockSource &, const BlockPos &, const Block &, FacingID) const;
    virtual bool canSlide(BlockSource &, const BlockPos &) const;
    bool canInstatick(void) const;
    float getGravity(void) const;
    const std::__cxx11::string & getCreativeGroup(void) const;
    BlockLegacy & setCreativeGroup(const std::__cxx11::string &);
    CreativeItemCategory getCreativeCategory(void) const;
    virtual bool canSpawnAt(const BlockSource &, const BlockPos &) const;
    virtual void notifySpawnedAt(BlockSource &, const BlockPos &) const;
    virtual bool causesFreezeEffect(void) const;
    void forEachBlockPermutation(std::function<bool (const Block &)>) const;
    bool _testOnlyForEachBlockPermutationMutable(std::function<bool (Block &)>);
    void forEachItemStateInstance(std::function<bool (const ItemStateInstance &)>) const;
    virtual int getIconYOffset(void) const;
    bool getBlendedCanRenderAsOpaque(void) const;
    const std::__cxx11::string & getDescriptionId(void) const;
    const std::__cxx11::string & getRawNameId(void) const;
    const HashedString & getRawNameHash(void) const;
    const std::__cxx11::string & getNamespace(void) const;
    const HashedString & getName(void) const;
    std::vector<CommandName, std::allocator<CommandName> > getCommandNames(void) const;
    bool anyOf(std::initializer_list<HashedString const>) const;
    std::__cxx11::string buildDescriptionName(const Block &) const;
    virtual std::__cxx11::string buildDescriptionId(const Block &) const;
    virtual bool isAuxValueRelevantForPicking(void) const;
    virtual int getColor(const Block &) const;
    virtual int getColor(BlockSource &, const BlockPos &, const Block &) const;
    virtual int getColorAtPos(BlockSource &, const BlockPos &) const;
    virtual int getColorForParticle(BlockSource &, const BlockPos &, const Block &) const;
    virtual bool isSeasonTinted(const Block &, BlockSource &, const BlockPos &) const;
    virtual void onGraphicsModeChanged(const BlockGraphicsModeChangeContext &);
    static void DEPRECATEDcallOnGraphicsModeChanged(const BlockGraphicsModeChangeContext &);
    float getBrightnessGamma(void) const;
    BlockLegacy & setBrightnessGamma(float);
    virtual float getShadeBrightness(const Block &) const;
    virtual const AABB & getVisualShapeInWorld(const Block &, const IConstBlockSource &, const BlockPos &, AABB &, bool) const;
    virtual const AABB & getVisualShape(const Block &, AABB &, bool) const;
    virtual const AABB & getUIShape(const Block &, AABB &) const;
    bool isTextureAnimated(void) const;
    virtual int telemetryVariant(BlockSource &, const BlockPos &) const;
    virtual int getVariant(const Block &) const;
    virtual bool canSpawnOn(Actor *) const;
    virtual const Block & getRenderBlock(void) const;
    virtual FacingID getMappedFace(FacingID, const Block &) const;
    virtual Flip getFaceFlip(FacingID, const Block &) const;
    virtual void animateTick(BlockSource &, const BlockPos &, Random &) const;
    void getDebugText(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, const BlockPos &) const;
    bool getAllowsRunes(void) const;
    float getParticleQuantityScalar(void) const;
    void setRandomTicking(bool) const;
    void setRandomTickingExtraLayer(bool) const;
    const Block & getDefaultState(void) const;
    void setOnlyPermutationandDefaultState(std::unique_ptr<Block, std::default_delete<Block> >);
    size_t getNumPermutations(void) const;
    const BaseGameVersion & getRequiredBaseGameVersion(void) const;
    short getBlockItemId(void) const;
    bool isTrapdoor(void) const;
    bool isDoor(void) const;
    bool isMobPiece(void) const;
    bool canBeExtraBlock(void) const;
    bool canPropagateBrightness(void) const;
    bool isFullAndOpaque(void) const;
    virtual BlockLegacy & init(void);
    BlockLegacy & setLightBlock(Brightness);
    BlockLegacy & setLightEmission(Brightness);
    float getLightEmission(void) const;
  protected:
    virtual Brightness getLightEmission(const Block &) const;
  public:
    BlockLegacy & setExplodeable(float);
    BlockLegacy & setFlammable(FlameOdds, BurnOdds, LavaFlammable);
    BlockLegacy & setDestroyTime(float);
    BlockLegacy & setFriction(float);
    BlockLegacy & setBlockTintType(BlockTintType);
    BlockLegacy & addBlockProperties(BlockProperty);
    BlockLegacy & overrideBlockProperties(BlockProperty);
    BlockLegacy & setReturnDefaultBlockOnUnidentifiedBlockState(void);
    virtual BlockLegacy & addState(const ItemState &);
    virtual BlockLegacy & addState(const ItemState &, size_t);
    BlockLegacy & setCreativeEnumState(const ItemState &);
    const ItemState * getCreativeEnumState(void) const;
    BlockLegacy & setAllowsRunes(bool);
    BlockLegacy & setMinRequiredBaseGameVersion(const BaseGameVersion &);
    BlockLegacy & setCanBeOriginalSurface(bool);
    BlockLegacy & setMapColor(const Color &);
    BlockLegacy & setCategory(CreativeItemCategory);
    BlockLegacy & setIsHiddenInCommands(bool);
    virtual bool canBeSilkTouched(void) const;
    virtual ItemInstance getSilkTouchItemInstance(const Block &) const;
    void setVisualShape(const AABB &);
    void setVisualShape(const Vec3 &, const Vec3 &);
    void setIsInteraction(bool);
    BlockLegacy & setCanBeExtraBlock(bool);
    BlockLegacy & setCanPropagateBrightness(bool);
    static FacingID getPlacementFacingAll(Actor &, const BlockPos &, float);
    static FacingID getPlacementFacingAllExceptAxisY(Actor &, const BlockPos &, float);
    virtual const Block * tryLegacyUpgrade(DataID) const;
    void setDefaultState(const Block &);
    WeakPtr<BlockLegacy> createWeakPtr(void) const;
    virtual bool dealsContactDamage(const Actor &, const Block &, bool) const;
    void initializeBlockStateGroup(void);
    BlockStateGroup * getBlockStateGroup(void);
    const BlockStateGroup * getBlockStateGroup(void) const;
    NewBlockID getBlockID(void) const;
    virtual const Block * tryGetInfested(const Block &) const;
    virtual const Block * tryGetUninfested(const Block &) const;
    std::vector<ItemStack, std::allocator<ItemStack> > getResourceDrops(const Block &, Randomize &, const ResourceDropsContext &) const;
    bool _isDataDrivingVanillaBlocksAndItems(void) const;
    bool hasEntity(void) const;
    EntityContext & getEntityForModification(void) const;
    const EntityContext & getEntity(void) const;
    const EntityContext & getEntityNoCheck(void) const;
    void initEntity(EntityRegistry &);
    virtual void _addHardCodedBlockComponents(void);
    AABB _testOnlyGetCollisionAABB(AABB &, const Block &, const IConstBlockSource &, const BlockPos &) const;
    AABB _testOnlyGetSelectionAABB(AABB &, const Block &, const IConstBlockSource &, const BlockPos &) const;
    float _testOnlyGetDestroySpeed(void) const;
    float _testOnlyGetExplosionResistance(Actor *) const;
    float _testOnlyGetFriction(void) const;
    Brightness _testOnlyGetLight(void) const;
    float _testOnlyGetLightEmission(void) const;
    Brightness _testOnlyGetLightEmission(const Block &) const;
    Color _testOnlyGetMapColor(BlockSource &, const BlockPos &, const Block &) const;
    int _testOnlyGetBurnOdds(void) const;
    int _testOnlyGetFlameOdds(void) const;
    bool _testOnlyIsCraftingBlock(void) const;
    bool _testOnlyIsInteraction(void) const;
  protected:
    virtual void onRemove(BlockSource &, const BlockPos &) const;
    virtual void onExploded(BlockSource &, const BlockPos &, Actor *) const;
    virtual void onStandOn(EntityContext &, const BlockPos &) const;
    virtual void onStepOn(Actor &, const BlockPos &) const;
    virtual void onStepOff(Actor &, const BlockPos &) const;
    virtual void onPlayerPlacing(BlockSource &, const BlockPos &, Actor &, FacingID) const;
    virtual void onPlace(BlockSource &, const BlockPos &) const;
    virtual void onFallOn(BlockSource &, const BlockPos &, Actor &, float) const;
    virtual void playerDestroy(Player &, const BlockPos &, const Block &) const;
    virtual bool shouldTickOnSetBlock(void) const;
    virtual void tick(BlockSource &, const BlockPos &, Random &) const;
    virtual void randomTick(BlockSource &, const BlockPos &, Random &) const;
    virtual bool shouldRandomTick(void) const;
    bool shouldRandomTickExtraLayer(void) const;
    virtual bool isInteractiveBlock(void) const;
    virtual HitResult clip(const BlockSource &, const BlockPos &, const Vec3 &, const Vec3 &, bool) const;
    HitResult clip(const BlockSource &, const BlockPos &, const Vec3 &, const Vec3 &, bool, const AABB &) const;
    bool isInteraction(void) const;
    virtual bool use(Player &, const BlockPos &, FacingID) const;
    virtual bool canSurvive(BlockSource &, const BlockPos &) const;
    virtual BlockRenderLayer getRenderLayer(void) const;
    virtual BlockRenderLayer getRenderLayer(const Block &, BlockSource &, const BlockPos &) const;
    virtual int getExtraRenderLayers(void) const;
    int getBurnOdds(void) const;
    int getFlameOdds(void) const;
    bool isLavaFlammable(void) const;
    float getDestroySpeed(void) const;
    virtual float getExplosionResistance(Actor *) const;
    float getFriction(void) const;
    Brightness getLight(void) const;
    virtual Brightness getEmissiveBrightness(const Block &) const;
    virtual Color getMapColor(BlockSource &, const BlockPos &, const Block &) const;
    BlockTintType getBlockTintType(void) const;
    BlockShape _getBlockShape(void) const;
    virtual bool isCropBlock(void) const;
    static AABB createAABBWithPixelCoordinates(float, float, float, float, float, float);
    virtual int getResourceCount(Randomize &, const Block &, int) const;
    virtual ItemInstance getResourceItem(Randomize &, const Block &, int) const;
    bool forEachBlockPermutationMutable(std::function<bool (Block &)>);
  private:
    const buffer_span<std::unique_ptr<Block, std::default_delete<Block> > > getBlockPermutations(void) const;
    std::__cxx11::string makeInvalidStateMessage(const ItemState &) const;
    std::__cxx11::string makeInvalidStateMessage(const size_t &) const;
    void initParams(RenderParams &, BlockSource &, const BlockPos &, Actor *) const;
    virtual void _executeEvent(const std::__cxx11::string &, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const> > > &, RenderParams &) const;
    virtual bool _executeTrigger(const DefinitionTrigger &, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const> > > &, RenderParams &) const;
    virtual void _forceExecuteTrigger(const DefinitionTrigger &, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const> > > &, RenderParams &) const;
  public:
    const Block * trySetState<int>(const ItemState &, int, DataID) const;
    int getState<int>(const size_t &, DataID) const;
    bool getState<bool>(const size_t &, DataID) const;
    const Block * trySetState<bool>(const ItemState &, bool, DataID) const;
    const Block * trySetState<unsigned char>(const ItemState &, unsigned char, DataID) const;
    unsigned short getState<unsigned short>(const size_t &, DataID) const;
    unsigned char getState<unsigned char>(const size_t &, DataID) const;
    const Block * trySetState<Direction::Type>(const ItemState &, Direction::Type, DataID) const;
    CandleCount getState<CandleCount>(const size_t &, DataID) const;
}

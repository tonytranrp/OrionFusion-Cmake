class ItemStackBase {
  private:
    static const int MAX_STACK_SIZE;
  public:
    static const std::__cxx11::string TAG_DISPLAY;
    static const std::__cxx11::string TAG_DISPLAY_NAME;
    static const std::__cxx11::string TAG_LORE;
    static const std::__cxx11::string TAG_REPAIR_COST;
    static const std::__cxx11::string TAG_ENCHANTS;
    static const std::__cxx11::string TAG_CAN_PLACE_ON;
    static const std::__cxx11::string TAG_CAN_DESTROY;
    static const int ID_MASK;
    static const int ENCHANT_MASK;
    static const int AUX_VALUE_MASK;
  protected:
    static const std::__cxx11::string TAG_STORE_CAN_PLACE_ON;
    static const std::__cxx11::string TAG_STORE_CAN_DESTROY;
    static const std::__cxx11::string TAG_CHARGED_ITEM;
    WeakPtr<Item> mItem;
    std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > mUserData;
    const Block *mBlock;
    short mAuxValue;
    byte mCount;
    bool mValid;
    std::chrono::_V2::steady_clock::time_point mPickupTime;
    static const std::chrono::milliseconds sPickupPopDuration;
    bool mShowPickUp;
    bool mWasPickedUp;
    std::vector<BlockLegacy const*, std::allocator<BlockLegacy const*> > mCanPlaceOn;
    size_t mCanPlaceOnHash;
    std::vector<BlockLegacy const*, std::allocator<BlockLegacy const*> > mCanDestroy;
    size_t mCanDestroyHash;
    Tick mBlockingTick;
  private:
    std::unique_ptr<ItemInstance, std::default_delete<ItemInstance> > mChargedItem;

  protected:
    ItemStackBase(void);
    ItemStackBase(const BlockLegacy &, int);
    ItemStackBase(const BlockLegacy &, int, short);
    ItemStackBase(const Block &, int, const CompoundTag *);
    ItemStackBase(string_span, int, int, const CompoundTag *);
    ItemStackBase(const Item &, int, int, const CompoundTag *);
    ItemStackBase(const ItemStackBase &);
    ItemStackBase(const RecipeIngredient &);
    ItemStackBase & operator=(const ItemStackBase &);
  public:
    virtual ~ItemStackBase(void);
    virtual void reinit(const Item &, int, int);
    virtual void reinit(const BlockLegacy &, int);
    virtual void reinit(const string_span, int, int);
    ItemDescriptor getDescriptor(void) const;
    virtual void setNull(std::optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >);
    bool isNull(void) const;
    bool operator==(const ItemStackBase &) const;
    bool operator!=(const ItemStackBase &) const;
    bool matches(const ItemStackBase &) const;
    bool matchesItem(const ItemStackBase &) const;
    bool matchesChargedItem(const ItemStackBase &) const;
    void add(const int);
    void remove(const int);
    void set(const int);
    void initParams(VariantParameterList &, Actor *);
    void initParams(RenderParams &, Actor *);
    bool sendEventTriggered(const std::__cxx11::string &, const RenderParams &);
    void executeEvent(const std::__cxx11::string &, RenderParams &);
    bool hasTag(const ItemTag &) const;
    bool hasTag(const HashType64 &) const;
    bool hasUserData(void) const;
    bool hasContainerData(void) const;
    bool hasCompoundTextUserData(void) const;
    bool hasSameUserData(const ItemStackBase &) const;
    bool hasSameUserData(const CompoundTag *) const;
    bool hasSameUserDataExcept(const ItemStackBase &, const std::__cxx11::string &) const;
    bool hasSameAuxValue(const ItemStackBase &) const;
    void setUserData(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> >);
    const CompoundTag * getUserData(void) const;
    CompoundTag * getUserData(void);
    std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > getNetworkUserData(void) const;
    void addCustomUserData(BlockActor &, BlockSource &);
    void addCustomUserData(ContainerComponent &);
    ResolvedItemIconInfo getIconInfo(int, bool) const;
    const BaseGameVersion & getRequiredBaseGameVersion(void) const;
    const Item * getItem(void) const;
    const ComponentItem * getComponentItem(void) const;
    Item * getMutableItem(void) const;
    WeakPtr<Item> getItemPtr(void) const;
    const Block * getBlock(void) const;
    const WeakPtr<BlockLegacy> & getLegacyBlock(void) const;
    void setBlock(const Block *);
    short getId(void) const;
    int getIdAux(void) const;
    int getIdAuxEnchanted(void) const;
    bool isInstance(const Item &) const;
    bool isInstance(const HashedString &, bool) const;
    bool isBlockInstance(const HashedString &) const;
    bool isOneOfBlockInstances(std::initializer_list<HashedString const>) const;
    bool isOneOfInstances(std::initializer_list<HashedString const>, bool) const;
    bool isItem(void) const;
    bool isBlock(void) const;
    bool isValid(void) const;
    operator bool(void) const;
    bool isValidAuxValue(int) const;
    bool isThrowable(void) const;
    bool isUseable(void) const;
    bool isExplodable(void) const;
    bool isFireResistant(void) const;
    bool isPattern(void) const;
    void refreshedInContainer(Level &) const;
    bool isStackedByData(void) const;
    bool isStackable(void) const;
    bool isStackable(const ItemStackBase &) const;
    byte getMaxStackSize(void) const;
    bool isFullStack(void) const;
    byte getStackSize(void) const;
    void setStackSize(const byte);
    void forceSetCount(const byte);
    bool isEmptyStack(void) const;
    bool isDamaged(void) const;
    bool isDamageableItem(void) const;
    short getDamageValue(void) const;
    bool hasDamageValue(void) const;
    void removeDamageValue(void);
    void setDamageValue(short);
    short getMaxDamage(void) const;
    bool hurtAndBreak(int, Actor *);
    short getAuxValue(void) const;
    void setAuxValue(short);
    int getAttackDamage(void) const;
    bool canDestroySpecial(const Block &) const;
    void snap(Player *);
    bool shouldVanish(void) const;
    bool isLiquidClipItem(void) const;
    bool shouldInteractionWithBlockBypassLiquid(const Block &) const;
    bool isArmorItem(void) const;
    bool isHorseArmorItem(void) const;
    bool isPotionItem(void) const;
    bool isWearableItem(void) const;
    bool matchesEitherWearableCase(const CompoundTag *) const;
    bool isOffhandItem(void) const;
    bool isMusicDiscItem(void) const;
    bool isTransparentAttachable(void) const;
    bool hasFeedingAnimation(void) const;
    bool sameItem(int, int) const;
    bool sameItem(const ItemStackBase &) const;
    bool sameItemAndAux(const ItemStackBase &) const;
    std::__cxx11::string getName(void) const;
    std::__cxx11::string getRawNameId(void) const;
    const HashedString & getRawNameHash(void) const;
    const HashedString & getFullNameHash(void) const;
    const HashedString & getRendererId(void) const;
    std::__cxx11::string getEffectName(void) const;
    std::__cxx11::string getFormattedHovertext(Level &, const bool) const;
    std::__cxx11::string getDescriptionId(void) const;
    std::__cxx11::string getCategoryName(void) const;
    virtual std::__cxx11::string toString(void) const;
    virtual std::__cxx11::string toDebugString(void) const;
    Color getColor(void) const;
    std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > save(void) const;
    void load(const CompoundTag &);
    void load(const CompoundTag &, Level &);
    UseAnimation getUseAnimation(void) const;
    std::__cxx11::string getHoverName(void) const;
    std::__cxx11::string getCustomName(void) const;
    void setCustomName(const std::__cxx11::string &);
    std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > getCustomLore(void) const;
    void setCustomLore(const std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &);
    void resetHoverName(void);
    bool hasCustomHoverName(void) const;
    bool isEnchanted(void) const;
    void removeEnchants(void);
    void saveEnchantsToUserData(const ItemEnchants &);
    ItemEnchants constructItemEnchantsFromUserData(void) const;
    int getEnchantValue(void) const;
    int getEnchantSlot(void) const;
    bool isEnchantingBook(void) const;
    int getBaseRepairCost(void) const;
    void setRepairCost(int);
    bool isEquivalentArmor(const ItemStackBase &) const;
    ArmorSlot getArmorSlot(void) const;
    bool isGlint(void) const;
    bool showsDurabilityInCreative(void) const;
    void setJustBrewed(bool);
    bool wasJustBrewed(void) const;
    void startCoolDown(Player *) const;
    static short retrieveIDFromIDAux(int);
    static bool retrieveEnchantFromIDAux(int);
    static int retrieveAuxValFromIDAux(int);
    static bool isValidComponent(const std::__cxx11::string &);
    bool componentsMatch(const ItemStackBase &) const;
    bool addComponents(const Json::Value &, std::__cxx11::string &);
    bool hasComponent(const std::__cxx11::string &) const;
    bool updateComponent(const std::__cxx11::string &, const Json::Value &);
    void serializeComponents(IDataOutput &) const;
    void deserializeComponents(IDataInput &);
    bool canPlaceOn(const Block *) const;
    bool canDestroy(const Block *) const;
    const Tick & getBlockingTick(void) const;
    void setBlockingTick(Tick);
    float getPickupPopPercentage(void) const;
    bool getIsValidPickupTime(void) const;
    std::chrono::_V2::steady_clock::time_point getPickupTime(void) const;
    void setPickupTime(void);
    void setPickupTime(std::chrono::_V2::steady_clock::time_point);
    bool showPickUp(void) const;
    void setShowPickUp(bool);
    void setChargedItem(const ItemInstance &, bool);
    void clearChargedItem(void);
    const ItemInstance & getChargedItem(void) const;
    bool hasChargedItem(void) const;
    bool canBeCharged(void) const;
    void setWasPickedUp(bool);
    bool getWasPickedUp(void) const;
    static void loadItemStacksFromDescriptor(std::vector<ItemStack, std::allocator<ItemStack> > &, const std::vector<NetworkItemStackDescriptor, std::allocator<NetworkItemStackDescriptor> > &, BlockPalette &, bool);
    const ItemComponent * getComponent(const HashedString &) const;
    bool hasDataComponent(const std::__cxx11::string &) const;
  protected:
    bool _setItem(int, bool);
    std::__cxx11::string _getHoverFormattingPrefix(void) const;
    void init(const BlockLegacy &, int);
    void init(const Item &, int, int, const CompoundTag *, bool);
    void init(int, int, int, bool);
  private:
    void _loadComponents(const CompoundTag &);
    void _saveComponents(CompoundTag &) const;
    void _initComponents(void);
    void _cloneComponents(const ItemStackBase &);
    bool _hasComponents(void) const;
    void _updateCompareHashes(void);
    void _loadItem(const CompoundTag &);
    void _setChargedItem(const ItemInstance &);
    bool _isInstance(const string_span) const;
    bool _isVanillaItemInstance(const HashedString &) const;
    void _addCustomUserDataCommon(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag> > &&);
    void _sortBlocks(std::vector<BlockLegacy const*, std::allocator<BlockLegacy const*> > &);
    void _checkForItemWorldCompatibility(void);
    bool _hasFullOrPartialTag(const HashedString &) const;
}


class MoveInput { /* Size=0x58 */
  /* 0x0008 */ Vec2 mMove;
  /* 0x0010 */ Vec2 mLookDelta;
  /* 0x0018 */ Vec3 mGazeDir;
  /* 0x0024 */ Vec3 mGazeDirDelta;
  /* 0x0030 */ Vec3 mDisplacement;
  /* 0x003c */ Vec3 mDisplacementDelta;
  /* 0x0048 */ bool mSneaking;
  /* 0x0049 */ bool mSneakDown;
  /* 0x004a */ bool mSprinting;
  /* 0x004b */ bool mWantUp;
  /* 0x004c */ bool mWantDown;
  /* 0x004d */ bool mWantDownSlow;
  /* 0x004e */ bool mWantUpSlow;
  /* 0x004f */ bool mJumping;
  /* 0x0050 */ bool mAutoJumpingInWater;
  /* 0x0051 */ bool mAscendScaffolding;
  /* 0x0052 */ bool mDescendScaffolding;
  /* 0x0053 */ bool mSneakToggleDown;
  /* 0x0054 */ bool mMoveLocked;
  
  MoveInput(const MoveInput&);
  MoveInput();
  virtual ~MoveInput();
  virtual void tick(IPlayerMovementProxy&);
  virtual void render(float);
  virtual void setKey(int32_t, bool);
  virtual void clearInputState();
  virtual void clearMovementState();
  virtual bool allowPicking(float, float);
  virtual void setJumping(bool);
  virtual void setAutoJumpingInWater(bool);
  bool isJumping() const;
  virtual bool isChangeHeight() const;
  bool isAutoJumpingInWater() const;
  bool isSneaking() const;
  virtual void setSneakDown(bool);
  void setSneaking(bool);
  bool isSprinting() const;
  virtual bool isPlayerMoving() const;
  bool isAscendScaffolding() const;
  bool isDescendScaffolding() const;
  bool isSneakToggleButtonDown() const;
  bool wantsUp() const;
  bool wantsUpSlow() const;
  bool wantsDown() const;
  bool wantsDownSlow() const;
  const Vec2& getMoveVector() const;
  Vec2& getMoveVector();
  void setMoveLocked(bool);
  bool isMoveLocked() const;
  const Vec2& getLookDelta() const;
  virtual const Vec3& getGazeDirection() const;
  const Vec3 getAndClearGazeDirDelta();
  const Vec3 getAndReduceDisplacementDelta(float);
  void scaleMoveVector(float);
  bool isSneakDown() const;
  MoveInput& operator=(const MoveInput&);
  void __local_vftable_ctor_closure();
  virtual void* __vecDelDtor(uint32_t);
};

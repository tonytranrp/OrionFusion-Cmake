class Player : public Mob {
  private:
    static const int DATA_PLAYER_FLAGS_ID;
    static const int DATA_BED_POSITION_ID;
    static const int DATA_PLAYER_DEAD;
    static const int DATA_PLAYER_PLAYERINDEX;
    static const int PLAYER_SLEEP_FLAG;
    static const int PLAYER_DEAD_FLAG;
  public:
    static const float DEFAULT_PLAYER_HEIGHT_OFFSET;
    static const float PLAYER_GLIDING_CAMERA_OFFSET;
    static const float PLAYER_SWIMMING_CAMERA_OFFSET;
    static const float PLAYER_SLEEPING_CAMERA_OFFSET;
    static const float PLAYER_SNEAK_OFFSET;
    static const float PLAYER_UP_SWIM_SPEED;
    static const float PLAYER_DOWN_SWIM_SPEED;
    static const float PLAYER_ITEM_USE_DEFAULT_SPEED_MODIFIER;
    static const float PLAYER_SWIM_FLY_MULTI;
    static const float PLAYER_SWIM_BREACH_ANGLE;
    static const float PLAYER_SWIM_ENTER_THRESHOLD;
    static const float DEFAULT_BB_WIDTH;
    static const float DEFAULT_BB_HEIGHT;
    static const float DISTANCE_TO_TRAVELLED_EVENT;
    static const float DISTANCE_TO_TRANSFORM_EVENT;
    static const int GLIDE_STOP_DELAY;
    static const uint32_t SPAWN_CHUNK_RADIUS;
    static const uint32_t SPAWN_CHUNK_LARGE_JUMP;
    static const float PLAYER_ALIVE_HEIGHT;
    static const float PLAYER_ALIVE_WIDTH;
    static const float PLAYER_DEAD_HEIGHT;
    static const float PLAYER_DEAD_WIDTH;
    static const float PLAYER_SLEEPING_HEIGHT;
    static const float PLAYER_SLEEPING_WIDTH;
    static const int PLAYER_DIMENSION_CHANGE_OWNED_MOB_SEARCH_RADIUS;
    static const int MAX_NAME_LENGTH;
    static const int MIN_NAME_LENGTH;
    static const int MAX_HEALTH;
    static const float DEFAULT_WALK_SPEED;
    static const float DEFAULT_FLY_SPEED;
    static const int SLEEP_DURATION;
    static const int WAKE_UP_DURATION;
    static const int MAX_ITEM_USE_DURATION;
    static const int ITEM_USE_INTERVAL_DURATION;
    static const int ITEM_USE_INTERVAL_COUNT;
    static const int SLOT_HELM;
    static const int SLOT_CHEST;
    static const int SLOT_LEGGINGS;
    static const int SLOT_BOOTS;
    static const int FIXED_SPAWN_MAX_RETRIES;
    static const int ON_SCREEN_TEXTURE_ANIMATION_LENGTH;
    int mCastawayTimer;
    bool mAteKelp;
    int mLastBiome;
    std::vector<int, std::allocator<int> > mOceanBiomes;
    bool castawaySent;
    bool sailseasSent;
    std::vector<unsigned short, std::allocator<unsigned short> > mFroglights;
    static const Attribute HUNGER;
    static const Attribute SATURATION;
    static const Attribute EXHAUSTION;
    static const Attribute LEVEL;
    static const Attribute EXPERIENCE;
    char mUserType;
    int mScore;
    float mOBob;
    float mBob;
    BuildPlatform mBuildPlatform;
    LayeredAbilities mAbilities;
    std::__cxx11::string mUniqueName;
    std::__cxx11::string mServerId;
    std::__cxx11::string mSelfSignedId;
    std::__cxx11::string mPlatformOfflineId;
    uint64_t mClientRandomId;
    std::__cxx11::string mPlatformId;
    ActorUniqueID mPendingVehicleID;
    ActorUniqueID mPendingLeftShoulderPassengerID;
    ActorUniqueID mPendingRightShoulderPassengerID;
    ActorUniqueID mInteractTarget;
    Vec3 mInteractTargetPos;
    bool mHasFakeInventory;
    bool mIsRegionSuspended;
    std::shared_ptr<ChunkViewSource> mChunkSource;
    std::shared_ptr<ChunkViewSource> mSpawnChunkSource;
    bool mUpdateMobs;
    Vec3 mCapePosO;
    Vec3 mCapePos;
  protected:
    float mDistanceSinceTravelledEvent;
    float mDistanceSinceTransformEvent;
    bool mShouldClientGenerateChunks;
    std::shared_ptr<IContainerManager> mContainerManager;
    std::unique_ptr<PlayerInventory, std::default_delete<PlayerInventory> > mInventory;
    SerializedSkin mSkin;
    std::vector<ItemInstance, std::allocator<ItemInstance> > mCreativeItemList;
    std::array<std::vector<ItemGroup, std::allocator<ItemGroup> >, 4> mFilteredCreativeItemList;
    std::__cxx11::string mPlatformOnlineId;
    Player::SpawnPositionState mSpawnPositionState;
    Player::SpawnPositionSource mSpawnPositionSource;
    Vec3 mSpawnPositioningTestPosition;
    bool mBlockRespawnUntilClientMessage;
    uint32_t mRespawnChunkBuilderPolicyHandle;
    Player::CachedSpawnData mCachedSpawnData;
    OwnerPtr<BlockSource> mSpawnBlockSource;
    bool mHasSeenCredits;
    Stopwatch mRespawnStopwatch_Searching;
    Vec3 mRespawnOriginalPosition;
    DimensionType mRespawnOriginalDimension;
    bool mRespawnReady;
    std::__cxx11::string mRespawnMessage;
    bool mCheckBed;
    bool mIsInitialSpawnDone;
    bool mRespawningFromTheEnd;
    bool mPositionLoadedFromSave;
    int mFixStartSpawnFailures;
    ItemStack mItemInUse;
    PlayerInventory::SlotData mItemInUseSlot;
    int mItemInUseDuration;
    short mSleepCounter;
    short mPrevSleepCounter;
    bool mInteractDataDirty;
    ActorUniqueID mPreviousInteractEntity;
    int mPreviousCarriedItem;
    bool mAutoJumping;
    int mEmoteTicks;
    NetworkChunkPublisher mChunkPublisherView;
    PacketSender &mPacketSender;
    BlockPos mBounceStartPos;
    const Block *mBounceBlock;
    float mFOVModifier;
    std::shared_ptr<HudContainerManagerModel> mHudContainerManagerModel;
    std::unique_ptr<EnderChestContainer, std::default_delete<EnderChestContainer> > mEnderChestInventory;
    std::vector<ActorUniqueID, std::allocator<ActorUniqueID> > mTrackedBossIDs;
    Player::PositionMode mPositionMode;
    ActorType mLastHurtBy;
    ItemGroup mCursorSelectedItemGroup;
    PlayerUIContainer mPlayerUIContainer;
    InventoryTransactionManager mTransactionManager;
    std::unique_ptr<GameMode, std::default_delete<GameMode> > mGameMode;
    PlayerRespawnRandomizer mSpawnRandomizer;
    std::unique_ptr<ItemStackNetManagerBase, std::default_delete<ItemStackNetManagerBase> > mItemStackNetManager;
    std::shared_ptr<AnimationComponent> mUIAnimationComponent;
    std::shared_ptr<AnimationComponent> mMapAnimationComponent;
    Player::PlayerSpawnPoint mPlayerRespawnPoint;
  private:
    bool mUseUIAnimationComponent;
    bool mUseMapAnimationComponent;
    PlayerListenerList mListeners;
    int mLastLevelUpTime;
    bool mPlayerLevelChanged;
    int mPreviousLevelRequirement;
    Vec3 mRespawnPositionCandidate;
    Vec3 mEnterBedPosition;
    Vec3 mPreDimensionTransferSpawnPosition;
    bool mPlayerIsSleeping;
    bool mAllPlayersSleeping;
    Player::LevelSleepStatus mSleepStatus;
    bool mDestroyingBlock;
    Vec3 mSurvivalViewerPosition;
    std::vector<unsigned int, std::allocator<unsigned int> > mOnScreenAnimationTextures;
    int mOnScreenAnimationTicks;
    GameType mPlayerGameType;
    int mEnchantmentSeed;
    uint32_t mChunkRadius;
    int mMapIndex;
    LoopingSoundHandle mElytraLoop;
    float mElytraVolume;
    std::unordered_map<HashedString, int, std::hash<HashedString>, std::equal_to<HashedString>, std::allocator<std::pair<HashedString const, int> > > mCooldowns;
    int64_t mStartedBlockingTimeStamp;
    int64_t mBlockedUsingShieldTimeStamp;
    int64_t mBlockedUsingDamagedShieldTimeStamp;
    bool mPrevBlockedUsingShield;
    bool mPrevBlockedUsingDamagedShield;
    bool mUsedPotion;
    int mBounceHeight;
    SkinAdjustments mSkinAdjustments;
    SerializedSkin mSerializedSkin;
    std::__cxx11::string mName;
    std::__cxx11::string mLastEmotePlayed;
    time_t mEmoteEasterEggEndTime;
    unsigned int mEmoteMessageCount;
    int mScanForDolphinTimer;
    std::__cxx11::string mDeviceId;
    bool mFlagClientForBAIReset;
    BedHelper mBedHelper;
    Tick mElytraFlightTimeTicks;
    bool mOverrideShouldCrit;

  public:
    static bool _shouldAdjustYToSolidGroundOnSpawn(bool, bool, bool, bool, bool);
    Player(Level &, PacketSender &, GameType, const NetworkIdentifier &, SubClientId, mce::UUID, const std::__cxx11::string &, const std::__cxx11::string &, std::unique_ptr<Certificate, std::default_delete<Certificate> >, EntityContext &, const std::__cxx11::string &, const std::__cxx11::string &);
    virtual ~Player(void);
    virtual void initializeComponents(Actor::InitializationMethod, const VariantParameterList &);
    virtual void reloadHardcoded(Actor::InitializationMethod, const VariantParameterList &);
    virtual void prepareRegion(ChunkSource &);
    virtual void destroyRegion(void);
    virtual void suspendRegion(void);
    virtual void resendAllChunks(void);
    virtual void _fireWillChangeDimension(void);
    virtual void _fireDimensionChanged(void);
    virtual bool canChangeDimensionsUsingPortal(void) const;
    virtual void changeDimensionWithCredits(DimensionType);
    bool shouldShowCredits(void) const;
    bool getHasSeenCredits(void) const;
    void setHasSeenCredits(bool);
    ChunkViewSource * getChunkSource(void) const;
    uint32_t getChunkRadius(void) const;
    void setChunkRadius(uint32_t);
    virtual void tickWorld(const Tick &);
    virtual void frameUpdate(FrameUpdateContextBase &);
    virtual const std::vector<ChunkPos, std::allocator<ChunkPos> > & getTickingOffsets(void) const;
    virtual void trySendPlayerTeleported(void);
    virtual void normalTick(void);
    virtual void moveView(void);
    virtual void moveSpawnView(const Vec3 &, DimensionType);
    BuildPlatform getPlatform(void) const;
    const std::__cxx11::string & getPlatformOnlineId(void) const;
    virtual void setName(const std::__cxx11::string &);
    virtual const std::__cxx11::string & getName(void) const;
    void setPlatform(const BuildPlatform);
    void setPlatformOnlineId(const std::__cxx11::string &);
    virtual void onSynchedDataUpdate(int);
    void onMobStatusChanged(ActorUniqueID);
    virtual void aiStep(void);
    virtual void aiStep(IMobMovementProxy &) const;
    static void _aiStep(IPlayerMovementProxy &);
    virtual void move(const Vec3 &);
    virtual void move(IActorMovementProxy &, const Vec3 &) const;
    static void _move(IPlayerMovementProxy &, const Vec3 &);
    virtual void travel(float, float, float);
    static void _travel(IPlayerMovementProxy &, float, float, float);
    virtual TravelMethod getTravelledMethod(void) const;
    virtual bool isFireImmune(void) const;
    AABB getPickupArea(void) const;
    void updateTouch(void);
    virtual void checkMovementStats(const Vec3 &);
    virtual void passengerCheckMovementStats(void);
    virtual StructureFeatureType getCurrentStructureFeature(void) const;
    virtual void jumpFromGround(void);
    virtual void jumpFromGround(IMobMovementProxy &) const;
    static void _jumpFromGround(IPlayerMovementProxy &);
    virtual void setBlockMovementSlowdownMultiplier(const BlockLegacy &, const Vec3 &);
    static void handleJumpEffects(IPlayerMovementProxy &);
    virtual bool isAutoJumpEnabled(void) const;
    static void goDownInWater(IActorMovementProxy &);
    virtual Vec3 getInterpolatedRidingOffset(float, const int) const;
    virtual void passengerTick(void);
    virtual void die(const ActorDamageSource &);
    virtual void remove(void);
    virtual void respawn(void);
    void setBlockRespawnUntilClientMessage(const bool);
    bool getBlockRespawnUntilClientMessage(void) const;
    virtual bool shouldDropDeathLoot(void) const;
    virtual void dropEquipmentOnDeath(const ActorDamageSource &, int);
    virtual void dropEquipmentOnDeath(void);
    virtual void clearVanishEnchantedItemsOnDeath(void);
    virtual bool drop(const ItemStack &, const bool);
    bool equippedArmorItemCanBeMoved(const ItemStack &) const;
    void setRespawnPositionCandidate(void);
    virtual void resetRot(void);
    virtual void resetUserPos(bool);
    Vec3 getStandingPositionOnBlock(const BlockPos &);
    const BlockPos & getSpawnPosition(void) const;
    DimensionType getSpawnDimension(void) const;
    bool isForcedRespawn(void) const;
    void updateSpawnChunkView(void);
    void setBedRespawnPosition(const BlockPos &);
    void setSpawnBlockRespawnPosition(const BlockPos &, DimensionType);
    void setRespawnPosition(const BlockPos &, DimensionType);
    void setRespawnPosition(const BlockPos &, DimensionType, const BlockPos &);
    void clearRespawnPosition(void);
    const BlockPos & getExpectedSpawnPosition(void) const;
    DimensionType getExpectedSpawnDimensionId(void) const;
    const std::__cxx11::string & getRespawnMessage(void) const;
    std::__cxx11::string getDeviceId(void) const;
    virtual bool isShootable(void);
    bool isInCreativeMode(void) const;
    virtual bool isCreativeModeAllowed(void);
    virtual bool isInTrialMode(void);
    bool isBouncing(void) const;
    bool isDestroyingBlock(void) const;
    bool isHiddenFrom(Mob &) const;
    virtual void setSpeed(float);
    virtual bool hasResource(int);
    bool hasResource(const ItemDescriptor &);
    bool hasRespawnPosition(void) const;
    bool isSlowedByItemUse(void) const;
    bool isUsingItem(void) const;
    const ItemStack & getItemInUse(void) const;
    void startUsingItem(const ItemStack &, int);
    void stopUsingItem(void);
    void releaseUsingItem(void);
    virtual void completeUsingItem(void);
    virtual int getItemUseDuration(void) const;
    virtual float getItemUseStartupProgress(void) const;
    virtual float getItemUseIntervalProgress(void) const;
    int getTicksUsingItem(void) const;
    virtual bool isBlocking(void) const;
    virtual bool isDamageBlocked(const ActorDamageSource &) const;
    void tryDisableShield(void);
    int getScore(void);
    virtual void awardKillScore(Actor &, int);
    virtual void handleEntityEvent(ActorEvent, int);
    virtual std::vector<ItemStack const*, std::allocator<ItemStack const*> > getAllHand(void) const;
    virtual std::vector<ItemStack const*, std::allocator<ItemStack const*> > getAllEquipment(void) const;
    bool take(Actor &, int, int);
    virtual bool add(ItemStack &);
    bool canDestroy(const Block &) const;
    float getDestroySpeed(const Block &) const;
    float getDestroyProgress(const Block &) const;
    virtual CommandPermissionLevel getCommandPermissionLevel(void) const;
    bool isOperator(void) const;
    PlayerPermissionLevel getPlayerPermissionLevel(void) const;
    void setPermissions(CommandPermissionLevel);
    bool canUseOperatorBlocks(void) const;
    bool isHurt(void);
    bool isHungry(void) const;
    bool interact(Actor &, const Vec3 &);
    std::__cxx11::string getItemInteractText(const Item &) const;
    virtual bool attack(Actor &, const ActorDamageCause &);
    virtual const ItemStack & getCarriedItem(void) const;
    virtual void setCarriedItem(const ItemStack &);
    ItemStackNetManagerBase * getItemStackNetManager(void);
    const ItemStackNetManagerBase * getItemStackNetManager(void) const;
    virtual void startDestroying(void);
    virtual void stopDestroying(void);
    void crackBlock(const BlockPos &, FacingID);
    virtual void openPortfolio(void);
    virtual void openBook(int, bool, int, BlockActor *);
    virtual void openTrading(const ActorUniqueID &, bool);
    virtual bool canOpenContainerScreen(void);
    virtual void openChalkboard(ChalkboardBlockActor &, bool);
    virtual void openNpcInteractScreen(std::shared_ptr<INpcDialogueData>);
    virtual void openInventory(void);
    virtual void displayChatMessage(const std::__cxx11::string &, const std::__cxx11::string &);
    virtual void displayClientMessage(const std::__cxx11::string &);
    virtual void displayTextObjectMessage(const TextObjectRoot &, const std::__cxx11::string &, const std::__cxx11::string &);
    virtual void displayTextObjectWhisperMessage(const ResolvedTextObject &, const std::__cxx11::string &, const std::__cxx11::string &);
    virtual void displayTextObjectWhisperMessage(const std::__cxx11::string &, const std::__cxx11::string &, const std::__cxx11::string &);
    virtual void displayWhisperMessage(const std::__cxx11::string &, const std::__cxx11::string &, const std::__cxx11::string &, const std::__cxx11::string &);
    virtual float getCameraOffset(void) const;
    virtual float getShadowRadius(void) const;
    virtual ActorType getEntityTypeId(void) const;
    virtual bool isSleeping(void) const;
    virtual void setSleeping(bool);
    void recheckSpawnPosition(void);
    bool hasRespawnAnchorPosition(void) const;
    const BlockPos & getRespawnAnchorPosition(void) const;
    bool hasBedPosition(void) const;
    const BlockPos & getBedPosition(void) const;
    virtual BedSleepingResult startSleepInBed(const BlockPos &);
    virtual void stopSleepInBed(bool, bool);
    virtual bool canStartSleepInBed(void);
    virtual int getSleepTimer(void) const;
    virtual int getPreviousTickSleepTimer(void) const;
    void setSleepingPlayers(Player::LevelSleepStatus);
    int getSleepingPlayerCount(void) const;
    int getTotalPlayerCount(void) const;
    void setAllPlayersSleeping(void);
    float getSleepRotation(void) const;
    bool isSleepingLongEnough(void) const;
    virtual void sendInventory(bool);
    const ItemStack & getSelectedItem(void) const;
    void setSelectedItem(const ItemStack &);
    int getSelectedItemSlot(void) const;
    const ItemStack & setSelectedSlot(int);
    int getAttackDamage(void);
    virtual void openSign(const BlockPos &);
    bool isEmoteMessageEasterEgg(void) const;
    virtual void playEmote(const std::__cxx11::string &);
    void setEmotingStatus(bool);
    void updateEmoteMessageData(const PersonaPiece &);
    virtual bool isSilentObserver(void) const;
    virtual bool isHostingPlayer(void) const;
    virtual bool isPlayer(void) const;
    bool hasOwnedChunkSource(void) const;
    virtual bool useNewAi(void) const;
    virtual void useItem(ItemStackBase &, ItemUseMethod, bool);
    void useSelectedItem(ItemUseMethod, bool);
    void setRespawnReady(const Vec3 &);
    bool isRespawnReady(void);
    virtual bool isLoading(void) const;
    virtual bool isPlayerInitialized(void) const;
    virtual void stopLoading(void);
    virtual void registerTrackedBoss(ActorUniqueID);
    virtual void unRegisterTrackedBoss(ActorUniqueID);
    const std::vector<ActorUniqueID, std::allocator<ActorUniqueID> > & getTrackedBosses(void);
    void updateTrackedBosses(void);
    virtual bool isCreative(void) const;
    virtual bool isSurvival(void) const;
    virtual bool isSpectator(void) const;
    virtual bool isAdventure(void) const;
    bool forceAllowEating(void) const;
    virtual float getSpeed(void) const;
    Vec3 getCapePos(float);
    bool canBeSeenOnMap(void) const;
    virtual int getPortalCooldown(void) const;
    virtual int getPortalWaitTime(void) const;
    virtual void setPlayerGameType(GameType);
    void resetToDefaultGameMode(void);
    GameType getPlayerGameType(void) const;
    GameType getUnmappedPlayerGameType(void) const;
    virtual void initHUDContainerManager(void);
    void SetSurvivalViewerPosition(const Vec3 &);
    static float calculateSaturationIncrease(float, float);
    void eat(const ItemStack &);
    void eat(int, float);
    virtual void _crit(Actor &);
    void applyExhaustion(const Vec3 &);
    void causeFoodExhaustion(float);
    static void causeFoodExhaustion(IActorMovementProxy &, float);
    static void _causeFoodExhaustion(AttributeInstance *, bool, float);
    virtual bool isImmobile(void) const;
    static bool isImmobile(const IActorMovementProxy &);
    virtual void sendMotionPacketIfNeeded(void);
    static void handleMovePlayerPacket(IPlayerMovementProxy &, Player::PositionMode, const Vec3 &, const Vec2 &, float, int, int);
    const std::__cxx11::string & getPlayerSessionId(void) const;
    virtual IMinecraftEventing * getEventing(void) const;
    virtual Social::LocalUserId getUserId(void) const;
    virtual void sendEventPacket(EventPacket &) const;
    virtual void addExperience(int);
    virtual void addLevels(int);
    int getPlayerLevel(void) const;
    float getLevelProgress(void) const;
    int getXpNeededForNextLevel(void) const;
    void resetPlayerLevel(void);
    int getXpNeededForLevelRange(int, int) const;
    int getEnchantmentSeed(void) const;
    void setEnchantmentSeed(int);
    void getNewEnchantmentSeed(void);
    void spawnExperienceOrb(const Vec3 &, int);
    virtual void setArmor(ArmorSlot, const ItemStack &);
    virtual void setOffhandSlot(const ItemStack &);
    bool canStackInOffhand(const ItemStack &) const;
    virtual std::unique_ptr<AddActorBasePacket, std::default_delete<AddActorBasePacket> > tryCreateAddActorPacket(void);
    virtual bool isWorldBuilder(void) const;
    virtual bool isInvulnerableTo(const ActorDamageSource &) const;
    virtual void setContainerData(IContainerManager &, int, int);
    virtual void slotChanged(IContainerManager &, Container &, int, const ItemStack &, const ItemStack &, bool);
    virtual void inventoryChanged(Container &, int, const ItemStack &, const ItemStack &, bool);
    virtual void refreshContainer(IContainerManager &);
    bool hasOpenContainer(void) const;
    bool hasOpenContainerOfContainerType(ContainerType) const;
    std::weak_ptr<IContainerManager> getContainerManager(void);
    void setContainerManager(std::shared_ptr<IContainerManager>);
    virtual void deleteContainerManager(void);
    std::weak_ptr<HudContainerManagerModel> getHudContainerManagerModel(void);
    virtual const ItemStack & getEquippedTotem(void) const;
    virtual bool consumeTotem(void);
    float getLuck(void);
    virtual void setFieldOfViewModifier(float);
    bool is2DPositionRelevant(DimensionType, const BlockPos &);
    virtual bool isActorRelevant(const Actor &);
    virtual float getMapDecorationRotation(void) const;
    virtual void teleportTo(const Vec3 &, bool, int, int, bool);
    int32_t getPlayerIndex(void) const;
    void setPlayerIndex(int32_t);
    void startGliding(void);
    void stopGliding(void);
    virtual void startSwimming(void);
    virtual void stopSwimming(void);
    virtual void startSpinAttack(void);
    virtual void stopSpinAttack(void);
    void setAgent(Agent *);
    Agent * getAgent(void) const;
    Agent * getAgentIfAllowed(bool, ActorUniqueID) const;
    ActorUniqueID getAgentID(void) const;
    virtual bool isTeacher(void) const;
    virtual void onSuspension(void);
    virtual void onLinkedSlotsChanged(void);
    virtual bool canBePulledIntoVehicle(void) const;
    virtual void feed(int);
    void startCooldown(const HashedString &, int, bool);
    virtual void startCooldown(const Item *, bool);
    virtual int getItemCooldownLeft(const HashedString &) const;
    virtual int getItemCooldownLeft(const HashType64) const;
    virtual int getMaxItemCooldownLeft(void) const;
    virtual bool isItemOnCooldown(const HashedString &) const;
    void fireDimensionChangedEvent(DimensionType, DimensionType);
    void queueOnScreenTextureAnimation(const unsigned int);
    unsigned int getCurrentOnScreenAnimationEffectID(void) const;
    void resetOnScreenAnimationTicks(void);
    int getOnScreenAnimationTicks(void) const;
    int64_t getBlockingStartTimeStamp(void) const;
    int64_t getBlockedUsingShieldTimeStamp(void) const;
    int64_t getBlockedUsingDamagedShieldTimeStamp(void) const;
    InventoryTransactionManager & getTransactionManager(void);
    virtual void sendInventoryTransaction(const InventoryTransaction &) const;
    virtual void sendComplexInventoryTransaction(std::unique_ptr<ComplexInventoryTransaction, std::default_delete<ComplexInventoryTransaction> >) const;
    virtual void sendNetworkPacket(Packet &) const;
    GameMode & getGameMode(void) const;
    int getDirection(void) const;
    void addListener(PlayerListener &);
    void removeListener(PlayerListener &);
    virtual bool canExistWhenDisallowMob(void) const;
    int getMapIndex(void);
    void setMapIndex(int);
    virtual std::__cxx11::string getFormattedNameTag(void) const;
    virtual bool getAlwaysShowNameTag(void) const;
    std::__cxx11::string getInteractText(void) const;
    const SkinAdjustments & getSkinAdjustments(void) const;
    void updateSkin(const SerializedSkin &, int);
    const SerializedSkin & getSkin(void) const;
    SerializedSkin & getSkin(void);
    void setLastHurtBy(ActorType);
    ActorType getLastHurtBy(void) const;
    void clearCreativeItemList(void);
    void updateCreativeItemList(void);
    const std::vector<ItemInstance, std::allocator<ItemInstance> > & getCreativeItemList(void) const;
    const std::array<std::vector<ItemGroup, std::allocator<ItemGroup> >, 4> & getFilteredCreativeItemList(void) const;
    virtual bool canAddPassenger(Actor &) const;
    virtual bool isJumping(void) const;
    bool isEmoting(void) const;
    virtual Vec3 getAttachPos(ActorLocation, float) const;
    void setUsedPotion(bool);
    bool getUsedPotion(void);
    void tickArmor(void);
    bool isSpawned(void) const;
    bool isRespawningFromTheEnd(void) const;
    bool isInRaid(void) const;
    virtual PlayerEventCoordinator & getPlayerEventCoordinator(void);
    virtual MoveInputHandler * tryGetMoveInputHandler(void) const;
    MoveInputHandler * getMoveInputHandler(void) const;
    virtual InputMode getInputMode(void) const;
    virtual ClientPlayMode getPlayMode(void) const;
    virtual void reportMovementTelemetry(const MovementEventType);
    const Vec3 & getSpawnPositioningTestPosition(void) const;
    virtual bool isSimulated(void) const;
    virtual std::__cxx11::string getXuid(void) const;
    virtual const PlayerMovementSettings & getMovementSettings(void) const;
    void testAttackWithCritical(Actor &);
    static bool checkAndFixSpawnPosition(Vec3 &, std::vector<gsl::not_null<BlockSource*>, std::allocator<gsl::not_null<BlockSource*> > >, AABB, bool, bool, bool, bool, bool, bool, Height);
    void broadcastPlayerSpawnedMobEvent(ActorType, MobSpawnMethod);
    virtual bool canFreeze(void) const;
    bool isScoping(void) const;
    void updateBlockSourceTick(void);
    virtual bool canInteractWithOtherEntitiesInGame(void) const;
    virtual bool canObstructSpawningAndBlockPlacement(void) const;
    bool canSleep(void) const;
    static const Player * tryGetFromComponent(const PlayerComponent &, const ActorOwnerComponent &, bool);
    static Player * tryGetFromComponent(const PlayerComponent &, ActorOwnerComponent &, bool);
    static Player * tryGetFromEntity(EntityContext &, const bool);
    static Player * tryGetFromEntity(StackRefResult<EntityContext>, bool);
    static bool isDangerousVolume(BlockSource &, const AABB &, bool);
    virtual std::optional<BlockPos> getLastDeathPos(void) const;
    void setLastDeathPos(const BlockPos);
    virtual std::optional<AutomaticID<Dimension, int> > getLastDeathDimension(void) const;
    void setLastDeathDimension(const DimensionType);
    void setHasDied(bool);
    virtual bool hasDiedBefore(void) const;
    void loadLastDeathLocation(const CompoundTag &);
    void saveLastDeathLocation(CompoundTag &) const;
    virtual void addSavedChunk(const ChunkPos &);
    bool areHandsBusy(void) const;
    void setHandsBusy(bool);
    bool isPaddling(Side) const;
    float getPaddleForce(Side) const;
    void setPaddleForce(Side, float);
  protected:
    virtual void updateAi(void);
    void setDefaultHeadHeight(void);
    virtual bool _hurt(const ActorDamageSource &, float, bool, bool);
    virtual void readAdditionalSaveData(const CompoundTag &, DataLoadHelper &);
    virtual void addAdditionalSaveData(CompoundTag &) const;
    bool checkSpawnBlock(const BlockSource &) const;
    bool checkBed(BlockSource *, const Vec3 * const);
    void _preSpawnBuildSpawnDataCache(void);
    bool _chooseSpawnPositionWithinArea(void);
    void _chooseSpawnArea(void);
    bool _validateSpawnPositionAvailability(const Vec3 &, BlockSource *, const Vec3 * const) const;
    static bool _isDangerousBlock(const Block &, bool);
    bool _checkAndFixSpawnPosition(Vec3 &, std::vector<gsl::not_null<BlockSource*>, std::allocator<gsl::not_null<BlockSource*> > >, bool, bool, bool, bool, bool) const;
    bool _validateSpawnIsEmpty(BlockPos);
    std::optional<BlockPos> _findValidPosWithVerticalSpace(BlockPos);
    void _registerPlayerAttributes(void);
    void moveCape(void);
    virtual void onMovePlayerPacketNormal(const Vec3 &, const Vec2 &, float);
    virtual void onBounceStarted(const BlockPos &, const Block &);
    virtual void updateGliding(void);
    virtual bool _shouldProvideFeedbackOnHandContainerItemSet(HandSlot, const ItemStack &) const;
    virtual bool _shouldProvideFeedbackOnArmorSet(ArmorSlot, const ItemStack &) const;
    void _setStartedBlockingTimeStamp(int64_t);
    void _setBlockedUsingShieldTimeStamp(int64_t);
    void _setBlockedUsingDamagedShieldTimeStamp(int64_t);
    void _tickCooldowns(void);
    void _updateInteraction(void);
    virtual std::shared_ptr<ChunkViewSource> _createChunkSource(ChunkSource &);
  private:
    void _ensureSafeSpawnPosition(Vec3 &);
    bool _fixup4JBedSpawnPosition(Vec3 &);
    bool _findFallbackSpawnPosition(Vec3 &, std::vector<gsl::not_null<BlockSource*>, std::allocator<gsl::not_null<BlockSource*> > >, uint32_t);
    void _touch(Actor &);
    float _getItemDestroySpeed(const Block &) const;
    void _addLevels(int);
    bool _shouldCrit(const Actor &) const;
    void _calculateCritDamage(float &) const;
    bool _blockUsingShield(const ActorDamageSource &, float);
    void _sendShieldUpdatePacket(const ShieldItem &, const ItemStack &, const ItemStack &, ContainerID, int);
    virtual void _onSizeUpdated(void);
    void _handleCarriedItemInteractText(void);
    bool _isChunkSourceLoaded(const Vec3 &, const BlockSource &) const;
    bool _updateFroglightCountAndTestForAchievement(const ItemStack &, const ItemStack &);
  public:
    int getBounceHeight(void);
    const PlayerInventory & getSupplies(void) const;
    PlayerInventory & getSupplies(void);
    const Container & getInventory(void) const;
    virtual Container & getInventory(void);
    virtual PlayerUIContainer & getPlayerUIContainer(void);
    const PlayerUIContainer & getPlayerUIContainer(void) const;
    const ItemStack & getCursorSelectedItem(void) const;
    const ItemGroup & getCursorSelectedItemGroup(void) const;
    const ItemStack & getCurrentActiveShield(void) const;
    const ItemStack & getPlayerUIItem(PlayerUISlot);
    void setPlayerUIItem(PlayerUISlot, const ItemStack &);
    void setCursorSelectedItem(const ItemStack &);
    void setCursorSelectedItemGroup(const ItemGroup &);
    void dropCursorSelectedItemOnDeath(void);
    EnderChestContainer * getEnderChestContainer(void);
    const EnderChestContainer * getEnderChestContainer(void) const;
    void updateInventoryTransactions(void);
    static bool checkNeedAutoJump(IPlayerMovementProxy *, float, float);
    static bool canJump(IPlayerMovementProxy &);
    virtual void setAbilities(const LayeredAbilities &);
    bool canUseAbility(AbilitiesIndex) const;
    void onResetBAI(int);
    bool shouldClientResetBAI(void) const;
    void flagClientForBAIreset(bool);
    bool getAutoJumping(void) const;
    float getVRMoveAdjustAngle(void) const;
    void setVRMoveAdjustAngle(float);
    void useMapAnimationComponent(bool);
    bool shouldUseMapAnimationComponent(void) const;
    virtual AnimationComponent & getAnimationComponent(void);
    virtual const HashedString & getActorRendererId(void) const;
    virtual Player::PositionMode GetPlayerPositionMode(void) const;
    bool isFlying(void) const;
    virtual Bedrock::NonOwnerPointer<Editor::IEditorPlayer> getEditorPlayer(void) const;
    virtual void destroyEditorPlayer(void);
    PacketSender & getPacketSender(void);
    const Vec3 & getPreDimensionTransferSpawnPosition(void) const;
    Player::SpawnPositionState testOnly_getSpawnPositionState(void);
    float testOnly_getFOVModifier(void) const;
    int testOnly_getScanForDolphinTimer(void) const;
    void testOnly_resetSpawnData(void);
    void testOnly_setLoadedRespawnData(const Vec3 &, bool);
    bool testOnly_updateFroglightCountAndTestForAchievement(const ItemStack &, const ItemStack &);
    void testOnly_resetFroglightTracker(void);
    void testOnly_setPreDimensionTransferSpawnPosition(const Vec3);
  protected:
    virtual void _serverInitItemStackIds(void);
    void _setPreDimensionTransferSpawnPosition(const Vec3);
  private:
    void _registerElytraLoopSound(void);
    virtual std::unique_ptr<BodyControl, std::default_delete<BodyControl> > initBodyControl(void);

    typedef std::vector<PlayerListener*, std::allocator<PlayerListener*> > PlayerListenerList;
}

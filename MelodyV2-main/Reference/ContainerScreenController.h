
class ContainerScreenController : public ClientInstanceScreenController { /* Size=0xe98 */
  /* 0x0000: fields for ClientInstanceScreenController */
  /* 0x0a70 */ BlockPos mBlockPos;
  /* 0x0a80 */ ActorUniqueID mEntityUniqueID;
  /* 0x0a88 */ TypeInContainer mTypeInContainer;
  /* 0x0a8c */ bool mShowItemCategory;
  /* 0x0a90 */ ContainerInteractionStateMachine mContainerStateMachine;
  /* 0x0be0 */ SlotData mLastStateSlot;
  /* 0x0c08 */ int32_t mLastPlacedAmount;
  /* 0x0c0c */ bool mSingleSplit;
  /* 0x0c10 */ SlotData mTouchSplitData;
  /* 0x0c38 */ ItemGroup mSelectedSplitTarget;
  /* 0x0d30 */ ProgressiveTakeButtonData mProgressiveTakeButton;
  /* 0x0d60 */ uint32_t mTouchProgressiveSelectButton;
  /* 0x0d68 */ std::vector<ItemStateData,std::allocator<ItemStateData> > mPreviousState;
  /* 0x0d80 */ SlotData mSelectedSlotData;
  /* 0x0da8 */ SlotData mLastSelectedSlotData;
  /* 0x0dd0 */ SlotData mHoveredSlotData;
  /* 0x0df8 */ std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > > mCoalesceOrderMap;
  /* 0x0e38 */ std::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<AutoPlaceItem,std::allocator<AutoPlaceItem> >,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<AutoPlaceItem,std::allocator<AutoPlaceItem> > > > > mAutoPlaceOrderMap;
  /* 0x0e78 */ InteractionModel mInteractionModel;
  /* 0x0e80 */ std::shared_ptr<ContainerManagerController> mContainerManagerController;
  /* 0x0e90 */ bool mNeedsUpdatedBinds;
  static const SlotData mCursorSlotData;
  
  ContainerScreenController(std::shared_ptr<ClientInstanceScreenModel>, InteractionModel);
  virtual ~ContainerScreenController();
  virtual ui::DirtyFlag tick();
  virtual void onOpen();
  virtual ui::DirtyFlag handleGameEventNotification(ui::GameEventNotification);
  virtual void onLeave();
  virtual void setAssociatedBlockPos(const BlockPos&);
  virtual void setAssociatedEntityUniqueID(const ActorUniqueID);
  virtual void addStaticScreenVars(Json::Value&);
  bool _usingGamepadScheme() const;
  bool _usingTouchScheme() const;
  virtual bool _isStillValid() const;
  InteractionModel _getInteractionModel() const;
  void _handleTakeAmount(int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleTakeAll(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleTakeHalf(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual void _handlePlaceAll(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual void _handlePlaceOne(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleAutoPlace(int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleDropSelectedItem(ItemTransferAmount);
  void _handleDropItem(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t, ItemTransferAmount);
  void _handleSplit(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleCoalesceStack(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&);
  void _handleCoalesceToIndex(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleProgressiveTake(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleHoverSlot(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual void _handleSelectSlot(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleUnselectSlot();
  void _handleSwap(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleAddAllToCursor(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  void _handleAddHalfToCursor(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  bool _isCursorSelectedActive() const;
  const ItemStackBase& _getSelectedItemStackBase() const;
  virtual const SelectedSlotInfo _getSelectedSlotInfo() const;
  void _postSetSelectedSlot(const SelectedSlotInfo&, bool, bool);
  virtual const ItemStack& _getItemStack(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  virtual const ItemStackBase& _getVisualItemStack(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  virtual const ItemStackBase& _getTakeableItemStackBase(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonADescription();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonXDescription();
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getButtonYDescription();
  bool _canShowTooltips() const;
  virtual ui::ViewRequest _onContainerSlotHovered(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual ui::ViewRequest _onContainerSlotSelected(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  virtual ui::ViewRequest _onContainerSlotPressed(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  bool _hasHoveredSlot() const;
  bool _hasSelectedSlot() const;
  bool _isHoveredSlot(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  bool _isSelectedSlot(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  void _saveLastSelectedSlot();
  void _loadLastSelectedSlot();
  void _saveCurrentContainerState();
  void _compareStatesForFlyingItems();
  virtual bool _shouldSwap(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  virtual std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getCollectionName(UIPropertyBag*) const;
  int32_t _getCollectionIndex(UIPropertyBag*) const;
  bool _isProgressiveTaking() const;
  int32_t _getProgressiveAmountTaken() const;
  int32_t _getProgressiveAmountTotal() const;
  bool _isSplitting() const;
  virtual bool _canSplit(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t) const;
  void _resetSplitStack();
  void _stopSplitting();
  bool _isIdle() const;
  virtual void _sendFlyingItem(const ItemStackBase&, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, int32_t);
  const std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& _getCoalesceOrder(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  const std::vector<AutoPlaceItem,std::allocator<AutoPlaceItem> >& _getAutoPlaceOrder(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  void _registerEventHandlersForStateMachine(uint32_t);
  void _registerSingleTouchOutputSlot(ContainerEnumName);
  bool _isOutputSlot(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) const;
  void _registerEventHandlers();
  void _registerBindings();
  void _registerStateMachine();
  virtual void _registerCoalesceOrder();
  virtual void _registerAutoPlaceOrder();
  int32_t _getInventorySelectedItemId();
  int32_t _getInventorySelectedItemModValue();
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getInventorySelectedItemModExtendValue();
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getStackItemCount() const;
  int32_t _getStackItemColor(const ItemInstance&) const;
  bool _shouldShowTags() const;
  const ItemGroup& _getCursorSelectedItemGroup() const;
  void _setCursorSelectedItemGroup(const ItemGroup&);
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _getDisplayName() const;
  std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >& _getReservedCoalesceOrder(ContainerEnumName, uint64_t);
  std::vector<AutoPlaceItem,std::allocator<AutoPlaceItem> >& _getReservedAutoPlaceOrder(ContainerEnumName, uint64_t);
  void __autoclassinit2(uint64_t);
  virtual void* __vecDelDtor(uint32_t);
  
  static InteractionModel interactionModelFromUIProfile(UIProfile);
};
